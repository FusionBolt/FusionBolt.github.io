<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Homura&#39;s Blog</title>
  
  
  <link href="https://fusionbolt.github.io/atom.xml" rel="self"/>
  
  <link href="https://fusionbolt.github.io/"/>
  <updated>2025-01-01T10:22:51.289Z</updated>
  <id>https://fusionbolt.github.io/</id>
  
  <author>
    <name>Homura</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024年终总结</title>
    <link href="https://fusionbolt.github.io/2025/01/01/Summary/summary-2024/"/>
    <id>https://fusionbolt.github.io/2025/01/01/Summary/summary-2024/</id>
    <published>2025-01-01T10:22:15.000Z</published>
    <updated>2025-01-01T10:22:51.289Z</updated>
    
    <content type="html"><![CDATA[<p>与其说是年终总结，更像是自己想到哪里说到哪里的无病呻吟，几乎没有提及什么积极向上的内容，也不会再按照往年一样罗列自己的所有成果（更何况今年也没做什么），但在我眼里的这一年就是如此。</p><p>不知不觉2024已经过去，这一年的生活相比前一年差异巨大，做了许多去年想做的事情，但也有很多不再做了的事情，整体略显颓废，但也不能用一句过的很差劲来简单总结。</p><p>实现了去年想要自己整租的愿望，养了一只猫，换了新的工作，接触到了新的工作内容，目前每个月攒下的钱也变多了一些。但是今年四五月开始逐渐变得“懒惰”，休息时间几乎一直在游戏和动画片中度过，甚至还开始在游戏中氪金。渐渐不再看书，练琴经常偷懒并且也不再直播，读书频道和博客也不再更新，周末也几乎不再出门，加上饮食上的变化今年体重也增加了不少。</p><p>现在的我会变回这个样子是必然的。只要自身的本性不产生什么变化，那么不论身处何地，何种环境，总是会面对同样的事情，我也正因如此逐渐感到失去希望，心境如同焰看到圆的因果都是由自己而产生的一样。今年也曾多次想要爬出来，但是现实的闷棍又把我打回了坑中。</p><p>除此之外，以往的“勤奋”行为本就不是顺其自然，随着身体的惰性越来越强烈，只想要追求短期快乐，哪怕是在这篇文章的现在，我也想要去继续玩幻兽帕鲁。原因有很多，生活中的挫败感是一方面，可能最大的原因还是身体所带来的影响，让我变得难以专注，对绝大部分的事情都没有兴趣。今年的药物调整过几次用量，年初的时候似乎是因为去年年底剧烈的挫败感增加了用量，刚加量的时候自然是状态较好的，但在随后的日子里情绪反反复复，逐渐觉得也就这样了，最终和大夫协商下开始逐渐减少用量，希望过两年能避免药物依赖，好在情绪多少稳定些，只是“怠惰”并未好转，药物也不能无止境的加下去，只能这样勉强过着日子了。</p><p>写到这里不知该写些什么，翻看了2023年的年终总结，发现暴露出来的东西和之前的一模一样，反而今年还写的特别随意，单纯抱怨一般，也就先写到这里吧，不是很想写下去，也没有那么多想说的，这几天可能也会再回想一下，如果还有事情可说最后再更新就是（大概率无了）。</p><p>不论怎么说2024已经结束了，希望2025年能够变好吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;与其说是年终总结，更像是自己想到哪里说到哪里的无病呻吟，几乎没有提及什么积极向上的内容，也不会再按照往年一样罗列自己的所有成果（更何况今年也没做什么），但在我眼里的这一年就是如此。&lt;/p&gt;
&lt;p&gt;不知不觉2024已经过去，这一年的生活相比前一年差异巨大，做了许多去年想做的事</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>LLVM异常实现五 总结回顾</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-5/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-5/</id>
    <published>2024-10-02T03:28:15.000Z</published>
    <updated>2024-10-02T03:35:31.048Z</updated>
    
    <content type="html"><![CDATA[<p>整个异常处理的过程中，涉及到各种层级之间相互调用，同时还有一些函数还会负责处理不同的功能（比如说personality会同时处理search以及clean），这都导致了整个过程相对复杂，因此在这里选择将异常抛出的整个过程再次用文字整理一遍，省略去庞大的代码细节的同时相对轻易的看到了整个过程是如何运转，都做了哪些事情，利于我们的理解。</p><p>首先一般的异常实现是由两级组成，一级由语言相关的abi，personality，以及语言相关的exception table（language specificatio data area）组成，用于实际在编译的过程中插入到代码以及生成产物中。</p><p>另一级则是libunwind的部分，主要是用于栈回溯，寻找异常栈，被用于在语言相关abi中调用，这部分封装了不同的体系结构以及异常实现方式。</p><p>然后我们根据编译到运行的流程来整理一遍</p><h1 id="编译期间"><a href="#编译期间" class="headerlink" title="编译期间"></a>编译期间</h1><ol><li>源码 → AST：将try catch等异常相关的源码为ast</li><li>AST → LLVM IR：将异常相关的ast转换为对于abi的调用以及特殊的指令（landing pad，resume等），clang中包含abi的处理，因此这里指定了personality<ol><li>基础知识<ol><li>landing pad</li><li>resume</li><li>personality</li></ol></li></ol></li><li>Codegen：<ol><li>收集特殊指令的信息，转换为对应的机器指令</li><li>生成eh_frame段<ol><li>exception table：lsda</li><li>personality</li></ol></li></ol></li><li>Runtime：实际调用abi的实现</li></ol><h1 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h1><ol><li>函数入口分配异常对象 __cxa_allocation_exception</li><li>执行函数体</li><li>执行到抛出异常的位置调用 __cxa_throw<ol><li>_Unwind_RaiseException<ol><li>getcontext<ol><li>保存当前的寄存器到context中</li></ol></li><li>unwind_phase1 # search<ol><li>初始化 cursor<ol><li> placement new在cursor的空间上构建对象</li><li>setInfoBasedOnIPRegister<ol><li>获取并修正产生异常的pc</li><li>寻找unwind section，因平台和异常处理方式而异</li><li>找到后则从对应的section中读取信息填写到_info中，之后返回</li><li>如果没找到那么标记没有相关信息，最后返回</li></ol></li></ol></li><li>循环处理找到要处理的frame<ol><li>通过cursor找到下一个frame，step<ol><li>step内部根据不同的处理方式找到对应的pc，更新到cursor中</li></ol></li><li>获取proc的frame信息</li><li>personality存在的情况下进行调用<ol><li>如果找到对应的handler，那么记录sp指针并且正常返回</li><li>如果返回continue_unwind，寻找下一个frame</li><li>返回其他情况直接报错</li></ol></li></ol></li></ol></li><li>unwind_phase2 # clean up<ol><li>初始化 cursor</li><li>循环处理找到要处理的frame<ol><li>通过cursor找到下一个frame，step_stage2</li><li>获取proc的frame信息</li><li>personality存在的情况下进行调用<ol><li>如果返回continue unwind，如果sp和之前找到的相同，那么直接报错。因为前面确定了对应的栈帧，这里不应该继续unwind。</li><li>如果返回install_context，会进行resume，跳转到landingpad</li><li>返回其他情况直接报错</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>产生异常后跳转到landingpad的位置<ol><li>取出landingpad中的值信息</li></ol></li><li>捕获对象 __cxa_begin_catch<ol><li>减少未处理对象计数</li><li>更新对象的信息</li><li>将对象push到栈上</li></ol></li><li>如果对象的类型匹配那么就处理，如果不匹配继续找下一个，直到找到并且处理，最后进行__cxa_end_catch</li><li>找不到匹配到异常类型就resume到上一级</li></ol><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/exception-5/summary.png"                      alt="Exception实现.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整个异常处理的过程中，涉及到各种层级之间相互调用，同时还有一些函数还会负责处理不同的功能（比如说personality会同时处理search以及clean），这都导致了整个过程相对复杂，因此在这里选择将异常抛出的整个过程再次用文字整理一遍，省略去庞大的代码细节的同时相对轻易</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>LLVM异常实现四 personality</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-4/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-4/</id>
    <published>2024-10-02T03:28:11.000Z</published>
    <updated>2024-10-02T03:33:10.117Z</updated>
    
    <content type="html"><![CDATA[<p>前面libunwind的过程中多次和personality进行交互，这部分是由语言提供和语言相关的内容。libunwind的两个阶段对应到这一个函数之中，personality部分根据libunwind扫描到的平台相关的信息，在ehframe中扫描到当前栈帧对应的异常处理信息。</p><p>personality的第一阶段主要任务找到对应栈的异常信息，将这些信息写入一个异常对象中。第二阶段则是将异常相关的信息实际写入到context相关的寄存器中，待返回后供libunwind跳转到异常处理的位置.</p><h1 id="不同平台下的personality"><a href="#不同平台下的personality" class="headerlink" title="不同平台下的personality"></a>不同平台下的personality</h1><p>不同平台下有些许差距，为了减少代码提及在这里使用宏定义进行了区分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(_LIBCXXABI_ARM_EHABI)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__SEH__) &amp;&amp; !defined(__USING_SJLJ_EXCEPTIONS__)</span></span><br><span class="line"><span class="keyword">static</span> _Unwind_Reason_Code __gxx_personality_imp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">_LIBCXXABI_FUNC_VIS _Unwind_Reason_Code</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __USING_SJLJ_EXCEPTIONS__</span></span><br><span class="line">__gxx_personality_sj0</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">__gxx_personality_v0</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__SEH__) &amp;&amp; !defined(__USING_SJLJ_EXCEPTIONS__)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _LIBCXXABI_FUNC_VIS EXCEPTION_DISPOSITION</span><br><span class="line">__gxx_personality_seh0(PEXCEPTION_RECORD ms_exc, <span class="keyword">void</span> *this_frame,</span><br><span class="line">                       PCONTEXT ms_orig_context, PDISPATCHER_CONTEXT ms_disp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _GCC_specific_handler(ms_exc, this_frame, ms_orig_context, ms_disp,</span><br><span class="line">                               __gxx_personality_imp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _Unwind_Reason_Code __gnu_unwind_frame(_Unwind_Exception*,</span><br><span class="line">                                                  _Unwind_Context*);</span><br><span class="line"><span class="function"><span class="keyword">static</span> _Unwind_Reason_Code <span class="title">continue_unwind</span><span class="params">(_Unwind_Exception* unwind_exception,...</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">// ARM register names</span></span></span></span><br><span class="line"><span class="params"><span class="function">#<span class="keyword">if</span> !defined(_LIBUNWIND_VERSION)</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> REG_UCB = <span class="number">12</span>;  <span class="comment">// Register to save _Unwind_Control_Block</span></span></span></span><br><span class="line"><span class="params"><span class="function">#endif</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> REG_SP = <span class="number">13</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _LIBCXXABI_FUNC_VIS _Unwind_Reason_Code</span></span></span><br><span class="line"><span class="params"><span class="function">**__gxx_personality_v0**(_Unwind_State state,</span></span></span><br><span class="line"><span class="params"><span class="function">                     _Unwind_Exception* unwind_exception,</span></span></span><br><span class="line"><span class="params"><span class="function">                     _Unwind_Context* context)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;...&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">#endif</span></span></span><br></pre></td></tr></table></figure><p>personality主要是用于在libunwind中提到的两个phase。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__gxx_personality_sj0(<span class="keyword">int</span> version, _Unwind_Action actions, <span class="keyword">uint64_t</span> exceptionClass,</span><br><span class="line">                     _Unwind_Exception* unwind_exception, _Unwind_Context* context)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (version != <span class="number">1</span> || unwind_exception == <span class="number">0</span> || context == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> native_exception = (exceptionClass     &amp; get_vendor_and_language) ==</span><br><span class="line">                            (kOurExceptionClass &amp; get_vendor_and_language);</span><br><span class="line">    scan_results results;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Process a catch handler for a native exception first.</span></span><br><span class="line">    <span class="keyword">if</span> (actions == (_UA_CLEANUP_PHASE | _UA_HANDLER_FRAME) &amp;&amp;</span><br><span class="line">        native_exception) &#123;</span><br><span class="line">     ... <span class="comment">// 在phase2中使用   </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// In other cases we need to scan LSDA.</span></span><br><span class="line">    <span class="built_in">scan_eh_tab</span>(results, actions, native_exception, unwind_exception, context);</span><br><span class="line">    <span class="keyword">if</span> (results.reason == _URC_CONTINUE_UNWIND ||</span><br><span class="line">        results.reason == _URC_FATAL_PHASE1_ERROR)</span><br><span class="line">        <span class="keyword">return</span> results.reason;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (actions &amp; _UA_SEARCH_PHASE) &#123;</span><br><span class="line">    ... <span class="comment">// phase1中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">... <span class="comment">// phase2</span></span><br><span class="line">    <span class="keyword">return</span> _URC_INSTALL_CONTEXT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="phase1"><a href="#phase1" class="headerlink" title="phase1"></a>phase1</h1><p>search phase，主要用于找到对应栈的异常处理信息，因此在此之前需要先扫描eh_frame来获取lsda。</p><p>如果找不到对应处理信息那么会返回continue unwind，在libunwind中继续step到下一个栈，直到找到对应的栈帧或者scan出错为止。</p><p>如果找到异常处理信息，那么会保存在__cxa_exception中，供phase2读取使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scan_eh_tab</span>(results, actions, native_exception, unwind_exception, context);</span><br><span class="line"><span class="keyword">if</span> (results.reason == _URC_CONTINUE_UNWIND ||</span><br><span class="line">    results.reason == _URC_FATAL_PHASE1_ERROR)</span><br><span class="line">    <span class="keyword">return</span> results.reason;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (actions &amp; _UA_SEARCH_PHASE)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Phase 1 search:  All we&#x27;re looking for in phase 1 is a handler that</span></span><br><span class="line">    <span class="comment">//   halts unwinding</span></span><br><span class="line">    <span class="built_in">assert</span>(results.reason == _URC_HANDLER_FOUND);</span><br><span class="line">    <span class="keyword">if</span> (native_exception) &#123;</span><br><span class="line">        <span class="comment">// For a native exception, cache the LSDA result.</span></span><br><span class="line">        __cxa_exception* exc = (__cxa_exception*)(unwind_exception + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        exc-&gt;handlerSwitchValue = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(results.ttypeIndex);</span><br><span class="line">        exc-&gt;actionRecord = results.actionRecord;</span><br><span class="line">        exc-&gt;languageSpecificData = results.languageSpecificData;</span><br><span class="line">        exc-&gt;catchTemp = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(results.landingPad);</span><br><span class="line">        exc-&gt;adjustedPtr = results.adjustedPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _URC_HANDLER_FOUND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="phase2"><a href="#phase2" class="headerlink" title="phase2"></a>phase2</h1><p>clean up phase，此时会有两类情况。</p><p>一类是在phase1中已经找好对应的异常处理信息，可以直接读取信息并且设置context的寄存器，此时读取的就是phase1中保存的结果，通过set_registers设置对应的值，之后会返回libunwind并且跳转到libunwind。</p><p>另一类则是没有可用处理信息的情况，会再次scan_eh_tab，使用搜索到的结果更新context。两次进行scan的原因是第一阶段允许</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a catch handler for a native exception first.</span></span><br><span class="line"><span class="keyword">if</span> (actions == (_UA_CLEANUP_PHASE | _UA_HANDLER_FRAME) &amp;&amp;</span><br><span class="line">    native_exception) &#123;</span><br><span class="line">    <span class="comment">// Reload the results from the phase 1 cache.</span></span><br><span class="line">    __cxa_exception* exception_header =</span><br><span class="line">        (__cxa_exception*)(unwind_exception + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    results.ttypeIndex = exception_header-&gt;handlerSwitchValue;</span><br><span class="line">    results.actionRecord = exception_header-&gt;actionRecord;</span><br><span class="line">    results.languageSpecificData = exception_header-&gt;languageSpecificData;</span><br><span class="line">    results.landingPad =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(exception_header-&gt;catchTemp);</span><br><span class="line">    results.adjustedPtr = exception_header-&gt;adjustedPtr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Jump to the handler.</span></span><br><span class="line">    <span class="built_in">set_registers</span>(unwind_exception, context, results);</span><br><span class="line">    <span class="comment">// Cache base for calculating the address of ttype in</span></span><br><span class="line">    <span class="comment">// __cxa_call_unexpected.</span></span><br><span class="line">    <span class="keyword">return</span> _URC_INSTALL_CONTEXT;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">scan_eh_tab</span>(results, actions, native_exception, unwind_exception, context);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// if phase1</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">assert</span>(actions &amp; _UA_CLEANUP_PHASE);</span><br><span class="line"><span class="built_in">assert</span>(results.reason == _URC_HANDLER_FOUND);</span><br><span class="line"><span class="built_in">set_registers</span>(unwind_exception, context, results);</span><br><span class="line"><span class="comment">// Cache base for calculating the address of ttype in __cxa_call_unexpected.</span></span><br><span class="line"><span class="keyword">if</span> (results.ttypeIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  __cxa_exception* exception_header =</span><br><span class="line">        (__cxa_exception*)(unwind_exception + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_AIX)</span></span><br><span class="line">  exception_header-&gt;catchTemp = (<span class="keyword">void</span> *)_Unwind_GetDataRelBase(context);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  exception_header-&gt;catchTemp = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _URC_INSTALL_CONTEXT;</span><br></pre></td></tr></table></figure><h1 id="lsda的结构"><a href="#lsda的结构" class="headerlink" title="lsda的结构"></a>lsda的结构</h1><p>整个流程中少不了的是scan_eh_tab这个过程，而这个函数主要的用途就是去解析lsda的结构读取想要的信息。</p><p>图中Exception Table所对应的数据是lsda的结构，这个结构根据平台不同也有所变化，具体详情参考libcxxabi/src/cxa_personality.cpp中的注释</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/exception-4/Untitled.png"                      alt="Untitled"                ></p><p>主要的信息都在callSiteTable中，之前的部分主要是一些元信息</p><h1 id="scan-eh-tab"><a href="#scan-eh-tab" class="headerlink" title="scan_eh_tab"></a>scan_eh_tab</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scan_eh_tab</span><span class="params">(scan_results &amp;results, _Unwind_Action actions,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">bool</span> native_exception,</span></span></span><br><span class="line"><span class="params"><span class="function">                        _Unwind_Exception *unwind_exception,</span></span></span><br><span class="line"><span class="params"><span class="function">                        _Unwind_Context *context)</span></span>;</span><br></pre></td></tr></table></figure><p>三种scan的类型</p><ol><li>Scan for handler with native or foreign exception.</li><li>Scan for handler with foreign exception.</li><li>Scan for cleanups.</li></ol><p>scan的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scan_results</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span>        ttypeIndex;   <span class="comment">// &gt; 0 catch handler, &lt; 0 exception spec handler, == 0 a cleanup</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span>* actionRecord;         <span class="comment">// Currently unused.  Retained to ease future maintenance.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span>* languageSpecificData;  <span class="comment">// Needed only for __cxa_call_unexpected</span></span><br><span class="line">    <span class="keyword">uintptr_t</span>      landingPad;   <span class="comment">// null -&gt; nothing found, else something found</span></span><br><span class="line">    <span class="keyword">void</span>*          adjustedPtr;  <span class="comment">// Used in cxa_exception.cpp</span></span><br><span class="line">    _Unwind_Reason_Code reason;  <span class="comment">// One of _URC_FATAL_PHASE1_ERROR,</span></span><br><span class="line">                                 <span class="comment">//        _URC_FATAL_PHASE2_ERROR,</span></span><br><span class="line">                                 <span class="comment">//        _URC_CONTINUE_UNWIND,</span></span><br><span class="line">                                 <span class="comment">//        _URC_HANDLER_FOUND</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>整个scan都过程代码太长，主要的流程就是找到需要查询的数据（LSDA），之后解码数据，一个个检查是否为对应栈帧的数据。</p><p>使用文字流程代替</p><ol><li>检查对应的actions</li><li>获取LSDA（LanguageSpecificData）</li><li>设置base，获取ip，func start frame</li><li>LSDA的数据解码，获取callSiteTable以及actionTable</li><li>遍历所有的callSite<ol><li>根据当前callSite的位置解码start，length，landingpad，actionEntry</li><li>根据不同架构计算出实际的landingpad</li><li>actionEntry为0，那么返回reason<ol><li>如果是search phase那么是continue unwind</li><li>否则是handler found</li></ol></li><li>根据action表以及actionEntry得到实际的action</li><li>循环处理<ol><li>根据action得到actionRecord和ttypeindex</li><li>ttypeindex &gt; 0<ol><li>找到一个catch，get_shim_type_info获取type检查catch</li><li>如果catch为0，那么这里catch everything<ol><li>包含foreign exception。这里必须是一个search phase。clean up phase with foreign exception，或者force unwinding</li><li>记录下ttypeIndex, actionRecord, adjustedPtr（get_thrown_object_ptr）, reason并且返回</li></ol></li><li>如果catch不为0且是native exception<ol><li>那么此时是一个catch(T)，将不会catch一个foreign exception</li><li>获取exception header</li><li>获取adjustedPtr和excpType</li><li>全为空则terminate</li><li>如果catchType can_catch，那么handler_found，记录信息并且返回</li></ol></li><li>否则scan下一个action</li></ol></li><li>ttypeindex &lt; 0<ol><li>_UA_FORCE_UNWIND，意味着找到一个exception specification，直接跳过</li><li>如果不是force并且native_exception<ol><li>获取exception header</li><li>获取adjustedPtr和excpType</li><li>全为空则terminate</li><li>如果exception_spec_can_catch，那么handler_found，记录信息并且返回</li></ol></li><li>否则foreign exception caught by exception spec，记录信息并且返回</li></ol></li><li>ttypeindex == 0， 表明cleanup为true</li><li>action中读取actionOffset</li><li>actionOffset为0，代表是action list的结尾<ol><li>hasCleaup 并且是处于cleanup phase的话表示找到handler_found</li><li>否则是continue_unwind</li></ol></li><li>前进到下一个action</li></ol></li></ol></li><li>找不到任何eh table entry来指定如何处理exception的情况下terminate</li></ol><h2 id="Unwind-GetLanguageSpecificData"><a href="#Unwind-GetLanguageSpecificData" class="headerlink" title="_Unwind_GetLanguageSpecificData"></a>_Unwind_GetLanguageSpecificData</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Called by personality handler during phase 2 to get LSDA for current frame.</span></span><br><span class="line">_LIBUNWIND_EXPORT <span class="keyword">uintptr_t</span></span><br><span class="line">_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) &#123;</span><br><span class="line">  <span class="keyword">unw_cursor_t</span> *cursor = (<span class="keyword">unw_cursor_t</span> *)context;</span><br><span class="line">  <span class="keyword">unw_proc_info_t</span> frameInfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (__unw_get_proc_info(cursor, &amp;frameInfo) == UNW_ESUCCESS)</span><br><span class="line">    result = (<span class="keyword">uintptr_t</span>)frameInfo.lsda;</span><br><span class="line">  _LIBUNWIND_TRACE_API(</span><br><span class="line">      <span class="string">&quot;_Unwind_GetLanguageSpecificData(context=%p) =&gt; 0x%llx&quot;</span>,</span><br><span class="line">      <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(context), (<span class="keyword">long</span> <span class="keyword">long</span>)result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>unw_proc_info_t中包含了lsda的地址，直接读取并且返回</p><h2 id="set-registers"><a href="#set-registers" class="headerlink" title="set_registers"></a>set_registers</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">set_registers</span><span class="params">(_Unwind_Exception* unwind_exception, _Unwind_Context* context,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="keyword">const</span> scan_results&amp; results)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__USING_SJLJ_EXCEPTIONS__) || defined(__USING_WASM_EXCEPTIONS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __builtin_eh_return_data_regno(regno) regno</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__ibmxl__)</span></span><br><span class="line"><span class="comment">// IBM xlclang++ compiler does not support __builtin_eh_return_data_regno.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __builtin_eh_return_data_regno(regno) regno + 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _Unwind_SetGR(context, __builtin_eh_return_data_regno(<span class="number">0</span>),</span><br><span class="line">                <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(unwind_exception));</span><br><span class="line">  _Unwind_SetGR(context, __builtin_eh_return_data_regno(<span class="number">1</span>),</span><br><span class="line">                <span class="keyword">static_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(results.ttypeIndex));</span><br><span class="line">  _Unwind_SetIP(context, results.landingPad);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将exception对象地址和typeindex放到了context中，可以联系上一篇文章中的phase2_resume部分的汇编查看，那里用到的值都是在这里设置的。</p><p>后面的具体实现大概看一下就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_LIBUNWIND_EXPORT_UNWIND_LEVEL1</span><br><span class="line"><span class="keyword">void</span> _Unwind_SetGR(struct _Unwind_Context *context, <span class="keyword">int</span> index,</span><br><span class="line">                   <span class="keyword">uintptr_t</span> value) &#123;</span><br><span class="line">  _Unwind_VRS_Set(context, _UVRSC_CORE, (<span class="keyword">uint32_t</span>)index, _UVRSD_UINT32, &amp;value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_LIBUNWIND_EXPORT_UNWIND_LEVEL1</span><br><span class="line"><span class="keyword">void</span> _Unwind_SetIP(struct _Unwind_Context *context, <span class="keyword">uintptr_t</span> value) &#123;</span><br><span class="line">  <span class="keyword">uintptr_t</span> thumb_bit = _Unwind_GetGR(context, <span class="number">15</span>) &amp; ((<span class="keyword">uintptr_t</span>)<span class="number">0x1</span>);</span><br><span class="line">  _Unwind_SetGR(context, <span class="number">15</span>, value | thumb_bit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_LIBUNWIND_EXPORT <span class="keyword">void</span> _Unwind_SetGR(struct _Unwind_Context *context, <span class="keyword">int</span> index,</span><br><span class="line">                                     <span class="keyword">uintptr_t</span> value) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;_Unwind_SetGR(context=%p, reg=%d, value=0x%0&quot;</span> PRIxPTR</span><br><span class="line">                       <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                       (<span class="keyword">void</span> *)context, index, value);</span><br><span class="line">  <span class="keyword">unw_cursor_t</span> *cursor = (<span class="keyword">unw_cursor_t</span> *)context;</span><br><span class="line">  __unw_set_reg(cursor, index, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Set value of specified register at cursor position in stack frame.</span></span><br><span class="line">_LIBUNWIND_HIDDEN <span class="keyword">int</span> __unw_set_reg(<span class="keyword">unw_cursor_t</span> *cursor, <span class="keyword">unw_regnum_t</span> regNum,</span><br><span class="line">                                    <span class="keyword">unw_word_t</span> value) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;__unw_set_reg(cursor=%p, regNum=%d, value=0x%&quot;</span> PRIxPTR</span><br><span class="line">                       <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                       <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(cursor), regNum, value);</span><br><span class="line">  <span class="keyword">typedef</span> LocalAddressSpace::<span class="keyword">pint_t</span> <span class="keyword">pint_t</span>;</span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  <span class="keyword">if</span> (co-&gt;<span class="built_in">validReg</span>(regNum)) &#123;</span><br><span class="line">    co-&gt;<span class="built_in">setReg</span>(regNum, (<span class="keyword">pint_t</span>)value);</span><br><span class="line">    <span class="comment">// special case altering IP to re-find info (being called by personality</span></span><br><span class="line">    <span class="comment">// function)</span></span><br><span class="line">    <span class="keyword">if</span> (regNum == UNW_REG_IP) &#123;</span><br><span class="line">      <span class="keyword">unw_proc_info_t</span> info;</span><br><span class="line">      <span class="comment">// First, get the FDE for the old location and then update it.</span></span><br><span class="line">      co-&gt;<span class="built_in">getInfo</span>(&amp;info);</span><br><span class="line">      co-&gt;<span class="built_in">setInfoBasedOnIPRegister</span>(<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">// If the original call expects stack adjustment, perform this now.</span></span><br><span class="line">      <span class="comment">// Normal frame unwinding would have included the offset already in the</span></span><br><span class="line">      <span class="comment">// CFA computation.</span></span><br><span class="line">      <span class="comment">// Note: for PA-RISC and other platforms where the stack grows up,</span></span><br><span class="line">      <span class="comment">// this should actually be - info.gp. LLVM doesn&#x27;t currently support</span></span><br><span class="line">      <span class="comment">// any such platforms and Clang doesn&#x27;t export a macro for them.</span></span><br><span class="line">      <span class="keyword">if</span> (info.gp)</span><br><span class="line">        co-&gt;<span class="built_in">setReg</span>(UNW_REG_SP, co-&gt;<span class="built_in">getReg</span>(UNW_REG_SP) + info.gp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> UNW_ESUCCESS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> UNW_EBADREG;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">void</span> UnwindCursor&lt;A, R&gt;::<span class="built_in">setReg</span>(<span class="keyword">int</span> regNum, <span class="keyword">unw_word_t</span> value) &#123;</span><br><span class="line">  _registers.<span class="built_in">setRegister</span>(regNum, (<span class="keyword">typename</span> A::<span class="keyword">pint_t</span>)value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Registers_x86::setRegister</span><span class="params">(<span class="keyword">int</span> regNum, <span class="keyword">uint32_t</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (regNum) &#123;</span><br><span class="line">  <span class="keyword">case</span> UNW_REG_IP:</span><br><span class="line">    _registers.__eip = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_REG_SP:</span><br><span class="line">    _registers.__esp = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EAX:</span><br><span class="line">    _registers.__eax = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_ECX:</span><br><span class="line">    _registers.__ecx = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EDX:</span><br><span class="line">    _registers.__edx = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EBX:</span><br><span class="line">    _registers.__ebx = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__APPLE__)</span></span><br><span class="line">  <span class="keyword">case</span> UNW_X86_ESP:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EBP:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    _registers.__ebp = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__APPLE__)</span></span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EBP:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">case</span> UNW_X86_ESP:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    _registers.__esp = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_ESI:</span><br><span class="line">    _registers.__esi = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> UNW_X86_EDI:</span><br><span class="line">    _registers.__edi = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _LIBUNWIND_ABORT(<span class="string">&quot;unsupported x86 register&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="phase-2仍然要从头开始进行search的原因"><a href="#phase-2仍然要从头开始进行search的原因" class="headerlink" title="phase 2仍然要从头开始进行search的原因"></a>phase 2仍然要从头开始进行search的原因</h1><p>libunwind中两次搜索的起始位置都是相同的，结合personality和libunwind的代码我们可以来分析一下原因。</p><p>在正常搜寻到我们所需要的数据的情况下，exception中已经提前保存了第一次搜寻的结果，这里就会直接取出，不会真正的再次搜索。当第二次search到的sp和第一次保存的sp不同时第二次才会真正从头开始搜寻。</p><p>根据代码中的条件分析，search phase时在scan_eh_tab内，如果找到对应条目的actionEntry为0，则返回失败，但是clean phase actionEntry的时候可以为0。</p><p>actionEntry为0的时候表示为non-catching handler，也就是仅做clean up，意味着当没有用户的异常处理代码，只需要正常清理的时候，并不需要有action entry来清理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面libunwind的过程中多次和personality进行交互，这部分是由语言提供和语言相关的内容。libunwind的两个阶段对应到这一个函数之中，personality部分根据libunwind扫描到的平台相关的信息，在ehframe中扫描到当前栈帧对应的异常处理信</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>LLVM异常实现三 libunwind</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-3/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-3/</id>
    <published>2024-10-02T03:28:08.000Z</published>
    <updated>2024-10-02T03:31:13.267Z</updated>
    
    <content type="html"><![CDATA[<p>上期提到的__cxa_xxx相关函数的实现离不开libunwind的相关接口，libunwind专门用于平台无关的堆栈展开和错误处理，内部做了很多平台相关的兼容工作，这期我们主要来介绍一下libunwind相关接口的具体实现。</p><h1 id="Unwind-RaiseException"><a href="#Unwind-RaiseException" class="headerlink" title="_Unwind_RaiseException"></a>_Unwind_RaiseException</h1><p>之前在throw的时候提到其中调用了_Unwind_RaiseException，这里则是libunwind的一个入口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__cxa_throw(<span class="keyword">void</span> *thrown_object, std::type_info *tinfo, <span class="built_in"><span class="keyword">void</span></span> (*dest)(<span class="keyword">void</span> *)) &#123;</span><br><span class="line">    ...</span><br><span class="line">    _Unwind_RaiseException(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Raise Exception的过程分为两步</p><ol><li>搜索exception所在的栈</li><li>clean up，本质是跳转到landingpad进行处理</li></ol><p>UnwindLevel1.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Called by __cxa_throw.  Only returns if there is a fatal error.</span></span><br><span class="line">_LIBUNWIND_EXPORT _Unwind_Reason_Code</span><br><span class="line">_Unwind_RaiseException(_Unwind_Exception *exception_object) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;_Unwind_RaiseException(ex_obj=%p)&quot;</span>,</span><br><span class="line">                       (<span class="keyword">void</span> *)exception_object);</span><br><span class="line">  <span class="keyword">unw_context_t</span> uc;</span><br><span class="line">  <span class="keyword">unw_cursor_t</span> cursor;</span><br><span class="line">  __unw_getcontext(&amp;uc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Mark that this is a non-forced unwind, so _Unwind_Resume()</span></span><br><span class="line">  <span class="comment">// can do the right thing.</span></span><br><span class="line">  exception_object-&gt;private_1 = <span class="number">0</span>;</span><br><span class="line">  exception_object-&gt;private_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// phase 1: the search phase</span></span><br><span class="line">  _Unwind_Reason_Code phase1 = <span class="built_in">unwind_phase1</span>(&amp;uc, &amp;cursor, exception_object);</span><br><span class="line">  <span class="keyword">if</span> (phase1 != _URC_NO_REASON)</span><br><span class="line">    <span class="keyword">return</span> phase1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// phase 2: the clean up phase</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">unwind_phase2</span>(&amp;uc, &amp;cursor, exception_object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="出现的数据结构"><a href="#出现的数据结构" class="headerlink" title="出现的数据结构"></a>出现的数据结构</h1><p>libunwind.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unw_context_t</span> &#123;</span></span><br><span class="line">  <span class="keyword">uint64_t</span> data[_LIBUNWIND_CONTEXT_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">unw_context_t</span> <span class="title">unw_context_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unw_cursor_t</span> &#123;</span></span><br><span class="line">  <span class="keyword">uint64_t</span> data[_LIBUNWIND_CURSOR_SIZE];</span><br><span class="line">&#125; LIBUNWIND_CURSOR_ALIGNMENT_ATTR;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">unw_cursor_t</span> <span class="title">unw_cursor_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN32) &amp;&amp; defined(__SEH__)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> LIBUNWIND_CURSOR_ALIGNMENT_ATTR __attribute__((__aligned__(16)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> LIBUNWIND_CURSOR_ALIGNMENT_ATTR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>context是用于程序运行中的上下文，包括各种寄存器的值。而cursor只是用于存放cursor对象的一个空间，后面会在这个空间上构造对应的cursor对象。_LIBUNWIND_CONTEXT_SIZE和_LIBUNWIND_CURSOR_SIZE则是定义在include/__libunwind_config.h中，不同平台不一致</p><p>比如i386的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> defined(__i386__)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> _LIBUNWIND_TARGET_I386</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> _LIBUNWIND_CONTEXT_SIZE 8</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> _LIBUNWIND_CURSOR_SIZE 15</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> _LIBUNWIND_HIGHEST_DWARF_REGISTER _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Unwind_Exception</span> &#123;</span></span><br><span class="line">  _Unwind_Exception_Class exception_class;</span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (*exception_cleanup)(_Unwind_Reason_Code reason,</span><br><span class="line">                            _Unwind_Exception *exc);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__SEH__) &amp;&amp; !defined(__USING_SJLJ_EXCEPTIONS__)</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> private_[<span class="number">6</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">uintptr_t</span> private_1; <span class="comment">// non-zero means forced unwind</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> private_2; <span class="comment">// holds sp that phase1 found for phase2 to use</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __SIZEOF_POINTER__ == 4</span></span><br><span class="line">  <span class="comment">// The implementation of _Unwind_Exception uses an attribute mode on the</span></span><br><span class="line">  <span class="comment">// above fields which has the side effect of causing this whole struct to</span></span><br><span class="line">  <span class="comment">// round up to 32 bytes in size (48 with SEH). To be more explicit, we add</span></span><br><span class="line">  <span class="comment">// pad fields added for binary compatibility.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> reserved[<span class="number">3</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">// The Itanium ABI requires that _Unwind_Exception objects are &quot;double-word</span></span><br><span class="line">  <span class="comment">// aligned&quot;.  GCC has interpreted this to mean &quot;use the maximum useful</span></span><br><span class="line">  <span class="comment">// alignment for the target&quot;; so do we.</span></span><br><span class="line">&#125; __attribute__((__aligned__));</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> _Unwind_Exception_Class;</span><br></pre></td></tr></table></figure><p>_Unwind_Exception主要是保存了exception_class，exception_clean_up的函数指针，private值。</p><h1 id="unw-getcontext"><a href="#unw-getcontext" class="headerlink" title="__unw_getcontext"></a>__unw_getcontext</h1><p>实现在UnwindRegistersSave.S</p><p>根据不同的目标架构有着不同实现，但做的事情本质上是相同的，将当前程序执行的上下文（各种寄存器）临时保存起来。</p><p>i386的实现参考</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="meta"># extern int __unw_getcontext(unw_context_t* thread_state)</span></span><br><span class="line">#</span><br><span class="line"># On entry:</span><br><span class="line">#   +                       +</span><br><span class="line">#   +-----------------------+</span><br><span class="line">#   + thread_state pointer  +</span><br><span class="line">#   +-----------------------+</span><br><span class="line">#   + <span class="keyword">return</span> address        +</span><br><span class="line">#   +-----------------------+   &lt;-- SP</span><br><span class="line">#   +                       +</span><br><span class="line">#</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DEFINE_LIBUNWIND_FUNCTION</span>(__unw_getcontext)</span><br><span class="line"></span><br><span class="line">  _LIBUNWIND_CET_ENDBR</span><br><span class="line">  push  %eax</span><br><span class="line">  movl  <span class="number">8</span>(%esp), %eax</span><br><span class="line">  movl  %ebx,  <span class="number">4</span>(%eax)</span><br><span class="line">  movl  %ecx,  <span class="number">8</span>(%eax)</span><br><span class="line">  movl  %edx, <span class="number">12</span>(%eax)</span><br><span class="line">  movl  %edi, <span class="number">16</span>(%eax)</span><br><span class="line">  movl  %esi, <span class="number">20</span>(%eax)</span><br><span class="line">  movl  %ebp, <span class="number">24</span>(%eax)</span><br><span class="line">  movl  %esp, %edx</span><br><span class="line">  addl  $<span class="number">8</span>, %edx</span><br><span class="line">  movl  %edx, <span class="number">28</span>(%eax)  <span class="meta"># store what sp was at call site as esp</span></span><br><span class="line">  <span class="meta"># skip ss</span></span><br><span class="line">  <span class="meta"># skip eflags</span></span><br><span class="line">  movl  <span class="number">4</span>(%esp), %edx</span><br><span class="line">  movl  %edx, <span class="number">40</span>(%eax)  <span class="meta"># store return address as eip</span></span><br><span class="line">  <span class="meta"># skip cs</span></span><br><span class="line">  <span class="meta"># skip ds</span></span><br><span class="line">  <span class="meta"># skip es</span></span><br><span class="line">  <span class="meta"># skip fs</span></span><br><span class="line">  <span class="meta"># skip gs</span></span><br><span class="line">  <span class="built_in">movl</span>  (%esp), %edx</span><br><span class="line">  movl  %edx, (%eax)  <span class="meta"># store original eax</span></span><br><span class="line">  popl  %eax</span><br><span class="line">  xorl  %eax, %eax    <span class="meta"># return UNW_ESUCCESS</span></span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><h1 id="unwind-phase1"><a href="#unwind-phase1" class="headerlink" title="unwind_phase1"></a>unwind_phase1</h1><p>这个函数主要做了如下几件事情</p><ol><li>初始化cursor</li><li>开始循环操作，根据cursor中的当前pc找到对应的eh_frame，从中获取return address（下次step的时候就会基于返回地址的调用者的栈）并更新cursor中的pc。</li><li>获取proc_info</li><li>frame的handler不为空时，读取frame中personality，根据结果判断是否为所找的栈帧<ol><li>如果是则将exception_object→private_2记录到sp中</li><li>否则继续查找</li></ol></li><li>如果全部找完了那么就是_URC_NO_REASON，<strong>而不是返回错误</strong>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> _Unwind_Reason_Code</span></span><br><span class="line"><span class="function"><span class="title">unwind_phase1</span><span class="params">(<span class="keyword">unw_context_t</span> *uc, <span class="keyword">unw_cursor_t</span> *cursor, _Unwind_Exception *exception_object)</span> </span>&#123;</span><br><span class="line">  __unw_init_local(cursor, uc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Walk each frame looking for a place to stop.</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Ask libunwind to get next frame (skip over first which is</span></span><br><span class="line">    <span class="comment">// _Unwind_RaiseException).</span></span><br><span class="line">    <span class="keyword">int</span> stepResult = __unw_step(cursor);</span><br><span class="line">    <span class="keyword">if</span> (stepResult == <span class="number">0</span>) &#123;</span><br><span class="line">          (<span class="keyword">void</span> *)exception_object);</span><br><span class="line">      <span class="keyword">return</span> _URC_END_OF_STACK;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          (<span class="keyword">void</span> *)exception_object);</span><br><span class="line">      <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// See if frame has code to run (has personality routine).</span></span><br><span class="line">    <span class="keyword">unw_proc_info_t</span> frameInfo;</span><br><span class="line">    <span class="keyword">unw_word_t</span> sp;</span><br><span class="line">    <span class="keyword">if</span> (__unw_get_proc_info(cursor, &amp;frameInfo) != UNW_ESUCCESS) &#123;</span><br><span class="line">          (<span class="keyword">void</span> *)exception_object);</span><br><span class="line">      <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is a personality routine, ask it if it will want to stop at</span></span><br><span class="line">    <span class="comment">// this frame.</span></span><br><span class="line">    <span class="keyword">if</span> (frameInfo.handler != <span class="number">0</span>) &#123;</span><br><span class="line">      _Unwind_Personality_Fn p =</span><br><span class="line">          (_Unwind_Personality_Fn)(<span class="keyword">uintptr_t</span>)(frameInfo.handler);</span><br><span class="line">      _Unwind_Reason_Code personalityResult =</span><br><span class="line">          (*p)(<span class="number">1</span>, _UA_SEARCH_PHASE, exception_object-&gt;exception_class,</span><br><span class="line">               exception_object, (struct _Unwind_Context *)(cursor));</span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> (personalityResult) &#123;</span><br><span class="line">      <span class="keyword">case</span> _URC_HANDLER_FOUND:</span><br><span class="line">        <span class="comment">// found a catch clause or locals that need destructing in this frame</span></span><br><span class="line">        <span class="comment">// stop search and remember stack pointer at the frame</span></span><br><span class="line">        __unw_get_reg(cursor, UNW_REG_SP, &amp;sp);</span><br><span class="line">        exception_object-&gt;private_2 = (<span class="keyword">uintptr_t</span>)sp;</span><br><span class="line">        <span class="keyword">return</span> _URC_NO_REASON;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> _URC_CONTINUE_UNWIND:</span><br><span class="line">        <span class="comment">// continue unwinding</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// something went wrong</span></span><br><span class="line">        <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _URC_NO_REASON;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一阶段的personality，这个handler是从frameInfo中获取的，表明每个frame都可以有自己单独的personality，每个frame关联了一个函数，而在前面查看llvm ir的时候也是针对函数添加attribute标识personality函数。</p><p>以下是这个过程中出现的一些函数的实现</p><h2 id="unw-init-local"><a href="#unw-init-local" class="headerlink" title="__unw_init_local"></a>__unw_init_local</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Create a cursor of a thread in this process given &#x27;context&#x27; recorded by</span></span><br><span class="line"><span class="comment">/// __unw_getcontext().</span></span><br><span class="line">_LIBUNWIND_HIDDEN <span class="keyword">int</span> __unw_init_local(<span class="keyword">unw_cursor_t</span> *cursor,</span><br><span class="line">                                       <span class="keyword">unw_context_t</span> *context) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;__unw_init_local(cursor=%p, context=%p)&quot;</span>,</span><br><span class="line">                       <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(cursor),</span><br><span class="line">                       <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(context));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__i386__)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> REGISTER_KIND Registers_x86</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">// Use &quot;placement new&quot; to allocate UnwindCursor in the cursor buffer.</span></span><br><span class="line">  <span class="keyword">new</span> (<span class="keyword">reinterpret_cast</span>&lt;UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt; *&gt;(cursor))</span><br><span class="line">      UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt;(</span><br><span class="line">          context, LocalAddressSpace::sThisAddressSpace);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> REGISTER_KIND</span></span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  co-&gt;<span class="built_in">setInfoBasedOnIPRegister</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> UNW_ESUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cursor的地址上通过placement new构造对象，所以cursor实际上是一个UnwindCursor</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libunwind does not and should not depend on C++ library which means that we</span></span><br><span class="line"><span class="comment">// need our own definition of inline placement new.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>, UnwindCursor&lt;A, R&gt; *p)</span> </span>&#123; <span class="keyword">return</span> p; &#125;</span><br></pre></td></tr></table></figure><p>类型为UnwindCursor&lt;LocalAddressSpace, Registers_x86&gt;</p><h3 id="UnwindCursor"><a href="#UnwindCursor" class="headerlink" title="UnwindCursor"></a>UnwindCursor</h3><p>这个类主要用于指向unwind过程中的各个栈帧，通过这个类提取出相关的信息。</p><p>libunwind/src/UnwindCursor.hpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// UnwindCursor contains all state (including all register values) during</span></span><br><span class="line"><span class="comment">/// an unwind.  This is normally stack allocated inside a unw_cursor_t.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnwindCursor</span> :</span> <span class="keyword">public</span> AbstractUnwindCursor&#123;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> A::<span class="keyword">pint_t</span> <span class="keyword">pint_t</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">                      <span class="built_in">UnwindCursor</span>(<span class="keyword">unw_context_t</span> *context, A &amp;as);</span><br><span class="line">                      <span class="built_in">UnwindCursor</span>(A &amp;as, <span class="keyword">void</span> *threadArg);</span><br><span class="line">  ...</span><br><span class="line">  A               &amp;_addressSpace;</span><br><span class="line">  R                _registers;</span><br><span class="line">  <span class="keyword">unw_proc_info_t</span>  _info;</span><br><span class="line">  <span class="keyword">bool</span>             _unwindInfoMissing; <span class="comment">// 是否有调试信息</span></span><br><span class="line">  <span class="keyword">bool</span>             _isSignalFrame;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line">UnwindCursor&lt;A, R&gt;::<span class="built_in">UnwindCursor</span>(<span class="keyword">unw_context_t</span> *context, A &amp;as)</span><br><span class="line">    : _addressSpace(as), _registers(context), _unwindInfoMissing(<span class="literal">false</span>),</span><br><span class="line">      _isSignalFrame(<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>((check_fit&lt;UnwindCursor&lt;A, R&gt;, <span class="keyword">unw_cursor_t</span>&gt;::does_fit),</span><br><span class="line">                <span class="string">&quot;UnwindCursor&lt;&gt; does not fit in unw_cursor_t&quot;</span>);</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>((<span class="built_in"><span class="keyword">alignof</span></span>(UnwindCursor&lt;A, R&gt;) &lt;= <span class="built_in"><span class="keyword">alignof</span></span>(<span class="keyword">unw_cursor_t</span>)),</span><br><span class="line">                <span class="string">&quot;UnwindCursor&lt;&gt; requires more alignment than unw_cursor_t&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;_info, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(_info));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先前传入的context作为这里的registers，在registers的构造函数中会拷贝context地址中的值到对应保存registers值的成员变量中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unw_proc_info_t</span> &#123;</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  start_ip;         <span class="comment">/* start address of function */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  end_ip;           <span class="comment">/* address after end of function */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  lsda;             <span class="comment">/* address of language specific data area, */</span></span><br><span class="line">                                <span class="comment">/*  or zero if not used */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  handler;          <span class="comment">/* personality routine, or zero if not used */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  gp;               <span class="comment">/* not used */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  flags;            <span class="comment">/* not used */</span></span><br><span class="line">  <span class="keyword">uint32_t</span>    format;           <span class="comment">/* compact unwind encoding, or zero if none */</span></span><br><span class="line">  <span class="keyword">uint32_t</span>    unwind_info_size; <span class="comment">/* size of DWARF unwind info, or zero if none */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  unwind_info;      <span class="comment">/* address of DWARF unwind info, or zero */</span></span><br><span class="line">  <span class="keyword">unw_word_t</span>  extra;            <span class="comment">/* mach_header of mach-o image containing func */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">unw_proc_info_t</span> <span class="title">unw_proc_info_t</span>;</span></span><br></pre></td></tr></table></figure><p>proc_info主要保存了针对某个proc的一个栈帧的一些异常处理信息。</p><h3 id="UnwindCursor-setInfoBasedOnIPRegister"><a href="#UnwindCursor-setInfoBasedOnIPRegister" class="headerlink" title="UnwindCursor::setInfoBasedOnIPRegister"></a>UnwindCursor::setInfoBasedOnIPRegister</h3><p>最后设置setInfoBasedOnIPRegister。这里各种平台相关的宏定义太多，我们先暂且忽略掉大部分的，先来看drawf unwind的情况。</p><ol><li>获取了产生异常的pc地址</li><li>针对最后一条命令是throw的情况修正对应的pc</li><li>寻找unwind sections</li><li>找到后则从对应的section中解析信息填写到_info中，之后返回（getInfoFromDwarfSection）</li><li>如果没找到那么标记没有相关信息，最后返回</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">void</span> UnwindCursor&lt;A, R&gt;::<span class="built_in">setInfoBasedOnIPRegister</span>(<span class="keyword">bool</span> isReturnAddress) &#123;</span><br><span class="line">  <span class="keyword">pint_t</span> pc = <span class="keyword">static_cast</span>&lt;<span class="keyword">pint_t</span>&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">getReg</span>(UNW_REG_IP));</span><br><span class="line">  <span class="comment">// Exit early if at the top of the stack.</span></span><br><span class="line">  <span class="keyword">if</span> (pc == <span class="number">0</span>) &#123;</span><br><span class="line">    _unwindInfoMissing = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// If the last line of a function is a &quot;throw&quot; the compiler sometimes</span></span><br><span class="line">  <span class="comment">// emits no instructions after the call to __cxa_throw.  This means</span></span><br><span class="line">  <span class="comment">// the return address is actually the start of the next function.</span></span><br><span class="line">  <span class="comment">// To disambiguate this, back up the pc when we know it is a return</span></span><br><span class="line">  <span class="comment">// address.</span></span><br><span class="line">  <span class="keyword">if</span> (isReturnAddress)</span><br><span class="line">  --pc;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Ask address space object to find unwind sections for this pc.</span></span><br><span class="line">  UnwindInfoSections sects;</span><br><span class="line">  <span class="keyword">if</span> (_addressSpace.<span class="built_in">findUnwindSections</span>(pc, sects)) &#123;</span><br><span class="line"> ....</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND)</span></span><br><span class="line">    <span class="comment">// If there is dwarf unwind info, look there next.</span></span><br><span class="line">    <span class="keyword">if</span> (sects.dwarf_section != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getInfoFromDwarfSection</span>(pc, sects)) &#123;</span><br><span class="line">        <span class="comment">// found info in dwarf, done</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// no unwind info, flag that we can&#x27;t reliably unwind</span></span><br><span class="line">  _unwindInfoMissing = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Used by findUnwindSections() to return info about needed sections.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnwindInfoSections</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) ||                                \</span></span><br><span class="line"><span class="meta">    defined(_LIBUNWIND_SUPPORT_COMPACT_UNWIND) ||                              \</span></span><br><span class="line"><span class="meta">    defined(_LIBUNWIND_USE_DL_ITERATE_PHDR)</span></span><br><span class="line">  <span class="comment">// No dso_base for SEH.</span></span><br><span class="line">  <span class="keyword">uintptr_t</span>       dso_base;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_USE_DL_ITERATE_PHDR)</span></span><br><span class="line">  <span class="keyword">size_t</span>          text_segment_length;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND)</span></span><br><span class="line">  <span class="keyword">uintptr_t</span>       dwarf_section;</span><br><span class="line">  <span class="keyword">size_t</span>          dwarf_section_length;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_DWARF_INDEX)</span></span><br><span class="line">  <span class="keyword">uintptr_t</span>       dwarf_index_section;</span><br><span class="line">  <span class="keyword">size_t</span>          dwarf_index_section_length;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_COMPACT_UNWIND)</span></span><br><span class="line">  <span class="keyword">uintptr_t</span>       compact_unwind_section;</span><br><span class="line">  <span class="keyword">size_t</span>          compact_unwind_section_length;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_ARM_EHABI)</span></span><br><span class="line">  <span class="keyword">uintptr_t</span>       arm_section;</span><br><span class="line">  <span class="keyword">size_t</span>          arm_section_length;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="findUnwindSections"><a href="#findUnwindSections" class="headerlink" title="findUnwindSections"></a>findUnwindSections</h3><p>这里各种平台的处理都是完全不同的，实现的本质都是寻找对应的段，比如ehframe，这里选择DWARF unwind以及baremetal的情况作为参考，直接使用链接器中定义的__eh_frame_start和__eh_frame_end来获得对应的eh_frame section的长度，根据是否为空判断对应的信息是否存在，并且更新对应的UnwindInfoSections</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">LocalAddressSpace::findUnwindSections</span><span class="params">(<span class="keyword">pint_t</span> targetAddr,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                  UnwindInfoSections &amp;info)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) &amp;&amp; defined(_LIBUNWIND_IS_BAREMETAL)</span></span><br><span class="line">  info.dso_base = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Bare metal is statically linked, so no need to ask the dynamic loader</span></span><br><span class="line">  info.dwarf_section_length = (<span class="keyword">size_t</span>)(&amp;__eh_frame_end - &amp;__eh_frame_start);</span><br><span class="line">  info.dwarf_section =        (<span class="keyword">uintptr_t</span>)(&amp;__eh_frame_start);</span><br><span class="line">  _LIBUNWIND_TRACE_UNWINDING(<span class="string">&quot;findUnwindSections: section %p length %p&quot;</span>,</span><br><span class="line">                             (<span class="keyword">void</span> *)info.dwarf_section, (<span class="keyword">void</span> *)info.dwarf_section_length);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_SUPPORT_DWARF_INDEX)</span></span><br><span class="line">  info.dwarf_index_section =        (<span class="keyword">uintptr_t</span>)(&amp;__eh_frame_hdr_start);</span><br><span class="line">  info.dwarf_index_section_length = (<span class="keyword">size_t</span>)(&amp;__eh_frame_hdr_end - &amp;__eh_frame_hdr_start);</span><br><span class="line">  _LIBUNWIND_TRACE_UNWINDING(<span class="string">&quot;findUnwindSections: index section %p length %p&quot;</span>,</span><br><span class="line">                             (<span class="keyword">void</span> *)info.dwarf_index_section, (<span class="keyword">void</span> *)info.dwarf_index_section_length);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>       </span></span><br><span class="line">  <span class="keyword">if</span> (info.dwarf_section_length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> ...                                       </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unw-step"><a href="#unw-step" class="headerlink" title="__unw_step"></a>__unw_step</h2><p>调用cursor的step。</p><p>这里主要是解析eh_frame中的信息，之后更新寄存器信息，包括对应的返回值地址，用于下一次step的时候根据这个返回值找到调用者的栈帧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Move cursor to next frame.</span></span><br><span class="line">_LIBUNWIND_HIDDEN <span class="keyword">int</span> __unw_step(<span class="keyword">unw_cursor_t</span> *cursor) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;__unw_step(cursor=%p)&quot;</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(cursor));</span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  <span class="keyword">return</span> co-&gt;<span class="built_in">step</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt; <span class="keyword">int</span> UnwindCursor&lt;A, R&gt;::<span class="built_in">step</span>(<span class="keyword">bool</span> stage2) &#123;</span><br><span class="line">  (<span class="keyword">void</span>)stage2;</span><br><span class="line">  <span class="comment">// Bottom of stack is defined is when unwind info cannot be found.</span></span><br><span class="line">  <span class="keyword">if</span> (_unwindInfoMissing)</span><br><span class="line">    <span class="keyword">return</span> UNW_STEP_END;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND)</span></span><br><span class="line">    **result = <span class="keyword">this</span>-&gt;<span class="built_in">stepWithDwarfFDE</span>(stage2);**</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update info based on new PC</span></span><br><span class="line">  <span class="keyword">if</span> (result == UNW_STEP_SUCCESS) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setInfoBasedOnIPRegister</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (_unwindInfoMissing)</span><br><span class="line">      <span class="keyword">return</span> UNW_STEP_END;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stepWithDwarfFDE</span><span class="params">(<span class="keyword">bool</span> stage2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> DwarfInstructions&lt;A, R&gt;::<span class="built_in">stepWithDwarf</span>(</span><br><span class="line">      _addressSpace, (<span class="keyword">pint_t</span>)<span class="keyword">this</span>-&gt;<span class="built_in">getReg</span>(UNW_REG_IP),</span><br><span class="line">      (<span class="keyword">pint_t</span>)_info.unwind_info, _registers, _isSignalFrame, stage2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">int</span> DwarfInstructions&lt;A, R&gt;::<span class="built_in">stepWithDwarf</span>(A &amp;addressSpace, <span class="keyword">pint_t</span> pc,</span><br><span class="line">                                           <span class="keyword">pint_t</span> fdeStart, R &amp;registers,</span><br><span class="line">                                           <span class="keyword">bool</span> &amp;isSignalFrame) &#123;</span><br><span class="line">  FDE_Info fdeInfo;</span><br><span class="line">  CIE_Info cieInfo;</span><br><span class="line">  <span class="keyword">if</span> (CFI_Parser&lt;A&gt;::<span class="built_in">decodeFDE</span>(addressSpace, fdeStart, &amp;fdeInfo,</span><br><span class="line">                               &amp;cieInfo) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    PrologInfo prolog;</span><br><span class="line">    <span class="keyword">if</span> (CFI_Parser&lt;A&gt;::<span class="built_in">parseFDEInstructions</span>(addressSpace, fdeInfo, cieInfo, pc,</span><br><span class="line">                                            R::<span class="built_in">getArch</span>(), &amp;prolog)) &#123;</span><br><span class="line">      <span class="comment">// get pointer to cfa (architecture specific)</span></span><br><span class="line">      <span class="keyword">pint_t</span> cfa = <span class="built_in">getCFA</span>(addressSpace, prolog, registers);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// restore registers that DWARF says were saved</span></span><br><span class="line">      R newRegisters = registers;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Typically, the CFA is the stack pointer at the call site in</span></span><br><span class="line">      <span class="comment">// the previous frame. However, there are scenarios in which this is not</span></span><br><span class="line">      <span class="comment">// true. For example, if we switched to a new stack. In that case, the</span></span><br><span class="line">      <span class="comment">// value of the previous SP might be indicated by a CFI directive.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We set the SP here to the CFA, allowing for it to be overridden</span></span><br><span class="line">      <span class="comment">// by a CFI directive later on.</span></span><br><span class="line">      newRegisters.<span class="built_in">setSP</span>(cfa);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">pint_t</span> returnAddress = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> lastReg = R::<span class="built_in">lastDwarfRegNum</span>();</span><br><span class="line">      <span class="built_in">assert</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(CFI_Parser&lt;A&gt;::kMaxRegisterNumber) &gt;= lastReg &amp;&amp;</span><br><span class="line">             <span class="string">&quot;register range too large&quot;</span>);</span><br><span class="line">      <span class="built_in">assert</span>(lastReg &gt;= (<span class="keyword">int</span>)cieInfo.returnAddressRegister &amp;&amp;</span><br><span class="line">             <span class="string">&quot;register range does not contain return address register&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lastReg; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prolog.savedRegisters[i].location !=</span><br><span class="line">            CFI_Parser&lt;A&gt;::kRegisterUnused) &#123;</span><br><span class="line">          <span class="keyword">if</span> (registers.<span class="built_in">validFloatRegister</span>(i))</span><br><span class="line">            newRegisters.<span class="built_in">setFloatRegister</span>(</span><br><span class="line">                i, <span class="built_in">getSavedFloatRegister</span>(addressSpace, registers, cfa,</span><br><span class="line">                                         prolog.savedRegisters[i]));</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (registers.<span class="built_in">validVectorRegister</span>(i))</span><br><span class="line">            newRegisters.<span class="built_in">setVectorRegister</span>(</span><br><span class="line">                i, <span class="built_in">getSavedVectorRegister</span>(addressSpace, registers, cfa,</span><br><span class="line">                                          prolog.savedRegisters[i]));</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (i == (<span class="keyword">int</span>)cieInfo.returnAddressRegister)</span><br><span class="line">            returnAddress = <span class="built_in">getSavedRegister</span>(addressSpace, registers, cfa,</span><br><span class="line">                                             prolog.savedRegisters[i]);</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (registers.<span class="built_in">validRegister</span>(i))</span><br><span class="line">            newRegisters.<span class="built_in">setRegister</span>(</span><br><span class="line">                i, <span class="built_in">getSavedRegister</span>(addressSpace, registers, cfa,</span><br><span class="line">                                    prolog.savedRegisters[i]));</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> UNW_EBADREG;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == (<span class="keyword">int</span>)cieInfo.returnAddressRegister) &#123;</span><br><span class="line">            <span class="comment">// Leaf function keeps the return address in register and there is no</span></span><br><span class="line">            <span class="comment">// explicit intructions how to restore it.</span></span><br><span class="line">            returnAddress = registers.<span class="built_in">getRegister</span>(cieInfo.returnAddressRegister);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSignalFrame = cieInfo.isSignalFrame;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Return address is address after call site instruction, so setting IP to</span></span><br><span class="line">      <span class="comment">// that does simualates a return.</span></span><br><span class="line">      newRegisters.<span class="built_in">setIP</span>(returnAddress);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Simulate the step by replacing the register set with the new ones.</span></span><br><span class="line">      registers = newRegisters;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> UNW_STEP_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> UNW_EBADFRAME;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unw-get-proc-info"><a href="#unw-get-proc-info" class="headerlink" title="__unw_get_proc_info"></a>__unw_get_proc_info</h2><p>将前面step过程时cursor更新的proc_info信息写入到info指针中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Get unwind info at cursor position in stack frame.</span></span><br><span class="line">_LIBUNWIND_HIDDEN <span class="keyword">int</span> __unw_get_proc_info(<span class="keyword">unw_cursor_t</span> *cursor,</span><br><span class="line">                                          <span class="keyword">unw_proc_info_t</span> *info) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;__unw_get_proc_info(cursor=%p, &amp;info=%p)&quot;</span>,</span><br><span class="line">                       <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(cursor), <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(info));</span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  co-&gt;<span class="built_in">getInfo</span>(info);</span><br><span class="line">  <span class="keyword">if</span> (info-&gt;end_ip == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> UNW_ENOINFO;</span><br><span class="line">  <span class="keyword">return</span> UNW_ESUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">_LIBUNWIND_WEAK_ALIAS(__unw_get_proc_info, unw_get_proc_info)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">void</span> UnwindCursor&lt;A, R&gt;::<span class="built_in">getInfo</span>(<span class="keyword">unw_proc_info_t</span> *info) &#123;</span><br><span class="line">  <span class="keyword">if</span> (_unwindInfoMissing)</span><br><span class="line">    <span class="built_in">memset</span>(info, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(*info));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *info = _info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="context与cursor的联系"><a href="#context与cursor的联系" class="headerlink" title="context与cursor的联系"></a>context与cursor的联系</h1><p>context和cusor两个变量的各种传递关系搞得我比较混乱，加上各种调用也比较复杂，因此我在这里整理一下这两个变量的关系。</p><p>context是一个buffer，用于保存上下文的寄存器</p><p>cursor是一个buffer，用于对象的实际构造</p><p>两个变量主要在_Unwind_RaiseException的过程中起到作用。</p><ol><li>首先在_Unwind_RaiseException的开始读取了context到context的buffer中</li><li>__unw_init_local:在每个phase的开始初始化local，即根据context的值。<ol><li>将context所保存的寄存器拷贝到cursor中</li><li>内部调用setInfoBasedOnIPRegister<ol><li>getInfoFromDwarfSection<ol><li>getInfoFromFdeCie 更新info</li></ol></li></ol></li></ol></li><li>在定位对应栈帧的时候会调用cursor.step()<ol><li>内部调用stepWithDwarfFDE<ol><li>更新registers。registers = newRegisters;</li></ol></li></ol></li><li>__unw_get_proc_info: 读取cursor中的proc info，以及sp</li></ol><p>register每次都会拷贝context中的值。也就是说第一次更新的第二次不会生效，第二次开始搜索的位置和第一次相同。</p><h1 id="unwind-phase2"><a href="#unwind-phase2" class="headerlink" title="unwind_phase2"></a>unwind_phase2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> _Unwind_Reason_Code</span></span><br><span class="line"><span class="function"><span class="title">unwind_phase2</span><span class="params">(<span class="keyword">unw_context_t</span> *uc, <span class="keyword">unw_cursor_t</span> *cursor, _Unwind_Exception *exception_object)</span> </span>&#123;</span><br><span class="line">  __unw_init_local(cursor, uc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uc is initialized by __unw_getcontext in the parent frame. The first stack</span></span><br><span class="line">  <span class="comment">// frame walked is unwind_phase2.</span></span><br><span class="line">  <span class="keyword">unsigned</span> framesWalked = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// Walk each frame until we reach where search phase said to stop.</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ask libunwind to get next frame (skip over first which is</span></span><br><span class="line">    <span class="comment">// _Unwind_RaiseException).</span></span><br><span class="line">    <span class="keyword">int</span> stepResult = __unw_step(cursor);</span><br><span class="line">    <span class="keyword">if</span> (stepResult == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _URC_END_OF_STACK;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get info about this frame.</span></span><br><span class="line">    <span class="keyword">unw_word_t</span> sp;</span><br><span class="line">    <span class="keyword">unw_proc_info_t</span> frameInfo;</span><br><span class="line">    __unw_get_reg(cursor, UNW_REG_SP, &amp;sp);</span><br><span class="line">    <span class="keyword">if</span> (__unw_get_proc_info(cursor, &amp;frameInfo) != UNW_ESUCCESS) &#123;</span><br><span class="line">      <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++framesWalked;</span><br><span class="line">    <span class="comment">// If there is a personality routine, tell it we are unwinding.</span></span><br><span class="line">    <span class="keyword">if</span> (frameInfo.handler != <span class="number">0</span>) &#123;</span><br><span class="line">      _Unwind_Personality_Fn p =</span><br><span class="line">          (_Unwind_Personality_Fn)(<span class="keyword">uintptr_t</span>)(frameInfo.handler);</span><br><span class="line">      _Unwind_Action action = _UA_CLEANUP_PHASE;</span><br><span class="line">      <span class="keyword">if</span> (sp == exception_object-&gt;private_2) &#123;</span><br><span class="line">        <span class="comment">// Tell personality this was the frame it marked in phase 1.</span></span><br><span class="line">        action = (_Unwind_Action)(_UA_CLEANUP_PHASE | _UA_HANDLER_FRAME);</span><br><span class="line">      &#125;</span><br><span class="line">       _Unwind_Reason_Code personalityResult =</span><br><span class="line">          (*p)(<span class="number">1</span>, action, exception_object-&gt;exception_class, exception_object,</span><br><span class="line">               (struct _Unwind_Context *)(cursor));</span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> (personalityResult) &#123;</span><br><span class="line">      <span class="keyword">case</span> _URC_CONTINUE_UNWIND:</span><br><span class="line">        <span class="comment">// Continue unwinding</span></span><br><span class="line">        <span class="keyword">if</span> (sp == exception_object-&gt;private_2) &#123;</span><br><span class="line">          <span class="comment">// Phase 1 said we would stop at this frame, but we did not...</span></span><br><span class="line">          _LIBUNWIND_ABORT(<span class="string">&quot;during phase1 personality function said it would &quot;</span></span><br><span class="line">                           <span class="string">&quot;stop here, but now in phase2 it did not stop here&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> _URC_INSTALL_CONTEXT:</span><br><span class="line">        <span class="comment">// Personality routine says to transfer control to landing pad.</span></span><br><span class="line">        <span class="comment">// We may get control back if landing pad calls _Unwind_Resume().</span></span><br><span class="line">        __unw_phase2_resume(cursor, framesWalked);</span><br><span class="line">        <span class="comment">// __unw_phase2_resume() only returns if there was an error.</span></span><br><span class="line">        <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Personality routine returned an unknown result code.</span></span><br><span class="line">        <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up phase did not resume at the frame that the search phase</span></span><br><span class="line">  <span class="comment">// said it would...</span></span><br><span class="line">  <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>找到next_frame</li><li>获取proc_info</li><li>frame的handler不为空的时候<ol><li>根据private_2的情况设置不同的action，之后再执行personality操作</li><li>查看结果<ol><li>_URC_INSTALL_CONTEXT会执行resume，transfer control to landing pad</li><li>_URC_CONTINUE_UNWIND在前一步search的时候设置了，表明应该在这个frame中停下，但实际没停，所以会炸</li></ol></li></ol></li><li>否则继续查找，如果全部找完了那么就是_URC_FATAL_PHASE2_ERROR</li></ol><p>本质上是找到第一个handler不为空的frame</p><p>注意两次执行handler时的action，第一次是_UA_SEARCH_PHASE，第二次是cleanup或者cleanup | handle</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  _UA_SEARCH_PHASE = <span class="number">1</span>,</span><br><span class="line">  _UA_CLEANUP_PHASE = <span class="number">2</span>,</span><br><span class="line">  _UA_HANDLER_FRAME = <span class="number">4</span>,</span><br><span class="line">  _UA_FORCE_UNWIND = <span class="number">8</span>,</span><br><span class="line">  _UA_END_OF_STACK = <span class="number">16</span> <span class="comment">// gcc extension to C++ ABI</span></span><br><span class="line">&#125; _Unwind_Action;</span><br></pre></td></tr></table></figure><h1 id="phase2-resume"><a href="#phase2-resume" class="headerlink" title="phase2_resume"></a>phase2_resume</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When CET is enabled, each &quot;call&quot; instruction will push return address to</span></span><br><span class="line"><span class="comment">// CET shadow stack, each &quot;ret&quot; instruction will pop current CET shadow stack</span></span><br><span class="line"><span class="comment">// top and compare it with target address which program will return.</span></span><br><span class="line"><span class="comment">// In exception handing, **some stack frames will be skipped before jumping to</span></span><br><span class="line"><span class="comment">// landing pad and we must adjust CET shadow stack accordingly.**</span></span><br><span class="line"><span class="comment">// _LIBUNWIND_POP_CET_SSP is used to adjust CET shadow stack pointer and we</span></span><br><span class="line"><span class="comment">// directly jump to __libunwind_Registerts_x86/x86_64_jumpto instead of using</span></span><br><span class="line"><span class="comment">// a regular function call to avoid pushing to CET shadow stack again.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(_LIBUNWIND_USE_CET)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __unw_phase2_resume(cursor, fn) __unw_resume((cursor))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_LIBUNWIND_TARGET_I386)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __unw_phase2_resume(cursor, fn)                                        \</span></span><br><span class="line"><span class="meta">  do &#123;                                                                         \</span></span><br><span class="line"><span class="meta">    _LIBUNWIND_POP_CET_SSP((fn));                                              \</span></span><br><span class="line"><span class="meta">    void *cetRegContext = __libunwind_cet_get_registers((cursor));             \</span></span><br><span class="line"><span class="meta">    void *cetJumpAddress = __libunwind_cet_get_jump_target();                  \</span></span><br><span class="line"><span class="meta">    __asm__ volatile(<span class="meta-string">&quot;push %%edi\n\t&quot;</span>                                          \</span></span><br><span class="line"><span class="meta">                     <span class="meta-string">&quot;sub $4, %%esp\n\t&quot;</span>                                       \</span></span><br><span class="line"><span class="meta">                     <span class="meta-string">&quot;jmp *%%edx\n\t&quot;</span> :: <span class="meta-string">&quot;D&quot;</span>(cetRegContext),                   \</span></span><br><span class="line"><span class="meta">                     <span class="meta-string">&quot;d&quot;</span>(cetJumpAddress));                                     \</span></span><br><span class="line"><span class="meta">  &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_LIBUNWIND_TARGET_X86_64)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __unw_phase2_resusme(cursor, fn)                                        \</span></span><br><span class="line"><span class="meta">  do &#123;                                                                         \</span></span><br><span class="line"><span class="meta">    _LIBUNWIND_POP_CET_SSP((fn));                                            \</span></span><br><span class="line"><span class="meta">    void *cetRegContext = __libunwind_cet_get_registers((cursor));             \</span></span><br><span class="line"><span class="meta">    void *cetJumpAddress = __libunwind_cet_get_jump_target();                  \</span></span><br><span class="line"><span class="meta">    __asm__ volatile(<span class="meta-string">&quot;jmpq *%%rdx\n\t&quot;</span> :: <span class="meta-string">&quot;D&quot;</span>(cetRegContext),                  \</span></span><br><span class="line"><span class="meta">                     <span class="meta-string">&quot;d&quot;</span>(cetJumpAddress));                                     \</span></span><br><span class="line"><span class="meta">  &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里主要是跳转到对应的汇编处理代码。使用CET时会额外插入CET命令，并且调用__unw_resume。</p><p>CET：Control-flow Enforcement Technology。控制流保护</p><p><a class="link"   href="https://en.wikipedia.org/wiki/Control-flow_integrity" >Control-flow integrity<i class="fas fa-external-link-alt"></i></a></p><blockquote><p><strong>some stack frames will be skipped before jumping to landing pad and we must adjust CET shadow stack accordingly.</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Resume execution at cursor position (aka longjump).</span></span><br><span class="line">_LIBUNWIND_HIDDEN <span class="keyword">int</span> __unw_resume(<span class="keyword">unw_cursor_t</span> *cursor) &#123;</span><br><span class="line">  _LIBUNWIND_TRACE_API(<span class="string">&quot;__unw_resume(cursor=%p)&quot;</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(cursor));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(address_sanitizer) || defined(__SANITIZE_ADDRESS__)</span></span><br><span class="line">  <span class="comment">// Inform the ASan runtime that now might be a good time to clean stuff up.</span></span><br><span class="line">  __asan_handle_no_return();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  co-&gt;<span class="built_in">jumpto</span>();</span><br><span class="line">  <span class="keyword">return</span> UNW_EUNSPEC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> R&gt; <span class="keyword">void</span> UnwindCursor&lt;A, R&gt;::<span class="built_in">jumpto</span>() &#123;</span><br><span class="line">  _registers.<span class="built_in">jumpto</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jumpto</span><span class="params">()</span> </span>&#123; __libunwind_Registers_x86_jumpto(<span class="keyword">this</span>); &#125;</span><br></pre></td></tr></table></figure><p>剩下的情况，根据i386和x86_64进行不同的处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_USE_CET)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">void</span> *__libunwind_cet_get_registers(<span class="keyword">unw_cursor_t</span> *cursor) &#123;</span><br><span class="line">  AbstractUnwindCursor *co = (AbstractUnwindCursor *)cursor;</span><br><span class="line">  <span class="keyword">return</span> co-&gt;<span class="built_in">get_registers</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_TARGET_I386)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">LIBUNWIND_HIDDEN</span> <span class="title">Registers_x86</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">void</span> __libunwind_Registers_x86_jumpto(Registers_x86 *);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBUNWIND_USE_CET)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">void</span> *__libunwind_cet_get_jump_target() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> *&gt;(&amp;__libunwind_Registers_x86_jumpto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>最后都会跳转到这个__libunwind_Registers_x86_jumpto，下面的内容是原始的汇编代码以及我加的一些注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DEFINE_LIBUNWIND_FUNCTION</span>(__libunwind_Registers_x86_jumpto)</span><br><span class="line">#</span><br><span class="line"><span class="meta"># extern <span class="meta-string">&quot;C&quot;</span> void __libunwind_Registers_x86_jumpto(Registers_x86 *);</span></span><br><span class="line">#</span><br><span class="line"># On entry:</span><br><span class="line">#  +                       +</span><br><span class="line">#  +-----------------------+</span><br><span class="line">#  + thread_state pointer  +</span><br><span class="line">#  +-----------------------+</span><br><span class="line">#  + <span class="keyword">return</span> address        +</span><br><span class="line">#  +-----------------------+   &lt;-- SP</span><br><span class="line">#  +                       +</span><br><span class="line"></span><br><span class="line">  _LIBUNWIND_CET_ENDBR</span><br><span class="line">  movl   <span class="number">4</span>(%esp), %eax <span class="meta"># esp的地址+4（即this指针的值）加载到eax</span></span><br><span class="line">  <span class="meta"># set up eax and ret on new stack location</span></span><br><span class="line">  movl  <span class="number">28</span>(%eax), %edx <span class="meta"># edx holds new stack pointer</span></span><br><span class="line">  # <span class="number">28</span>(%eax) 是<span class="keyword">this</span>的esp，这个sp是在寻找栈帧解析dwarf的时候记录的</span><br><span class="line">  subl  $<span class="number">8</span>,%edx <span class="meta"># edx -= 8</span></span><br><span class="line">  </span><br><span class="line">  --- <span class="keyword">this</span>.esp  --&gt;  ---</span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       --- edx = <span class="keyword">this</span>.esp - <span class="number">8</span></span><br><span class="line">  </span><br><span class="line">  movl  %edx, <span class="number">28</span>(%eax) # 保存edx到<span class="keyword">this</span>的eip中</span><br><span class="line">  # 相当于<span class="keyword">this</span>的esp -= <span class="number">8</span></span><br><span class="line">  movl  <span class="number">0</span>(%eax), %ebx <span class="meta"># this的eax地址的值加载到ebx</span></span><br><span class="line">  # 原来的eax保存的是指向unwind_exception的指针，这个是在personality中设置的 </span><br><span class="line">  movl  %ebx, <span class="number">0</span>(%edx) <span class="meta"># ebx的值写到edx所在地址，也就是</span></span><br><span class="line">  movl  <span class="number">40</span>(%eax), %ebx <span class="meta"># eip写到ebx</span></span><br><span class="line">  movl  %ebx, <span class="number">4</span>(%edx) # <span class="number">4</span>(edx) = eip</span><br><span class="line">  </span><br><span class="line">--- ebx + <span class="number">8</span> <span class="comment">// this.esp</span></span><br><span class="line"><span class="keyword">this</span>.eax</span><br><span class="line">--- ebx + <span class="number">4</span></span><br><span class="line">新的 eip</span><br><span class="line">--- ebx</span><br><span class="line">  新开辟了一块空间，保存了eip和registers</span><br><span class="line">  </span><br><span class="line">  <span class="meta"># we now have ret and eax pushed onto where new stack will be</span></span><br><span class="line">  <span class="meta"># restore all registers</span></span><br><span class="line">  movl   <span class="number">4</span>(%eax), %ebx</span><br><span class="line">  movl   <span class="number">8</span>(%eax), %ecx</span><br><span class="line">  movl  <span class="number">12</span>(%eax), %edx</span><br><span class="line">  movl  <span class="number">16</span>(%eax), %edi</span><br><span class="line">  movl  <span class="number">20</span>(%eax), %esi</span><br><span class="line">  movl  <span class="number">24</span>(%eax), %ebp</span><br><span class="line">  movl  <span class="number">28</span>(%eax), %esp</span><br><span class="line">  <span class="meta"># skip ss</span></span><br><span class="line">  <span class="meta"># skip eflags</span></span><br><span class="line">  pop    %eax  <span class="meta"># eax was already pushed on new stack</span></span><br><span class="line">  pop    %ecx  <span class="meta"># pop esp上的值到eax和ecx，ecx保存了eip，即landingpad的值</span></span><br><span class="line">  jmp    *%ecx</span><br><span class="line">  <span class="meta"># skip cs</span></span><br><span class="line">  <span class="meta"># skip ds</span></span><br><span class="line">  <span class="meta"># skip es</span></span><br><span class="line">  <span class="meta"># skip fs</span></span><br><span class="line">  <span class="meta"># skip gs</span></span><br></pre></td></tr></table></figure><p>这里ecx是landingpad的地址，是在phase2的时候personality中设置的对应的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上期提到的__cxa_xxx相关函数的实现离不开libunwind的相关接口，libunwind专门用于平台无关的堆栈展开和错误处理，内部做了很多平台相关的兼容工作，这期我们主要来介绍一下libunwind相关接口的具体实现。&lt;/p&gt;
&lt;h1 id=&quot;Unwind-Rais</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>LLVM异常实现二 libcxxabi</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-2/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-2/</id>
    <published>2024-10-02T03:28:05.000Z</published>
    <updated>2024-10-02T03:36:37.046Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的博客提到带有异常相关的C++代码编译成llvm ir后，会插入libcxxabi的__cxa_xxx函数，这期则是来了解这些函数的实现。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>libcxxabi中的部分包含了exception，array的分配与释放，virtual相关，demangler等，目前我们在这里只关心异常相关的部分。</p><p>首先来看异常的接口，基本上都是之前内容中出现的函数声明，其中包含了分配释放等常见的异常操作。</p><p>libcxxabi/include/cxxabi.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.4.2 Allocating the Exception Object</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span> *</span><br><span class="line">__cxa_allocate_exception(<span class="keyword">size_t</span> thrown_size) <span class="keyword">throw</span>();</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span></span><br><span class="line">__cxa_free_exception(<span class="keyword">void</span> *thrown_exception) <span class="keyword">throw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.4.3 Throwing the Exception Object</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS _LIBCXXABI_NORETURN <span class="keyword">void</span></span><br><span class="line">__cxa_throw(<span class="keyword">void</span> *thrown_exception, std::type_info *tinfo,</span><br><span class="line">            <span class="built_in"><span class="keyword">void</span></span> (*dest)(<span class="keyword">void</span> *));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.5.3 Exception Handlers</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span> *</span><br><span class="line">__cxa_get_exception_ptr(<span class="keyword">void</span> *exceptionObject) <span class="keyword">throw</span>();</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span> *</span><br><span class="line">__cxa_begin_catch(<span class="keyword">void</span> *exceptionObject) <span class="keyword">throw</span>();</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span> __cxa_end_catch();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBCXXABI_ARM_EHABI)</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">bool</span></span><br><span class="line">__cxa_begin_cleanup(<span class="keyword">void</span> *exceptionObject) <span class="keyword">throw</span>();</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS <span class="keyword">void</span> __cxa_end_cleanup();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS std::type_info *__cxa_current_exception_type();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.5.4 Rethrowing Exceptions</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS _LIBCXXABI_NORETURN <span class="keyword">void</span> __cxa_rethrow();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.6 Auxiliary Runtime APIs</span></span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS _LIBCXXABI_NORETURN <span class="keyword">void</span> __cxa_bad_cast(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS _LIBCXXABI_NORETURN <span class="keyword">void</span> __cxa_bad_typeid(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">extern</span> _LIBCXXABI_FUNC_VIS _LIBCXXABI_NORETURN <span class="keyword">void</span></span><br><span class="line">__cxa_throw_bad_array_new_length(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><h1 id="cxa-allocate-exception"><a href="#cxa-allocate-exception" class="headerlink" title="__cxa_allocate_exception"></a>__cxa_allocate_exception</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Allocate a __cxa_exception object, and zero-fill it.</span></span><br><span class="line"><span class="comment">//  Reserve &quot;thrown_size&quot; bytes on the end for the user&#x27;s exception</span></span><br><span class="line"><span class="comment">//  object. Zero-fill the object. If memory can&#x27;t be allocated, call</span></span><br><span class="line"><span class="comment">//  std::terminate. Return a pointer to the memory to be used for the</span></span><br><span class="line"><span class="comment">//  user&#x27;s exception object.</span></span><br><span class="line"><span class="keyword">void</span> *__cxa_allocate_exception(<span class="keyword">size_t</span> thrown_size) <span class="keyword">throw</span>() &#123;</span><br><span class="line">    <span class="keyword">size_t</span> actual_size = <span class="built_in">cxa_exception_size_from_exception_thrown_size</span>(thrown_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate extra space before the __cxa_exception header to ensure the</span></span><br><span class="line">    <span class="comment">// start of the thrown object is sufficiently aligned.</span></span><br><span class="line">    <span class="keyword">size_t</span> header_offset = <span class="built_in">get_cxa_exception_offset</span>();</span><br><span class="line">    <span class="keyword">char</span> *raw_buffer =</span><br><span class="line">        (<span class="keyword">char</span> *)__aligned_malloc_with_fallback(header_offset + actual_size);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == raw_buffer)</span><br><span class="line">        std::<span class="built_in">terminate</span>();</span><br><span class="line"></span><br><span class="line">    __cxa_exception *exception_header =</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;__cxa_exception *&gt;((<span class="keyword">void</span> *)(raw_buffer + header_offset));</span><br><span class="line">    ::<span class="built_in">memset</span>(exception_header, <span class="number">0</span>, actual_size);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">thrown_object_from_cxa_exception</span>(exception_header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数主要分配了一块空间用于作为异常处理的对象，这块空间由两部分组成：throw对象的size以及__cxa_exception对象。最后返回的是throw对象开始位置的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| __cxa_exception |     size    |</span><br><span class="line">  ^</span><br><span class="line">  |</span><br><span class="line"> 指针</span><br></pre></td></tr></table></figure><p>接下来我们看一下更细致的代码实现。</p><h2 id="actual-size"><a href="#actual-size" class="headerlink" title="actual size"></a>actual size</h2><p>首先是计算实际分配的size，其中包含了前面的__cxa_exception以及throw对象的size。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Round s up to next multiple of a.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">aligned_allocation_size</span><span class="params">(<span class="keyword">size_t</span> s, <span class="keyword">size_t</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s + a - <span class="number">1</span>) &amp; ~(a - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">cxa_exception_size_from_exception_thrown_size</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">aligned_allocation_size</span>(size + <span class="built_in"><span class="keyword">sizeof</span></span> (__cxa_exception),</span><br><span class="line">                                   <span class="built_in"><span class="keyword">alignof</span></span>(__cxa_exception));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exception-offset"><a href="#exception-offset" class="headerlink" title="exception offset"></a>exception offset</h2><p>另外需要计算header的起始地址，要确保对象的空间能满足align的计算，如果对象的align小于目标机器的align那么会在最前面填充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Return the offset of the __cxa_exception header from the start of the</span></span><br><span class="line"><span class="comment">// allocated buffer. If __cxa_exception&#x27;s alignment is smaller than the maximum</span></span><br><span class="line"><span class="comment">// useful alignment for the target machine, padding has to be inserted before</span></span><br><span class="line"><span class="comment">// the header to ensure the thrown object that follows the header is</span></span><br><span class="line"><span class="comment">// sufficiently aligned. This happens if _Unwind_exception isn&#x27;t double-word</span></span><br><span class="line"><span class="comment">// aligned (on Darwin, for example).</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span> <span class="title">get_cxa_exception_offset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">  &#125; __attribute__((aligned));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compute the maximum alignment for the target machine.</span></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">size_t</span> alignment = <span class="built_in"><span class="keyword">alignof</span></span>(S);</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">size_t</span> excp_size = <span class="built_in"><span class="keyword">sizeof</span></span>(__cxa_exception);</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">size_t</span> aligned_size =</span><br><span class="line">      (excp_size + alignment - <span class="number">1</span>) / alignment * alignment;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">size_t</span> offset = aligned_size - excp_size;</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>((offset == <span class="number">0</span> || <span class="built_in"><span class="keyword">alignof</span></span>(_Unwind_Exception) &lt; alignment),</span><br><span class="line">                <span class="string">&quot;offset is non-zero only if _Unwind_Exception isn&#x27;t aligned&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用一个空结构体，按照struct的最小size进行align。如果__exa_exception的align小于目标机器的最大可用align，那么填充，返回offset，这个offset也就是实际上header开始的位置。</p><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>malloc的size是包含了header_offset以及实际分配的整个size。</p><p>malloc的过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* __aligned_malloc_with_fallback(<span class="keyword">size_t</span> size) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN32)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">void</span>* dest = std::__libcpp_aligned_alloc(<span class="built_in"><span class="keyword">alignof</span></span>(__aligned_type), size))</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">void</span>* dest = ::<span class="built_in">malloc</span>(size))</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">void</span>* dest = std::__libcpp_aligned_alloc(__alignof(__aligned_type), size))</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fallback_malloc</span>(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了标准库的align_alloc</p><p>关于fallback则是标准库分配失败的情况下的备选方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">fallback_malloc</span><span class="params">(<span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">  heap_node *p, *prev;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> nelems = <span class="built_in">alloc_size</span>(len);</span><br><span class="line">  <span class="function">mutexor <span class="title">mtx</span><span class="params">(&amp;heap_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> == freelist)</span><br><span class="line">    <span class="built_in">init_heap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Walk the free list, looking for a &quot;big enough&quot; chunk</span></span><br><span class="line">  <span class="keyword">for</span> (p = freelist, prev = <span class="number">0</span>; p &amp;&amp; p != list_end;</span><br><span class="line">       prev = p, p = <span class="built_in">node_from_offset</span>(p-&gt;next_node)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;len &gt; nelems) &#123; <span class="comment">//  chunk is larger, shorten, and return the tail</span></span><br><span class="line">      heap_node* q;</span><br><span class="line"></span><br><span class="line">      p-&gt;len = <span class="keyword">static_cast</span>&lt;heap_size&gt;(p-&gt;len - nelems);</span><br><span class="line">      q = p + p-&gt;len;</span><br><span class="line">      q-&gt;next_node = <span class="number">0</span>;</span><br><span class="line">      q-&gt;len = <span class="keyword">static_cast</span>&lt;heap_size&gt;(nelems);</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">void</span>*)(q + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;len == nelems) &#123; <span class="comment">// exact size match</span></span><br><span class="line">      <span class="keyword">if</span> (prev == <span class="number">0</span>)</span><br><span class="line">        freelist = <span class="built_in">node_from_offset</span>(p-&gt;next_node);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        prev-&gt;next_node = p-&gt;next_node;</span><br><span class="line">      p-&gt;next_node = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">void</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// couldn&#x27;t find a spot big enough</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回异常对象指针"><a href="#返回异常对象指针" class="headerlink" title="返回异常对象指针"></a>返回异常对象指针</h2><p>malloc后创建了一个__cxa_exception的指针，跳过header_offset指向了actual_size，并且将actual_size的部分置0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exception_header</span><br><span class="line">|</span><br><span class="line">| header_offset | actual_size |</span><br></pre></td></tr></table></figure><p>将actual size拆开的话实际的内存视图如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exception_header</span><br><span class="line">|</span><br><span class="line">| header_offset | __cxa_exception | thrown_size |</span><br></pre></td></tr></table></figure><p>之后将exception_header这个指针递增，以便指向thrown_size，并且转换为void*返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note:  This is never called when exception_header is masquerading as a</span></span><br><span class="line"><span class="comment">//        __cxa_dependent_exception.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>*</span></span><br><span class="line"><span class="function"><span class="title">thrown_object_from_cxa_exception</span><span class="params">(__cxa_exception* exception_header)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(exception_header + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图中throw_object是最后实际返回的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                   throw_object</span><br><span class="line">                  |</span><br><span class="line">| header_offset | __cxa_exception | thrown_size |</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">------------------   &lt;-- raw_buffer</span><br><span class="line">header offset</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">  __cxa_exception</span><br><span class="line">  </span><br><span class="line">------------------   &lt;-- throw_object</span><br><span class="line"></span><br><span class="line">   thrown_size</span><br><span class="line"></span><br><span class="line">------------------</span><br></pre></td></tr></table></figure><h1 id="cxa-free"><a href="#cxa-free" class="headerlink" title="__cxa_free"></a>__cxa_free</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Free a __cxa_exception object allocated with __cxa_allocate_exception.</span></span><br><span class="line"><span class="keyword">void</span> __cxa_free_exception(<span class="keyword">void</span> *thrown_object) <span class="keyword">throw</span>() &#123;</span><br><span class="line">    <span class="comment">// Compute the size of the padding before the header.</span></span><br><span class="line">    <span class="keyword">size_t</span> header_offset = <span class="built_in">get_cxa_exception_offset</span>();</span><br><span class="line">    <span class="keyword">char</span> *raw_buffer =</span><br><span class="line">        ((<span class="keyword">char</span> *)<span class="built_in">cxa_exception_from_thrown_object</span>(thrown_object)) - header_offset;</span><br><span class="line">    __aligned_free_with_fallback((<span class="keyword">void</span> *)raw_buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面的内存排布，从object反向找到对应的raw_buffer然后再释放。需要将thrown_object的指针回退一个cxa_exception的位置，再回退header_offset，最终就能找到前面allocate的起始位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">__cxa_exception*</span></span><br><span class="line"><span class="function"><span class="title">cxa_exception_from_thrown_object</span><span class="params">(<span class="keyword">void</span>* thrown_object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;__cxa_exception*&gt;(thrown_object) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __aligned_free_with_fallback(<span class="keyword">void</span>* ptr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">is_fallback_ptr</span>(ptr))</span><br><span class="line">    <span class="built_in">fallback_free</span>(ptr);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION)</span></span><br><span class="line">    ::<span class="built_in">free</span>(ptr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    std::__libcpp_aligned_free(ptr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cxa-throw"><a href="#cxa-throw" class="headerlink" title="__cxa_throw"></a>__cxa_throw</h1><p>这里开始跳转到libunwind</p><p>libcxxabi/src/cxa_exception.cpp</p><p>初始化通过excepting object获取到的exception header</p><ol><li><p>通过exception object获取header</p></li><li><p>__cxa_exception设置基本信息</p><ol><li>保存当前的unexpected_handler和terminate_handler</li><li>保存tinfo和dest argument</li></ol></li><li><p>在unwind header设置exception_class，64bit</p></li><li><p>递增uncaught_exception flag</p></li><li><p>调用_Unwind_RaiseException，参数是指向thrown exception的指针。</p><p>这个函数开始执行unwinding</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.4.3 Throwing the Exception Object</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">After constructing the exception object with the throw argument value,</span></span><br><span class="line"><span class="comment">the generated code calls the __cxa_throw runtime library routine. This</span></span><br><span class="line"><span class="comment">routine never returns.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The __cxa_throw routine will do the following:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* Obtain the __cxa_exception header from the thrown exception object address,</span></span><br><span class="line"><span class="comment">which can be computed as follows:</span></span><br><span class="line"><span class="comment"> __cxa_exception *header = ((__cxa_exception *) thrown_exception - 1);</span></span><br><span class="line"><span class="comment">* Save the current unexpected_handler and terminate_handler in the __cxa_exception header.</span></span><br><span class="line"><span class="comment">* Save the tinfo and dest arguments in the __cxa_exception header.</span></span><br><span class="line"><span class="comment">* Set the exception_class field in the unwind header. This is a 64-bit value</span></span><br><span class="line"><span class="comment">representing the ASCII string &quot;XXXXC++\0&quot;, where &quot;XXXX&quot; is a</span></span><br><span class="line"><span class="comment">vendor-dependent string. That is, for implementations conforming to this</span></span><br><span class="line"><span class="comment">ABI, the low-order 4 bytes of this 64-bit value will be &quot;C++\0&quot;.</span></span><br><span class="line"><span class="comment">* Increment the uncaught_exception flag.</span></span><br><span class="line"><span class="comment">* Call _Unwind_RaiseException in the system unwind library, Its argument is the</span></span><br><span class="line"><span class="comment">pointer to the thrown exception, which __cxa_throw itself received as an argument.</span></span><br><span class="line"><span class="comment">__Unwind_RaiseException begins the process of stack unwinding, described</span></span><br><span class="line"><span class="comment">in Section 2.5. In special cases, such as an inability to find a</span></span><br><span class="line"><span class="comment">handler, _Unwind_RaiseException may return. In that case, __cxa_throw</span></span><br><span class="line"><span class="comment">will call terminate, assuming that there was no handler for the</span></span><br><span class="line"><span class="comment">exception.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__cxa_throw(<span class="keyword">void</span> *thrown_object, std::type_info *tinfo, <span class="built_in"><span class="keyword">void</span></span> (*dest)(<span class="keyword">void</span> *)) &#123;</span><br><span class="line">    __cxa_eh_globals *globals = __cxa_get_globals();</span><br><span class="line">    __cxa_exception* exception_header = <span class="built_in">cxa_exception_from_thrown_object</span>(thrown_object);</span><br><span class="line"></span><br><span class="line">    exception_header-&gt;unexpectedHandler = std::<span class="built_in">get_unexpected</span>();</span><br><span class="line">    exception_header-&gt;terminateHandler  = std::<span class="built_in">get_terminate</span>();</span><br><span class="line">    exception_header-&gt;exceptionType = tinfo;</span><br><span class="line">    exception_header-&gt;exceptionDestructor = dest;</span><br><span class="line">    <span class="built_in">setOurExceptionClass</span>(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line">    exception_header-&gt;referenceCount = <span class="number">1</span>;  <span class="comment">// This is a newly allocated exception, no need for thread safety.</span></span><br><span class="line">    globals-&gt;uncaughtExceptions += <span class="number">1</span>;   <span class="comment">// Not atomically, since globals are thread-local</span></span><br><span class="line"></span><br><span class="line">    exception_header-&gt;unwindHeader.exception_cleanup = exception_cleanup_func;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(address_sanitizer)</span></span><br><span class="line">    <span class="comment">// Inform the ASan runtime that now might be a good time to clean stuff up.</span></span><br><span class="line">    __asan_handle_no_return();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __USING_SJLJ_EXCEPTIONS__</span></span><br><span class="line">    _Unwind_SjLj_RaiseException(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    _Unwind_RaiseException(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//  This only happens when there is no handler, or some unexpected unwinding</span></span><br><span class="line">    <span class="comment">//     error happens.</span></span><br><span class="line">    <span class="built_in">failed_throw</span>(exception_header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是获取eh_globals和获取exception header的过程。获取header的时候由于header排布在thrown_object之前因此直接回退一个对象的位置即可，和allocate的时候返回的过程是相反的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Utility routines</span></span><br><span class="line"><span class="function"><span class="keyword">static</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">__cxa_exception*</span></span><br><span class="line"><span class="function"><span class="title">cxa_exception_from_thrown_object</span><span class="params">(<span class="keyword">void</span>* thrown_object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;__cxa_exception*&gt;(thrown_object) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cxa-eh-globals"><a href="#cxa-eh-globals" class="headerlink" title="__cxa_eh_globals"></a>__cxa_eh_globals</h1><p>cxa_exception.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LIBCXXABI_HIDDEN</span> __<span class="title">cxa_eh_globals</span> &#123;</span></span><br><span class="line">    __cxa_exception *   caughtExceptions;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>        uncaughtExceptions;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBCXXABI_ARM_EHABI)</span></span><br><span class="line">    __cxa_exception* propagatingExceptions;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _LIBCXXABI_FUNC_VIS __cxa_eh_globals * __cxa_get_globals      ();</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _LIBCXXABI_FUNC_VIS __cxa_eh_globals * __cxa_get_globals_fast ();</span><br></pre></td></tr></table></figure><p>由于__cxa_exception里面保存了next，因此这里相当于保存了一个链表头</p><p>exa_exception_storage.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBCXXABI_HAS_NO_THREADS)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __cxxabiv1 &#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> __cxa_eh_globals eh_globals;</span><br><span class="line">    __cxa_eh_globals *__cxa_get_globals() &#123; <span class="keyword">return</span> &amp;eh_globals; &#125;</span><br><span class="line">    __cxa_eh_globals *__cxa_get_globals_fast() &#123; <span class="keyword">return</span> &amp;eh_globals; &#125;</span><br><span class="line">&#125; <span class="comment">// extern &quot;C&quot;</span></span><br><span class="line">&#125; <span class="comment">// namespace __cxxabiv1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(HAS_THREAD_LOCAL)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __cxxabiv1 &#123;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    __cxa_eh_globals *__globals() &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">thread_local</span> __cxa_eh_globals eh_globals;</span><br><span class="line">        <span class="keyword">return</span> &amp;eh_globals;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    __cxa_eh_globals *__cxa_get_globals() &#123; <span class="keyword">return</span> __globals(); &#125;</span><br><span class="line">    __cxa_eh_globals *__cxa_get_globals_fast() &#123; <span class="keyword">return</span> __globals(); &#125;</span><br><span class="line">&#125; <span class="comment">// extern &quot;C&quot;</span></span><br><span class="line">&#125; <span class="comment">// namespace __cxxabiv1</span></span><br></pre></td></tr></table></figure><p>这里有一个thread_local的判断，不过本质是都是在这个cpp文件存了一个static的eh_global (exception handing global)</p><h1 id="多个异常的管理"><a href="#多个异常的管理" class="headerlink" title="多个异常的管理"></a>多个异常的管理</h1><p>__cxa_eh_globals里面保存了栈顶的exception，以及未处理的exception数量。</p><p>每次有新的exception时，当前exception的header中的nextException会指向当前的caughtException，然后更新__cxa_eh_globals里面的exception header为这个新的exception的header。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eh_globals</span><br><span class="line">header = <span class="literal">nullptr</span></span><br></pre></td></tr></table></figure><p>产生了新的exception1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eh_globals</span><br><span class="line">header = <span class="literal">nullptr</span></span><br><span class="line">exception header1</span><br><span class="line">next = <span class="literal">nullptr</span></span><br></pre></td></tr></table></figure><p>更新后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eh_globals</span><br><span class="line">header = exception header1</span><br><span class="line">exception header1</span><br><span class="line">next = <span class="literal">nullptr</span>（原始的eh_globals的<span class="literal">nullptr</span>）</span><br></pre></td></tr></table></figure><p>产生了新的exception2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eh_globals</span><br><span class="line">header = exception header1</span><br><span class="line">exception header1</span><br><span class="line">next = <span class="literal">nullptr</span>（原始的eh_globals的<span class="literal">nullptr</span>）</span><br><span class="line">exception header2</span><br><span class="line">next = <span class="literal">nullptr</span></span><br></pre></td></tr></table></figure><p>更新后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eh_globals</span><br><span class="line">header = exception header2</span><br><span class="line">exception header1</span><br><span class="line">next = <span class="literal">nullptr</span>（原始的eh_globals的<span class="literal">nullptr</span>）</span><br><span class="line">exception header2</span><br><span class="line">next = exception header1（设置global之前global中的header）</span><br></pre></td></tr></table></figure><p>异常处理过程优先处理最新的exception，处理完后会处理之前一个旧的exception，按照处理顺序来说也就是下一个。由于并不需要从旧向新的方向进行exception的查询，因此这里只需要支持单向即可。这里是添加，对应的删除也是类似。</p><p>简单总结下，begin_catch的时候减少计数并且把cxa_exception放到栈上，而在end_catch的时候将对象从globals中取出，而在catch以及throw的过程中通过增减uncaughtExceptions来管理当前未处理异常对象的数量。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/exception-2/Untitled.png"                      alt="Untitled"                ></p><h1 id="cxa-catch"><a href="#cxa-catch" class="headerlink" title="__cxa_catch"></a>__cxa_catch</h1><p>主要做的事情是globals以及exception_header的更新</p><h2 id="cxa-begin-catch"><a href="#cxa-begin-catch" class="headerlink" title="__cxa_begin_catch"></a>__cxa_begin_catch</h2><p>这里才真正开始把exception放到__cxa_eh_globals里。</p><p>有两类exception</p><ol><li><p>native：primary或者dependent。处理的时候并不关心具体是哪种。主要做了如下几件事情</p><ol><li>增加handler count</li><li>push到栈上</li><li>减少uncaught_exception count</li><li>返回adjusted pointer to the exception object</li></ol></li><li><p>foreign：不包含__cxa_exception_header的异常。</p><ol><li><p>不能增加handler count</p></li><li><p>只有stack为空才能push到stack，因为没办法连接到当前栈上</p><p>栈不为空则terminate</p></li><li><p>不增加uncaught_exception</p></li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>*</span><br><span class="line">__cxa_begin_catch(<span class="keyword">void</span>* unwind_arg) <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">    _Unwind_Exception* unwind_exception = <span class="keyword">static_cast</span>&lt;_Unwind_Exception*&gt;(unwind_arg);</span><br><span class="line">    <span class="keyword">bool</span> native_exception = __isOurExceptionClass(unwind_exception);</span><br><span class="line">    __cxa_eh_globals* globals = __cxa_get_globals();</span><br><span class="line">    <span class="comment">// exception_header is a hackish offset from a foreign exception, but it</span></span><br><span class="line">    <span class="comment">//   works as long as we&#x27;re careful not to try to access any __cxa_exception</span></span><br><span class="line">    <span class="comment">//   parts.</span></span><br><span class="line">    __cxa_exception* exception_header =</span><br><span class="line">            <span class="built_in">cxa_exception_from_exception_unwind_exception</span></span><br><span class="line">            (</span><br><span class="line">                <span class="keyword">static_cast</span>&lt;_Unwind_Exception*&gt;(unwind_exception)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__MVS__)</span></span><br><span class="line">    <span class="comment">// Remove the exception object from the linked list of exceptions that the z/OS unwinder</span></span><br><span class="line">    <span class="comment">// maintains before adding it to the libc++abi list of caught exceptions.</span></span><br><span class="line">    <span class="comment">// The libc++abi will manage the lifetime of the exception from this point forward.</span></span><br><span class="line">    _UnwindZOS_PopException();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (native_exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Increment the handler count, removing the flag about being rethrown</span></span><br><span class="line">        exception_header-&gt;handlerCount = exception_header-&gt;handlerCount &lt; <span class="number">0</span> ?</span><br><span class="line">            -exception_header-&gt;handlerCount + <span class="number">1</span> : exception_header-&gt;handlerCount + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//  place the exception on the top of the stack if it&#x27;s not already</span></span><br><span class="line">        <span class="comment">//    there by a previous rethrow</span></span><br><span class="line">        <span class="keyword">if</span> (exception_header != globals-&gt;caughtExceptions)</span><br><span class="line">        &#123;</span><br><span class="line">            exception_header-&gt;nextException = globals-&gt;caughtExceptions;</span><br><span class="line">            globals-&gt;caughtExceptions = exception_header;</span><br><span class="line">        &#125;</span><br><span class="line">        globals-&gt;uncaughtExceptions -= <span class="number">1</span>;   <span class="comment">// Not atomically, since globals are thread-local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_LIBCXXABI_ARM_EHABI)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(exception_header-&gt;unwindHeader.barrier_cache.bitpattern[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">return</span> exception_header-&gt;adjustedPtr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Else this is a foreign exception</span></span><br><span class="line">    <span class="comment">// If the caughtExceptions stack is not empty, terminate</span></span><br><span class="line">    <span class="keyword">if</span> (globals-&gt;caughtExceptions != <span class="number">0</span>)</span><br><span class="line">        std::<span class="built_in">terminate</span>();</span><br><span class="line">    <span class="comment">// Push the foreign exception on to the stack</span></span><br><span class="line">    globals-&gt;caughtExceptions = exception_header;</span><br><span class="line">    <span class="keyword">return</span> unwind_exception + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> __isOurExceptionClass(<span class="keyword">const</span> _Unwind_Exception* unwind_exception) &#123;</span><br><span class="line">    <span class="keyword">return</span> (__getExceptionClass(unwind_exception) &amp; get_vendor_and_language) ==</span><br><span class="line">           (kOurExceptionClass                    &amp; get_vendor_and_language);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Is it one of ours?</span></span><br><span class="line"><span class="keyword">uint64_t</span> __getExceptionClass(<span class="keyword">const</span> _Unwind_Exception* unwind_exception) &#123;</span><br><span class="line">    <span class="comment">// On x86 and some ARM unwinders, unwind_exception-&gt;exception_class is</span></span><br><span class="line">    <span class="comment">// a uint64_t. On other ARM unwinders, it is a char[8].</span></span><br><span class="line">    <span class="comment">// See: http://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf</span></span><br><span class="line">    <span class="comment">// So we just copy it into a uint64_t to be sure.</span></span><br><span class="line">    <span class="keyword">uint64_t</span> exClass;</span><br><span class="line">    ::<span class="built_in">memcpy</span>(&amp;exClass, &amp;unwind_exception-&gt;exception_class, <span class="built_in"><span class="keyword">sizeof</span></span>(exClass));</span><br><span class="line">    <span class="keyword">return</span> exClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> kOurExceptionClass          = <span class="number">0x434C4E47432B2B00</span>; <span class="comment">// CLNGC++\0</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> kOurDependentExceptionClass = <span class="number">0x434C4E47432B2B01</span>; <span class="comment">// CLNGC++\1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> get_vendor_and_language     = <span class="number">0xFFFFFFFFFFFFFF00</span>; <span class="comment">// mask for CLNGC++</span></span><br></pre></td></tr></table></figure><h2 id="get-ant-set-exception-class"><a href="#get-ant-set-exception-class" class="headerlink" title="get ant set exception class"></a>get ant set exception class</h2><h2 id="cxa-end-catch"><a href="#cxa-end-catch" class="headerlink" title="__cxa_end_catch"></a>__cxa_end_catch</h2><ol><li>获取基本信息</li><li>native exception<ol><li>handlerCount小于0的情况<ol><li>递增count为0，那么将当前处理的exception移除</li></ol></li><li>大于0<ol><li>递减count如果为0，那么将当前处理的exception移除</li><li>isDependentException，那么释放</li><li>减少refcount</li></ol></li></ol></li><li>foreign exception<ol><li>删除对应的exception</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __cxa_end_catch() &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>(<span class="built_in"><span class="keyword">sizeof</span></span>(__cxa_exception) == <span class="built_in"><span class="keyword">sizeof</span></span>(__cxa_dependent_exception),</span><br><span class="line">                <span class="string">&quot;sizeof(__cxa_exception) must be equal to &quot;</span></span><br><span class="line">                <span class="string">&quot;sizeof(__cxa_dependent_exception)&quot;</span>);</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>(__builtin_offsetof(__cxa_exception, referenceCount) ==</span><br><span class="line">                    __builtin_offsetof(__cxa_dependent_exception,</span><br><span class="line">                                       primaryException),</span><br><span class="line">                <span class="string">&quot;the layout of __cxa_exception must match the layout of &quot;</span></span><br><span class="line">                <span class="string">&quot;__cxa_dependent_exception&quot;</span>);</span><br><span class="line">  <span class="built_in"><span class="keyword">static_assert</span></span>(__builtin_offsetof(__cxa_exception, handlerCount) ==</span><br><span class="line">                    __builtin_offsetof(__cxa_dependent_exception, handlerCount),</span><br><span class="line">                <span class="string">&quot;the layout of __cxa_exception must match the layout of &quot;</span></span><br><span class="line">                <span class="string">&quot;__cxa_dependent_exception&quot;</span>);</span><br><span class="line">    __cxa_eh_globals* globals = __cxa_get_globals_fast(); <span class="comment">// __cxa_get_globals called in __cxa_begin_catch</span></span><br><span class="line">    __cxa_exception* exception_header = globals-&gt;caughtExceptions;</span><br><span class="line">    <span class="comment">// If we&#x27;ve rethrown a foreign exception, then globals-&gt;caughtExceptions</span></span><br><span class="line">    <span class="comment">//    will have been made an empty stack by __cxa_rethrow() and there is</span></span><br><span class="line">    <span class="comment">//    nothing more to be done.  Do nothing!</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != exception_header)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> native_exception = __isOurExceptionClass(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line">        <span class="keyword">if</span> (native_exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// This is a native exception</span></span><br><span class="line">            <span class="keyword">if</span> (exception_header-&gt;handlerCount &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//  The exception has been rethrown by __cxa_rethrow, so don&#x27;t delete it</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">incrementHandlerCount</span>(exception_header))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//  Remove from the chain of uncaught exceptions</span></span><br><span class="line">                    globals-&gt;caughtExceptions = exception_header-&gt;nextException;</span><br><span class="line">                    <span class="comment">// but don&#x27;t destroy</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Keep handlerCount negative in case there are nested catch&#x27;s</span></span><br><span class="line">                <span class="comment">//   that need to be told that this exception is rethrown.  Don&#x27;t</span></span><br><span class="line">                <span class="comment">//   erase this rethrow flag until the exception is recaught.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// The native exception has not been rethrown</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">decrementHandlerCount</span>(exception_header))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//  Remove from the chain of uncaught exceptions</span></span><br><span class="line">                    globals-&gt;caughtExceptions = exception_header-&gt;nextException;</span><br><span class="line">                    <span class="comment">// Destroy this exception, being careful to distinguish</span></span><br><span class="line">                    <span class="comment">//    between dependent and primary exceptions</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isDependentException</span>(&amp;exception_header-&gt;unwindHeader))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// Reset exception_header to primaryException and deallocate the dependent exception</span></span><br><span class="line">                        __cxa_dependent_exception* dep_exception_header =</span><br><span class="line">                            <span class="keyword">reinterpret_cast</span>&lt;__cxa_dependent_exception*&gt;(exception_header);</span><br><span class="line">                        exception_header =</span><br><span class="line">                            <span class="built_in">cxa_exception_from_thrown_object</span>(dep_exception_header-&gt;primaryException);</span><br><span class="line">                        __cxa_free_dependent_exception(dep_exception_header);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Destroy the primary exception only if its referenceCount goes to 0</span></span><br><span class="line">                    <span class="comment">//    (this decrement must be atomic)</span></span><br><span class="line">                    __cxa_decrement_exception_refcount(<span class="built_in">thrown_object_from_cxa_exception</span>(exception_header));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// The foreign exception has not been rethrown.  Pop the stack</span></span><br><span class="line">            <span class="comment">//    and delete it.  If there are nested catch&#x27;s and they try</span></span><br><span class="line">            <span class="comment">//    to touch a foreign exception in any way, that is undefined</span></span><br><span class="line">            <span class="comment">//     behavior.  They likely can&#x27;t since the only way to catch</span></span><br><span class="line">            <span class="comment">//     a foreign exception is with catch (...)!</span></span><br><span class="line">            _Unwind_DeleteException(&amp;globals-&gt;caughtExceptions-&gt;unwindHeader);</span><br><span class="line">            globals-&gt;caughtExceptions = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的博客提到带有异常相关的C++代码编译成llvm ir后，会插入libcxxabi的__cxa_xxx函数，这期则是来了解这些函数的实现。&lt;/p&gt;
&lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>LLVM异常实现一 LLVM IR</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-1/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-1/</id>
    <published>2024-10-02T03:28:03.000Z</published>
    <updated>2024-10-02T03:30:49.797Z</updated>
    
    <content type="html"><![CDATA[<p>这一期我们通过编译C++到LLVM代码来查看这部分的实现。在此之前我们需要了解一些简单的基础知识，之后我们将从一个最小抛出异常的代码开始，逐渐复杂化这个例子，查看生成不同的LLVM IR来理解整个过程。</p><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>首先一个编译一个函数调用的过程中，LLVM常用的指令有call和invoke两类。</p><p>call是简单的一个函数调用，不会包含任何异常等。</p><p>invoke则用于调用可能抛出异常的函数，同时指令参数中还要添加用于处理异常代码的label</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = [tail | musttail | notail ] call [fast-math flags] [cconv] [ret attrs] [<span class="built_in">addrspace</span>(&lt;num&gt;)]</span><br><span class="line">           &lt;ty&gt;|&lt;fnty&gt; &lt;fnptrval&gt;(&lt;function args&gt;) [fn attrs] [ operand bundles ]</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = invoke [cconv] [ret attrs] [<span class="built_in">addrspace</span>(&lt;num&gt;)] &lt;ty&gt;|&lt;fnty&gt; &lt;fnptrval&gt;(&lt;function args&gt;) [fn attrs]</span><br><span class="line">              [operand bundles] to label &lt;normal label&gt; unwind label &lt;exception label&gt;</span><br></pre></td></tr></table></figure><p><a class="link"   href="https://llvm.org/docs/LangRef.html#invoke-instruction" >https://llvm.org/docs/LangRef.html#invoke-instruction<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://llvm.org/docs/LangRef.html#call-instruction" >https://llvm.org/docs/LangRef.html#call-instruction<i class="fas fa-external-link-alt"></i></a></p><p>具体使用案例可以参考后面的throw a except without try这一部分</p><h1 id="only-throw-string"><a href="#only-throw-string" class="headerlink" title="only throw string"></a>only throw string</h1><p>这是上期中展示过的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f1</span>();</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是使用clang生成的ll</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">6</span> x i8] c<span class="string">&quot;error\00&quot;</span>, align <span class="number">1</span></span><br><span class="line">@_ZTIPKc = external constant i8*</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f1v() #<span class="number">0</span> &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  store i32 <span class="number">1</span>, i32* %<span class="number">1</span>, align <span class="number">4</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f2v() #<span class="number">1</span> &#123;</span><br><span class="line">  %<span class="number">1</span> = call i8* @__cxa_allocate_exception(i64 <span class="number">8</span>) #<span class="number">2</span></span><br><span class="line">  %<span class="number">2</span> = bitcast i8* %<span class="number">1</span> to i8**</span><br><span class="line">  store i8* getelementptr <span class="built_in">inbounds</span> ([<span class="number">6</span> x i8], [<span class="number">6</span> x i8]* @.str, i64 <span class="number">0</span>, i64 <span class="number">0</span>), i8** %<span class="number">2</span>, align <span class="number">16</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(i8* %<span class="number">1</span>, i8* <span class="built_in">bitcast</span> (i8** @_ZTIPKc to i8*), i8* null) #<span class="number">3</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare i8* @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(i8*, i8*, i8*)</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f3v() #<span class="number">1</span> &#123;</span><br><span class="line">  call <span class="keyword">void</span> @_Z2f1v()</span><br><span class="line">  call <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在回来看，在需要抛出异常的函数中在进入的时候就分配了一个exception对象，并且将抛出的字符串写入，调用的方式也是简单的call。</p><p>对于调用者来说仍然使用的是call，而不是invoke，我认为因为这里throw以后不会进行捕获处理，而是直接挂掉，invoke最大的特点是要传递一个异常处理的label</p><p>这个例子只有__cxa_allocate_exception和__cxa_throw的声明（以下简称alloc和throw，其他函数用类似的简称规则），接下来我们看一个稍微复杂一些的例子。</p><h1 id="throw-a-except-without-try"><a href="#throw-a-except-without-try" class="headerlink" title="throw a except without try"></a>throw a except without try</h1><p>现在我们不只是抛出一个字符串，而是抛出一个异常对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">1</span> x i8] zeroinitializer, align <span class="number">1</span></span><br><span class="line">@_ZTISt13runtime_error = external constant ptr</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z2f2v() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = call ptr @__cxa_allocate_exception(i64 <span class="number">16</span>) #<span class="number">3</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>) %<span class="number">3</span>, ptr noundef @.str)</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(ptr %<span class="number">3</span>, ptr @_ZTISt13runtime_error, ptr @_ZNSt13runtime_errorD1Ev) #<span class="number">4</span></span><br><span class="line">  unreachable</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_free_exception(ptr %<span class="number">3</span>) #<span class="number">3</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">11</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">12</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">13</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">12</span>, i32 %<span class="number">11</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>), ptr noundef) unnamed_addr #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare i32 @__gxx_personality_v0(...)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_free_exception(ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorD1Ev(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>)) unnamed_addr #<span class="number">2</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(ptr, ptr, ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z1fv() #<span class="number">0</span> &#123;</span><br><span class="line">  call <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们来翻译一下一些mangled后的符号。</p><p>_ZNSt13runtime_errorD1Ev：构造函数</p><p>_ZTISt13runtime_error：typeinfo for std::runtime_error</p><p>这里发生了些许变化。</p><ol><li>首先函数的声明增加了一个attribute，personality ptr @__gxx_personality_v0，这指定了异常处理时用什么函数进行响应。</li><li>构造runtime_error的过程是nounwind，即会抛出异常的，因此使用invoke调用，而这里构造过程的this指针而是传递了__cxa_allocate_exception的返回值。</li><li>在成功构造以后则将分配的异常对象以及runtime_error的类型传递给__cxa_throw。</li><li>在失败后则是针对构造时抛出异常的处理，这里具体做了以下几件事情<ol><li>clean up</li><li>extract value（取出landing pad中的异常值和异常类型）</li><li>free异常</li><li>进行<a class="link"   href="https://llvm.org/docs/LangRef.html#resume-instruction" >resume<i class="fas fa-external-link-alt"></i></a>，交给调用者进行处理。</li></ol></li></ol><p>此外这里出现了更多函数的声明。除了alloc和throw exception，以及runtime_error的构造函数外，多了__cxa_free_exception以及__gxx_personality_v0两个过程。__cxa_free_exception是用于释放最初构造的异常对象，__gxx_personality_v0则是libstdc++中的用于异常处理的函数，后续的文章中我们会提到具体实现。</p><h1 id="throw-exception-with-try-catch"><a href="#throw-exception-with-try-catch" class="headerlink" title="throw exception with try catch"></a>throw exception with try catch</h1><p>在我们抛出对象后，再引入catch</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">f2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">$__clang_call_terminate = comdat any</span><br><span class="line"></span><br><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">1</span> x i8] zeroinitializer, align <span class="number">1</span></span><br><span class="line">@_ZTISt13runtime_error = external constant ptr</span><br><span class="line">@_ZTISt9exception = external constant ptr</span><br><span class="line">@_ZSt4cerr = external global %<span class="string">&quot;class.std::basic_ostream&quot;</span>, align <span class="number">8</span></span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z2f2v() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = call ptr @__cxa_allocate_exception(i64 <span class="number">16</span>) #<span class="number">5</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>) %<span class="number">3</span>, ptr noundef @.str)</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(ptr %<span class="number">3</span>, ptr @_ZTISt13runtime_error, ptr @_ZNSt13runtime_errorD1Ev) #<span class="number">6</span></span><br><span class="line">  unreachable</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_free_exception(ptr %<span class="number">3</span>) #<span class="number">5</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">11</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">12</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">13</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">12</span>, i32 %<span class="number">11</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>), ptr noundef) unnamed_addr #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare i32 @__gxx_personality_v0(...)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_free_exception(ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorD1Ev(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>)) unnamed_addr #<span class="number">2</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(ptr, ptr, ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z1fv() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  br label %<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr @_ZTISt9exception</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">11</span> = call i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr @_ZTISt9exception) #<span class="number">5</span></span><br><span class="line">  %<span class="number">12</span> = icmp eq i32 %<span class="number">10</span>, %<span class="number">11</span></span><br><span class="line">  br i1 %<span class="number">12</span>, label %<span class="number">13</span>, label %<span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>:                                               ; preds = %<span class="number">9</span></span><br><span class="line">  %<span class="number">14</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">15</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">14</span>) #<span class="number">5</span></span><br><span class="line">  store ptr %<span class="number">15</span>, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">16</span> = load ptr, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">17</span> = load ptr, ptr %<span class="number">16</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">18</span> = getelementptr inbounds ptr, ptr %<span class="number">17</span>, i64 <span class="number">2</span></span><br><span class="line">  %<span class="number">19</span> = load ptr, ptr %<span class="number">18</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">20</span> = call noundef ptr %<span class="number">19</span>(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">16</span>) #<span class="number">5</span></span><br><span class="line">  %<span class="number">21</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) @_ZSt4cerr, ptr noundef %<span class="number">20</span>)</span><br><span class="line">          to label %<span class="number">22</span> unwind label %<span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="number">22</span>:                                               ; preds = %<span class="number">13</span></span><br><span class="line">  %<span class="number">23</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">21</span>, i8 noundef signext <span class="number">10</span>)</span><br><span class="line">          to label %<span class="number">24</span> unwind label %<span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="number">24</span>:                                               ; preds = %<span class="number">22</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">  br label %<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="number">25</span>:                                               ; preds = %<span class="number">24</span>, %<span class="number">4</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line"><span class="number">26</span>:                                               ; preds = %<span class="number">22</span>, %<span class="number">13</span></span><br><span class="line">  %<span class="number">27</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">28</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">27</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">28</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">29</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">27</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">29</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">          to label %<span class="number">30</span> unwind label %<span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span>:                                               ; preds = %<span class="number">26</span></span><br><span class="line">  br label %<span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="number">31</span>:                                               ; preds = %<span class="number">30</span>, %<span class="number">9</span></span><br><span class="line">  %<span class="number">32</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">33</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">34</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">32</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">35</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">34</span>, i32 %<span class="number">33</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="number">36</span>:                                               ; preds = %<span class="number">26</span></span><br><span class="line">  %<span class="number">37</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr null</span><br><span class="line">  %<span class="number">38</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">37</span>, <span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">38</span>) #<span class="number">7</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind readnone</span><br><span class="line">declare i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr) #<span class="number">3</span></span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_begin_catch(ptr)</span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>), i8 noundef signext) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>), ptr noundef) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline noreturn nounwind</span><br><span class="line">define linkonce_odr hidden <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">0</span>) #<span class="number">4</span> comdat &#123;</span><br><span class="line">  %<span class="number">2</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">0</span>) #<span class="number">5</span></span><br><span class="line">  call <span class="keyword">void</span> @_ZSt9terminatev() #<span class="number">7</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZSt9terminatev()</span><br></pre></td></tr></table></figure><p>引入catch后，调用f2的f1中也增加了对应的landingpad相关的过程。此时landingpad的作用是用于catch特定类型的异常，而在f2中构造runtime_error的异常并没有被处理，因此需要clean临时生成的信息。</p><p>另外这里的IR变得更加复杂了，先看一下流程图再来看逐步的介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">invoke --没有异常--&gt; return</span><br><span class="line">invoke --产生异常--&gt; landingpad捕获</span><br><span class="line">landingpad捕获 --typeid匹配--&gt; 执行catch</span><br><span class="line">landingpad捕获 --typeid不匹配--&gt; clean_resume</span><br><span class="line">执行catch --执行没有错误--&gt; return</span><br><span class="line">执行catch --执行有错误 --&gt; 出错cleanup</span><br><span class="line">出错cleanup --end_catch没错--&gt; clean_resume</span><br><span class="line">出错cleanup --end_catch出错--&gt; terminate</span><br></pre></td></tr></table></figure><p>在获取完异常值和类型信息后跳到了label %9，将从landingpad中获取到的异常类型信息和要catch的类型进行比较，如果失败则跳到%31进行和f2中相同的resume的操作，将控制权交给调用者。</p><p>如果成功则进入label %13进行catch，首先调用__cxa_begin_catch，之后进入对应的body中打印错误信息，直到catch的代码执行结束后调用__cxa_end_catch，最终返回。在这个过程中如果出现错误则又会跳到一个landingpad进行clean up，由于前面进行过begin_catch，因此这里的landingpad也要负责end_catch。</p><p>这里的end_catch有些不同，使用invoke调用，成功了会和没有catch成功后一样进行resume，失败了则会直接terminate。</p><p>当这个例子完全理清楚后，后面的例子基本上都是这个例子的变种，所以不再详细赘述IR内容的细节了。</p><h1 id="multi-try-catch"><a href="#multi-try-catch" class="headerlink" title="multi try catch"></a>multi try catch</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">f2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::runtime_error&amp;)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;runtime_error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::invalid_argument&amp;)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;invalid_argument&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子和上一个的核心区别是landingpad的时候catch了多种异常，另外在判断typeid的时候多了一些判断，就像if加上多个elseif一样，因此不再多解释了，如果有兴趣的话可以自行研究。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line">$__clang_call_terminate = comdat any</span><br><span class="line"></span><br><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">1</span> x i8] zeroinitializer, align <span class="number">1</span></span><br><span class="line">@_ZTISt13runtime_error = external constant ptr</span><br><span class="line">@_ZTISt16invalid_argument = external constant ptr</span><br><span class="line">@_ZTISt9exception = external constant ptr</span><br><span class="line">@_ZSt4cerr = external global %<span class="string">&quot;class.std::basic_ostream&quot;</span>, align <span class="number">8</span></span><br><span class="line">@.str<span class="number">.1</span> = <span class="keyword">private</span> unnamed_addr constant [<span class="number">17</span> x i8] c<span class="string">&quot;invalid_argument\00&quot;</span>, align <span class="number">1</span></span><br><span class="line">@.str<span class="number">.2</span> = <span class="keyword">private</span> unnamed_addr constant [<span class="number">14</span> x i8] c<span class="string">&quot;runtime_error\00&quot;</span>, align <span class="number">1</span></span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z2f2v() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = call ptr @__cxa_allocate_exception(i64 <span class="number">16</span>) #<span class="number">5</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>) %<span class="number">3</span>, ptr noundef @.str)</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(ptr %<span class="number">3</span>, ptr @_ZTISt13runtime_error, ptr @_ZNSt13runtime_errorD1Ev) #<span class="number">6</span></span><br><span class="line">  unreachable</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_free_exception(ptr %<span class="number">3</span>) #<span class="number">5</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">11</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">12</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">13</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">12</span>, i32 %<span class="number">11</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>), ptr noundef) unnamed_addr #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare i32 @__gxx_personality_v0(...)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_free_exception(ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorD1Ev(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>)) unnamed_addr #<span class="number">2</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(ptr, ptr, ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z1fv() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">4</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">5</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">          to label %<span class="number">6</span> unwind label %<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  br label %<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">8</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr @_ZTISt13runtime_error</span><br><span class="line">          <span class="keyword">catch</span> ptr @_ZTISt16invalid_argument</span><br><span class="line">          <span class="keyword">catch</span> ptr @_ZTISt9exception</span><br><span class="line">  %<span class="number">9</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">8</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">9</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">10</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">8</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">10</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:                                               ; preds = %<span class="number">7</span></span><br><span class="line">  %<span class="number">12</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">13</span> = call i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr @_ZTISt13runtime_error) #<span class="number">5</span></span><br><span class="line">  %<span class="number">14</span> = icmp eq i32 %<span class="number">12</span>, %<span class="number">13</span></span><br><span class="line">  br i1 %<span class="number">14</span>, label %<span class="number">15</span>, label %<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span>:                                               ; preds = %<span class="number">11</span></span><br><span class="line">  %<span class="number">16</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">17</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">16</span>) #<span class="number">5</span></span><br><span class="line">  store ptr %<span class="number">17</span>, ptr %<span class="number">5</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">18</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) @_ZSt4cerr, ptr noundef @.str<span class="number">.2</span>)</span><br><span class="line">          to label %<span class="number">19</span> unwind label %<span class="number">58</span></span><br><span class="line"></span><br><span class="line"><span class="number">19</span>:                                               ; preds = %<span class="number">15</span></span><br><span class="line">  %<span class="number">20</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">18</span>, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)</span><br><span class="line">          to label %<span class="number">21</span> unwind label %<span class="number">58</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span>:                                               ; preds = %<span class="number">19</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">  br label %<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">22</span>:                                               ; preds = %<span class="number">21</span>, %<span class="number">32</span>, %<span class="number">47</span>, %<span class="number">6</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line"><span class="number">23</span>:                                               ; preds = %<span class="number">11</span></span><br><span class="line">  %<span class="number">24</span> = call i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr @_ZTISt16invalid_argument) #<span class="number">5</span></span><br><span class="line">  %<span class="number">25</span> = icmp eq i32 %<span class="number">12</span>, %<span class="number">24</span></span><br><span class="line">  br i1 %<span class="number">25</span>, label %<span class="number">26</span>, label %<span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="number">26</span>:                                               ; preds = %<span class="number">23</span></span><br><span class="line">  %<span class="number">27</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">28</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">27</span>) #<span class="number">5</span></span><br><span class="line">  store ptr %<span class="number">28</span>, ptr %<span class="number">4</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">29</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) @_ZSt4cerr, ptr noundef @.str<span class="number">.1</span>)</span><br><span class="line">          to label %<span class="number">30</span> unwind label %<span class="number">53</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span>:                                               ; preds = %<span class="number">26</span></span><br><span class="line">  %<span class="number">31</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">29</span>, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)</span><br><span class="line">          to label %<span class="number">32</span> unwind label %<span class="number">53</span></span><br><span class="line"></span><br><span class="line"><span class="number">32</span>:                                               ; preds = %<span class="number">30</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">  br label %<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">33</span>:                                               ; preds = %<span class="number">23</span></span><br><span class="line">  %<span class="number">34</span> = call i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr @_ZTISt9exception) #<span class="number">5</span></span><br><span class="line">  %<span class="number">35</span> = icmp eq i32 %<span class="number">12</span>, %<span class="number">34</span></span><br><span class="line">  br i1 %<span class="number">35</span>, label %<span class="number">36</span>, label %<span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="number">36</span>:                                               ; preds = %<span class="number">33</span></span><br><span class="line">  %<span class="number">37</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">38</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">37</span>) #<span class="number">5</span></span><br><span class="line">  store ptr %<span class="number">38</span>, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">39</span> = load ptr, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">40</span> = load ptr, ptr %<span class="number">39</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">41</span> = getelementptr inbounds ptr, ptr %<span class="number">40</span>, i64 <span class="number">2</span></span><br><span class="line">  %<span class="number">42</span> = load ptr, ptr %<span class="number">41</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">43</span> = call noundef ptr %<span class="number">42</span>(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">39</span>) #<span class="number">5</span></span><br><span class="line">  %<span class="number">44</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) @_ZSt4cerr, ptr noundef %<span class="number">43</span>)</span><br><span class="line">          to label %<span class="number">45</span> unwind label %<span class="number">48</span></span><br><span class="line"></span><br><span class="line"><span class="number">45</span>:                                               ; preds = %<span class="number">36</span></span><br><span class="line">  %<span class="number">46</span> = invoke noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">44</span>, i8 noundef signext <span class="number">10</span>)</span><br><span class="line">          to label %<span class="number">47</span> unwind label %<span class="number">48</span></span><br><span class="line"></span><br><span class="line"><span class="number">47</span>:                                               ; preds = %<span class="number">45</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">  br label %<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">48</span>:                                               ; preds = %<span class="number">45</span>, %<span class="number">36</span></span><br><span class="line">  %<span class="number">49</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">50</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">49</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">50</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">51</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">49</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">51</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">          to label %<span class="number">52</span> unwind label %<span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="number">52</span>:                                               ; preds = %<span class="number">48</span></span><br><span class="line">  br label %<span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="number">53</span>:                                               ; preds = %<span class="number">30</span>, %<span class="number">26</span></span><br><span class="line">  %<span class="number">54</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">55</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">54</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">55</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">56</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">54</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">56</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">          to label %<span class="number">57</span> unwind label %<span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="number">57</span>:                                               ; preds = %<span class="number">53</span></span><br><span class="line">  br label %<span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="number">58</span>:                                               ; preds = %<span class="number">19</span>, %<span class="number">15</span></span><br><span class="line">  %<span class="number">59</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">60</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">59</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">60</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">61</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">59</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">61</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">          to label %<span class="number">62</span> unwind label %<span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="number">62</span>:                                               ; preds = %<span class="number">58</span></span><br><span class="line">  br label %<span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="number">63</span>:                                               ; preds = %<span class="number">62</span>, %<span class="number">57</span>, %<span class="number">52</span>, %<span class="number">33</span></span><br><span class="line">  %<span class="number">64</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">65</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">66</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">64</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">67</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">66</span>, i32 %<span class="number">65</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="number">68</span>:                                               ; preds = %<span class="number">58</span>, %<span class="number">53</span>, %<span class="number">48</span></span><br><span class="line">  %<span class="number">69</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr null</span><br><span class="line">  %<span class="number">70</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">69</span>, <span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">70</span>) #<span class="number">7</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind readnone</span><br><span class="line">declare i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr) #<span class="number">3</span></span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_begin_catch(ptr)</span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>), i8 noundef signext) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>), ptr noundef) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline noreturn nounwind</span><br><span class="line">define linkonce_odr hidden <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">0</span>) #<span class="number">4</span> comdat &#123;</span><br><span class="line">  %<span class="number">2</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">0</span>) #<span class="number">5</span></span><br><span class="line">  call <span class="keyword">void</span> @_ZSt9terminatev() #<span class="number">7</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZSt9terminatev()</span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>), ptr noundef) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) ptr @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>)) #<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="rethrow"><a href="#rethrow" class="headerlink" title="rethrow"></a>rethrow</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">f2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子的IR也比较长，因此我们也先来解释一下和之前的差别。</p><p>主要差距在catch的body中，这里先分配了一个exception，然后invoke的方式调用throw的函数。throw函数是一定会触发异常的，因此成功的话会跳转到unreachable，对应的unwind label的内容则是进行clean操作，并且进行resume。这个步骤类似于前面throw exception with try catch中提到的在catch体中找不到对应类型的catch一致，直接进行clean resume。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">$_ZNSt9exceptionC2ERKS_ = comdat any</span><br><span class="line"></span><br><span class="line">$__clang_call_terminate = comdat any</span><br><span class="line"></span><br><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">1</span> x i8] zeroinitializer, align <span class="number">1</span></span><br><span class="line">@_ZTISt13runtime_error = external constant ptr</span><br><span class="line">@_ZTISt9exception = external constant ptr</span><br><span class="line">@_ZTVSt9exception = external unnamed_addr constant &#123; [<span class="number">5</span> x ptr] &#125;, align <span class="number">8</span></span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z2f2v() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = call ptr @__cxa_allocate_exception(i64 <span class="number">16</span>) #<span class="number">6</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>) %<span class="number">3</span>, ptr noundef @.str)</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(ptr %<span class="number">3</span>, ptr @_ZTISt13runtime_error, ptr @_ZNSt13runtime_errorD1Ev) #<span class="number">7</span></span><br><span class="line">  unreachable</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_free_exception(ptr %<span class="number">3</span>) #<span class="number">6</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">11</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">12</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">13</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">12</span>, i32 %<span class="number">11</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>), ptr noundef) unnamed_addr #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">declare i32 @__gxx_personality_v0(...)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_free_exception(ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt13runtime_errorD1Ev(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">16</span>)) unnamed_addr #<span class="number">2</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(ptr, ptr, ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z1fv() #<span class="number">0</span> personality ptr @__gxx_personality_v0 &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  %<span class="number">3</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  invoke <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">          to label %<span class="number">4</span> unwind label %<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  br label %<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>:                                                ; preds = %<span class="number">0</span></span><br><span class="line">  %<span class="number">6</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr @_ZTISt9exception</span><br><span class="line">  %<span class="number">7</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">7</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">8</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">8</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  br label %<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>:                                                ; preds = %<span class="number">5</span></span><br><span class="line">  %<span class="number">10</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">11</span> = call i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr @_ZTISt9exception) #<span class="number">6</span></span><br><span class="line">  %<span class="number">12</span> = icmp eq i32 %<span class="number">10</span>, %<span class="number">11</span></span><br><span class="line">  br i1 %<span class="number">12</span>, label %<span class="number">13</span>, label %<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>:                                               ; preds = %<span class="number">9</span></span><br><span class="line">  %<span class="number">14</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">15</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">14</span>) #<span class="number">6</span></span><br><span class="line">  store ptr %<span class="number">15</span>, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">16</span> = call ptr @__cxa_allocate_exception(i64 <span class="number">8</span>) #<span class="number">6</span></span><br><span class="line">  %<span class="number">17</span> = load ptr, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  call <span class="keyword">void</span> @_ZNSt9exceptionC2ERKS_(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">16</span>, ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">17</span>) #<span class="number">6</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_throw(ptr %<span class="number">16</span>, ptr @_ZTISt9exception, ptr @_ZNSt9exceptionD1Ev) #<span class="number">7</span></span><br><span class="line">          to label %<span class="number">32</span> unwind label %<span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="number">18</span>:                                               ; preds = %<span class="number">13</span></span><br><span class="line">  %<span class="number">19</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          cleanup</span><br><span class="line">  %<span class="number">20</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">19</span>, <span class="number">0</span></span><br><span class="line">  store ptr %<span class="number">20</span>, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">21</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">19</span>, <span class="number">1</span></span><br><span class="line">  store i32 %<span class="number">21</span>, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  invoke <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line">          to label %<span class="number">22</span> unwind label %<span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="number">22</span>:                                               ; preds = %<span class="number">18</span></span><br><span class="line">  br label %<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="number">23</span>:                                               ; preds = %<span class="number">4</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line"><span class="number">24</span>:                                               ; preds = %<span class="number">22</span>, %<span class="number">9</span></span><br><span class="line">  %<span class="number">25</span> = load ptr, ptr %<span class="number">1</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">26</span> = load i32, ptr %<span class="number">2</span>, align <span class="number">4</span></span><br><span class="line">  %<span class="number">27</span> = insertvalue &#123; ptr, i32 &#125; undef, ptr %<span class="number">25</span>, <span class="number">0</span></span><br><span class="line">  %<span class="number">28</span> = insertvalue &#123; ptr, i32 &#125; %<span class="number">27</span>, i32 %<span class="number">26</span>, <span class="number">1</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %<span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="number">29</span>:                                               ; preds = %<span class="number">18</span></span><br><span class="line">  %<span class="number">30</span> = landingpad &#123; ptr, i32 &#125;</span><br><span class="line">          <span class="keyword">catch</span> ptr null</span><br><span class="line">  %<span class="number">31</span> = extractvalue &#123; ptr, i32 &#125; %<span class="number">30</span>, <span class="number">0</span></span><br><span class="line">  call <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">31</span>) #<span class="number">8</span></span><br><span class="line">  unreachable</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>:                                               ; preds = %<span class="number">13</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind readnone</span><br><span class="line">declare i32 @llvm.eh.<span class="keyword">typeid</span>.<span class="keyword">for</span>(ptr) #<span class="number">3</span></span><br><span class="line"></span><br><span class="line">declare ptr @__cxa_begin_catch(ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone sspstrong uwtable</span><br><span class="line">define linkonce_odr dso_local <span class="keyword">void</span> @_ZNSt9exceptionC2ERKS_(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">0</span>, ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>) %<span class="number">1</span>) unnamed_addr #<span class="number">4</span> comdat align <span class="number">2</span> &#123;</span><br><span class="line">  %<span class="number">3</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  %<span class="number">4</span> = alloca ptr, align <span class="number">8</span></span><br><span class="line">  store ptr %<span class="number">0</span>, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  store ptr %<span class="number">1</span>, ptr %<span class="number">4</span>, align <span class="number">8</span></span><br><span class="line">  %<span class="number">5</span> = load ptr, ptr %<span class="number">3</span>, align <span class="number">8</span></span><br><span class="line">  store ptr getelementptr <span class="built_in">inbounds</span> (&#123; [<span class="number">5</span> x ptr] &#125;, ptr @_ZTVSt9exception, i32 <span class="number">0</span>, inrange i32 <span class="number">0</span>, i32 <span class="number">2</span>), ptr %<span class="number">5</span>, align <span class="number">8</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare <span class="keyword">void</span> @_ZNSt9exceptionD1Ev(ptr noundef nonnull align <span class="number">8</span> <span class="built_in">dereferenceable</span>(<span class="number">8</span>)) unnamed_addr #<span class="number">2</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_end_catch()</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline noreturn nounwind</span><br><span class="line">define linkonce_odr hidden <span class="keyword">void</span> @__clang_call_terminate(ptr %<span class="number">0</span>) #<span class="number">5</span> comdat &#123;</span><br><span class="line">  %<span class="number">2</span> = call ptr @__cxa_begin_catch(ptr %<span class="number">0</span>) #<span class="number">6</span></span><br><span class="line">  call <span class="keyword">void</span> @_ZSt9terminatev() #<span class="number">8</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @_ZSt9terminatev()</span><br><span class="line"></span><br><span class="line">; Function Attrs: mustprogress noinline optnone sspstrong uwtable</span><br><span class="line">define dso_local <span class="keyword">void</span> @_Z5outerv() #<span class="number">0</span> &#123;</span><br><span class="line">  call <span class="keyword">void</span> @_Z1fv()</span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一期我们通过编译C++到LLVM代码来查看这部分的实现。在此之前我们需要了解一些简单的基础知识，之后我们将从一个最小抛出异常的代码开始，逐渐复杂化这个例子，查看生成不同的LLVM IR来理解整个过程。&lt;/p&gt;
&lt;h1 id=&quot;函数调用&quot;&gt;&lt;a href=&quot;#函数调用&quot; c</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>LLVM异常实现零 异常的多层结构与实现方式</title>
    <link href="https://fusionbolt.github.io/2024/10/02/Exception/exception-0/"/>
    <id>https://fusionbolt.github.io/2024/10/02/Exception/exception-0/</id>
    <published>2024-10-02T03:27:36.000Z</published>
    <updated>2024-10-02T03:36:13.569Z</updated>
    
    <content type="html"><![CDATA[<p>本系列的博客的内容是LLVM异常实现的整个过程，从C++生成LLVM IR开始，到运行时实际调用的库函数，会从抛出异常的过程开始结合llvm相关的代码进行讲解。这一期主要内容是讲解异常相关的结构、底层实现方式等基础信息，之后从顶向下逐层分解其中的实现（这部分形式有些类似于笔记），在最后一期会将整个结构串起来，同时有一个流程图供读者进行参考，中间几期细节比较多，很容易迷失在其中，可以参照最后一期的图来阅读中间的内容。</p><h1 id="多层结构"><a href="#多层结构" class="headerlink" title="多层结构"></a>多层结构</h1><p>先说结论，异常主要由两部分组成</p><ol><li>语言相关的abi实现</li><li>语言无关的部分（调用libunwind库）</li></ol><p>其中语言相关的abi实现需要传递信息给libunwind，比如说一些情况要怎么处理，传递符合要求的文件头等</p><h1 id="语言相关的实现"><a href="#语言相关的实现" class="headerlink" title="语言相关的实现"></a>语言相关的实现</h1><p>当我们编写编程语言的时候，不同的语言有不同的异常语法。比如说常见的对于一个块做try，捕获产生的不同Exception。假设这些语言都接入llvm进行代码生成，尽管编程语言有着不同的语法，但在用语法树生成llvm代码时都会生成类似的内容。</p><p>以下用C++举例，这是一段C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f1</span>();</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行clang++ -S -emit-llvm main.cpp &amp;&amp; cat main.ll查看对应的llvm ir</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@.str = <span class="keyword">private</span> unnamed_addr constant [<span class="number">6</span> x i8] c<span class="string">&quot;error\00&quot;</span>, align <span class="number">1</span></span><br><span class="line">@_ZTIPKc = external constant i8*</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f1v() #<span class="number">0</span> &#123;</span><br><span class="line">  %<span class="number">1</span> = alloca i32, align <span class="number">4</span></span><br><span class="line">  store i32 <span class="number">1</span>, i32* %<span class="number">1</span>, align <span class="number">4</span></span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f2v() #<span class="number">1</span> &#123;</span><br><span class="line">  %<span class="number">1</span> = call i8* @__cxa_allocate_exception(i64 <span class="number">8</span>) #<span class="number">2</span></span><br><span class="line">  %<span class="number">2</span> = bitcast i8* %<span class="number">1</span> to i8**</span><br><span class="line">  store i8* getelementptr <span class="built_in">inbounds</span> ([<span class="number">6</span> x i8], [<span class="number">6</span> x i8]* @.str, i64 <span class="number">0</span>, i64 <span class="number">0</span>), i8** %<span class="number">2</span>, align <span class="number">16</span></span><br><span class="line">  call <span class="keyword">void</span> @__cxa_throw(i8* %<span class="number">1</span>, i8* <span class="built_in">bitcast</span> (i8** @_ZTIPKc to i8*), i8* null) #<span class="number">3</span></span><br><span class="line">  unreachable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare i8* @__cxa_allocate_exception(i64)</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">void</span> @__cxa_throw(i8*, i8*, i8*)</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline optnone ssp uwtable</span><br><span class="line">define <span class="keyword">void</span> @_Z2f3v() #<span class="number">1</span> &#123;</span><br><span class="line">  call <span class="keyword">void</span> @_Z2f1v()</span><br><span class="line">  call <span class="keyword">void</span> @_Z2f2v()</span><br><span class="line">  ret <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看编译出的三个函数，对于未throw的f1来说，相比f2多了一个nounwind这一个attr，并且多了两个函数调用。而调用了f1和f2的f3，因为调用了f2这个需要unwind的函数因此和f2同样没有nounwind的attr。</p><p>关于这个attr含义也很简单，用于标明函数是否会抛出异常。以下是LLVM reference中的原始文档</p><blockquote><p>This function attribute indicates that the function never raises an exception. If the function does raise an exception, its runtime behavior is undefined. However, functions marked nounwind may still trap or generate asynchronous exceptions. Exception handling schemes that are recognized by LLVM to handle asynchronous exceptions, such as SEH, will still provide their implementation defined semantics.</p></blockquote><p>接着我们来看两个令人在意的函数调用：__cxa_allocate_exception和 __cxa_throw</p><p>这些是在libcxxabi中的函数，看名字我们能大概猜到其中的含义，一个是分配exception另一个则是抛出。</p><p>我们在这里先简单窥探一下__cxa_throw的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__cxa_throw(<span class="keyword">void</span> *thrown_object, std::type_info *tinfo, <span class="built_in"><span class="keyword">void</span></span> (*dest)(<span class="keyword">void</span> *)) &#123;</span><br><span class="line">    __cxa_eh_globals *globals = __cxa_get_globals();</span><br><span class="line">    __cxa_exception* exception_header = <span class="built_in">cxa_exception_from_thrown_object</span>(thrown_object);</span><br><span class="line"></span><br><span class="line">    exception_header-&gt;unexpectedHandler = std::<span class="built_in">get_unexpected</span>();</span><br><span class="line">    exception_header-&gt;terminateHandler  = std::<span class="built_in">get_terminate</span>();</span><br><span class="line">    exception_header-&gt;exceptionType = tinfo;</span><br><span class="line">    exception_header-&gt;exceptionDestructor = dest;</span><br><span class="line">    <span class="built_in">setOurExceptionClass</span>(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line">    exception_header-&gt;referenceCount = <span class="number">1</span>;  <span class="comment">// This is a newly allocated exception, no need for thread safety.</span></span><br><span class="line">    globals-&gt;uncaughtExceptions += <span class="number">1</span>;   <span class="comment">// Not atomically, since globals are thread-local</span></span><br><span class="line"></span><br><span class="line">    exception_header-&gt;unwindHeader.exception_cleanup = exception_cleanup_func;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(address_sanitizer)</span></span><br><span class="line">    <span class="comment">// Inform the ASan runtime that now might be a good time to clean stuff up.</span></span><br><span class="line">    __asan_handle_no_return();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __USING_SJLJ_EXCEPTIONS__</span></span><br><span class="line">    _Unwind_SjLj_RaiseException(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    _Unwind_RaiseException(&amp;exception_header-&gt;unwindHeader);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//  This only happens when there is no handler, or some unexpected unwinding</span></span><br><span class="line">    <span class="comment">//     error happens.</span></span><br><span class="line">    <span class="built_in">failed_throw</span>(exception_header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其中调用了_Unwind_RaiseException，这个函数是属于libunwind库的一个接口，而libunwind中则再无其他库的引用，这印证了前面提到的异常实现的两部分：语言相关的abi和libunwind。</p><h1 id="libunwind的实现"><a href="#libunwind的实现" class="headerlink" title="libunwind的实现"></a>libunwind的实现</h1><p>libunwind中主流的异常实现方式有三类</p><ol><li>seh(structure exception handling)，在Windows上使用，但官方建议使用ISO标准C++异常处理</li><li>ehabi(exception handling application binary interface)，arm中定义的二进制接口，定义如何传递和处理异常的规则。</li><li>sjlj(setjmp / longjmp)，通过jmp指令跳转到异常处理代码。同时ehframe和dwaf经常与sjlj联合使用</li></ol><p><a class="link"   href="https://learn.microsoft.com/zh-cn/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170" >https://learn.microsoft.com/zh-cn/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本系列的博客的内容是LLVM异常实现的整个过程，从C++生成LLVM IR开始，到运行时实际调用的库函数，会从抛出异常的过程开始结合llvm相关的代码进行讲解。这一期主要内容是讲解异常相关的结构、底层实现方式等基础信息，之后从顶向下逐层分解其中的实现（这部分形式有些类似于笔</summary>
      
    
    
    
    <category term="Compiler" scheme="https://fusionbolt.github.io/categories/Compiler/"/>
    
    
    <category term="Exception" scheme="https://fusionbolt.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>参加婚礼</title>
    <link href="https://fusionbolt.github.io/2024/05/20/Life/attend-a-wedding/"/>
    <id>https://fusionbolt.github.io/2024/05/20/Life/attend-a-wedding/</id>
    <published>2024-05-20T08:18:50.000Z</published>
    <updated>2024-06-05T03:38:47.677Z</updated>
    
    <content type="html"><![CDATA[<p>昨天我参加了同学的婚礼，他是高中为数不多和我有往来的人，结婚的对象同样也是班里的同学，其实在高中就有在谈恋爱，这么多年来分分合合不知道多少次，现在总算是结了婚。</p><p>为避免和别人说不上话的尴尬，我选择了十一点才到。在外面教堂风格的露天拍摄场地看到了新郎，几位作为伴郎的同学。找熟悉的同学旁边坐下，由于关系还好，实际上没有那么尴尬。这个时间刚开始一波室外拍摄，我也就拿着设备跟着随手拍了几张，同时一边和旁边的同学随便聊了起来。随后有一个新娘抛捧花的环节，我也被旁边的同学喊了过去，很尴尬的是第一次扔的太用力导致无人接到，我去捡起了花并扔了回去，当然最后也没有接到。</p><p>外部的环节结束后，进入内场等待十二点正式开始，也是理所当然的和同学们一桌，一群熟悉又陌生的人们：一起上学生活了三年，但是我却几乎没有融入过。许久未见，大家都聊起了各自形象上的变化，有的人和过去差别不大，有的人则是变化大到难以认出，至于性格上似乎都没有什么太大的差异。在此之后大家不可避免的开始谈论起工作的事情以及下一个结婚的会是谁，其中讨论的对象也包括一些没有来参加的同学。对于这个年纪的人来说这些几乎是不可避免的话题，尤其是对于许久没有联系的人们来说。不过也有从高中开始一直在一起玩，一直到现在的小圈子，包含新郎在内，他们隔三差五的一起出去玩，他们的话题大多则是最近发生的一些事情之类。这样的小圈子对于我来说是一件可以理解但难以想象的事情，过去的不受他人欢迎，现在的主动回避他人，不论哪个状态的我都不可能会有这样的经历，不过这也并非什么必须的事情。有很大一部分时间基本上都是他们在聊，敏感并且自以为是的我开始感到了内心的不适，而这种感受早已有所预料，并且在前一天晚上就梦到了被排斥后在走廊哭的场景，看来在这些方面我还是一如既往啊。内心这样想着，看着周围欢快聊天的同学，心里想着这样欢喜的日子我的心中却还在碎碎念，不愧是我啊。</p><p>之后是常驻婚礼的敬酒环节，不知为何还有家长敬酒，当他的妈妈过来时我还在想到底是男方还是女方家长，而此时阿姨已经认出了我。上一次去他家还是6年前的事情，对于脸盲的我实在是难以记得这么久之前见过几面的人。</p><p>全部结束后，独自在场地旁边的港湾行走着。没想到他也会有这样的一天，但实际上自己过往压根没有预想过这些，那么自己呢，或许自己不会迎来这样的一天吧？</p><p>一边想着这些无聊的事情，一边任由海风吹拂。空气中混杂着海水中的咸味以及路边花朵的香气，而我的思绪也被这难以形容的气息拉回了现实，开始计算着晚上几点回去，以及考虑着回去后依旧摆烂与散漫的生活。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天我参加了同学的婚礼，他是高中为数不多和我有往来的人，结婚的对象同样也是班里的同学，其实在高中就有在谈恋爱，这么多年来分分合合不知道多少次，现在总算是结了婚。&lt;/p&gt;
&lt;p&gt;为避免和别人说不上话的尴尬，我选择了十一点才到。在外面教堂风格的露天拍摄场地看到了新郎，几位作为伴</summary>
      
    
    
    
    <category term="Life" scheme="https://fusionbolt.github.io/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>养猫</title>
    <link href="https://fusionbolt.github.io/2024/04/20/Life/keeping-a-cat/"/>
    <id>https://fusionbolt.github.io/2024/04/20/Life/keeping-a-cat/</id>
    <published>2024-04-20T08:17:43.000Z</published>
    <updated>2024-06-16T09:59:14.627Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我带了一只可爱的猫咪回家，给她起名为露露。由于是妹妹因此想要用甜品来命名，在到处查看甜品的时候看到各种xxx露，又觉得aa的这种名称形式喊起来比较方便，因此起了这样的名字。她到家的第一天有些怕生，几乎不肯出来，出来的时候路过饭碗也不肯吃东西，看她饿了一天实在心疼，拿出准备好的猫条来诱惑一下，而她也是十分配合的狼吞虎咽的把猫条舔了干净，甚至还想继续找我要，在这之后也开始愿意往外走了，并且渐渐熟络了起来。养了没几天，但还是多少有一些自己的感受。</p><h1 id="养猫的问题"><a href="#养猫的问题" class="headerlink" title="养猫的问题"></a><strong>养猫的问题</strong></h1><p>养猫这个事情，某种层面上来讲和买东西有点类似，最兴奋的一定是选好猫到带走猫的那段时间，随后会有所下降。当真正把猫接回家，首先随之而来的是猫最初的冷漠与害怕，不过对此我已有所准备，并没有过于困扰。当猫咪熟悉了周围的环境，开始大胆的在自己的“领地”进行巡视，更多的问题随之而来，有的猫爱咬线，有的跑爱乱跑，经常会给你捣乱，等等各种问题，像我家的猫在喂猫条的那一天晚上就开始跑酷，第二天也是。与幻想的快乐美好不同，猫一定会带来部分让你困扰的问题。</p><p>除此之外还有很多问题，虽然我早有心理准备的，但还是有还有很多问题实际上比预想的更要麻烦。写到这里想起在真正开始养猫之前的一段时间，我开始问自己，为何要去养猫？自己真的能负起责任吗？<br>最初想养猫自然是因为猫咪治愈可爱，但，然后呢？有的人觉得养宠物可以减少孤独，我一开始也多少带有这样的目的，但当我接回来猫两三天后就意识到对我来说并没有因此产生什么变化，我更寻求的是精神上支撑，而不只是住在一起有一个陪伴。当时我问了养猫的朋友，养猫是为了什么，养猫的意义，养猫的想法，有的朋友说我想太多。我确实是一个非常容易多想的人，容易去想最坏的结果，这样的思考方式面对这种事情或许过于沉重了。<br>另外之前也会屡次自我怀疑是否能负起责任，当我之前在猫咖时，看到有些不那么好看的猫不受欢迎，心里想的是外观的歧视，看到有些智力缺陷的人，我开始对未来的生育恐惧，负责这种事情说起来容易，可是做起来却是无比沉重。害怕自己弃养的念头像怨灵一样纠缠着我，后来也是放下了所谓的道德感，“实在不行就找人领养”，这个事情也就到此作罢。</p><p>过年的期间为了等人在猫咖呆了一个多小时，而这段时间内我突然觉得养猫会不会只是在重复的逗猫，喂食，铲屎这个过程？当我说出这个想法的时候，有朋友说去猫咖和自己养猫是完全不一样的。现在看来自己养的话猫和自己会更熟一些，能玩更多的东西，但是似乎仅此而已了，一周或许还不足以让我这种冷漠的人产生太多的感情。</p><p>养猫需要每天花时间跟猫咪互动玩游戏，逗猫，偶尔还要添食铲屎，同时有了猫以后经常也会不由自主的去rua一会猫，这都会付出许多的时间。我在很多时候是一个时间焦虑很严重的人，在我时间不够用的时候会因为花时间去逗猫陪猫而焦虑，这种焦虑则是我自己需要调整的问题。</p><p>现在回看这些问题和想法，大多没有新的答案，或许还需要更长的时间。</p><h1 id="人与猫"><a href="#人与猫" class="headerlink" title="人与猫"></a><strong>人与猫</strong></h1><p>有一天在家晚上打游戏的时候，露露看起来一直很想和我一起玩，我也只能抽空拿逗猫棒陪陪，打起来了就干脆把逗猫棒给她让她自己玩。游戏打的很不顺利，自己的操作很差还被骂了，她由于想玩也总是过来“捣乱”，我很生气。随后想着逗逗猫缓解一下情绪，拿着逗猫棒带她转了几圈，后来她趴在床上我就使劲rua她的肚皮，即便想跑也要按住继续rua，总觉得自己像个恶魔，觉得她是不是会生我气或者怕我。而第二天我怕她捣乱，直接关上了卧室门，让她无法走到我的电脑前，当我打开卧室门的时候，她看起来就没那么高兴的样子，过来“碰瓷“的概率也变低了。此时我的反应居然是想要讨好。</p><p>和猫相处的过程，对我来说完全暴露出了自己和人相处中的许多问题：坏脾气，控制欲，讨好式相处。在这之前我一直觉得自己会非常宠溺猫咪，不会把脾气撒到她身上，但事实完全打了我的脸，我为此感到害怕，自己竟是这样的恶魔。同时又在想今天我对猫咪会这样，那我明天对关系亲密的人也会做出同样的行为，这是让我感到十分恐慌的。可能有人会觉得猫和人又不一样，在我看来尽管猫咪的智商远不如人并且说不了话，但同样都是有一定智能的生物，都有自己的意识，也会有情绪。</p><p>“猫，在我眼里更像是一个玩具，或者取悦自己的工具。”这个说法很容易受到谴责，但我确实有一刹那感受到这种念头。不论怎么说，我已经养了还是会尽可能对猫咪负责，不会放任这样非常有问题的想法主导我的人格，一切明知有问题的做法还是要尽可能的去修正。</p><p>以上这段内容是在刚养猫一周的时候写的，那段时间情绪有点不太稳定，容易焦虑暴躁。在这之后又过了一个周，我的情绪逐渐冷静下来。这一周也有很多变化，比如她开始不再只局限于卧室了，到处乱爬的现象也变多了，中间因为她乱爬管不住一度觉得自己不适合养猫，一度想放弃，但现在还是逐渐适应家里有猫的生活。</p><p>每个人对待猫的方式都各不相同，我也只是一个不具代表性的例子，还是有很多人非常爱猫，细心呵护自家的猫，将猫当作家人一样对待。那么猫眼中的人是什么样的呢？关于这个事情在网上能看到各种各样的猫视频，也能看到各种各样的段子。有的视频里猫化身粘人精，有的视频里猫则是作为逆子给主人找茬。有天天找主人要食的吃货，也会有“我吃饱了，两脚兽滚出我的领地”的段子。有帮忙带孩子的贴心奶妈，也有叼着孩子给主人的猫妈妈。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/keeping-a-cat/Untitled.jpeg"                      alt="Untitled"                ></p><p>这些有趣的视频和段子，也一定程度上显现出猫看待人的方式，以及让我们窥探到人和猫相处的一些关系，至少都是一定程度的和谐共处，尽管有些“逆子”在，但这就像有的人性格比较难亲近一样。在此基础上更进一步的关系，还是要具体到每个铲屎官和猫主子之间的相处。我和我家的猫相处太少，无法得知我在她的眼中是什么样的，需要更多的时间，以及要我更多去观察和思考她的行为。</p><h1 id="决定养猫的心路历程"><a href="#决定养猫的心路历程" class="headerlink" title="决定养猫的心路历程"></a><strong>决定养猫的心路历程</strong></h1><p>从产生养猫的想法到实际养猫，这个过程算是充斥着矛盾和曲折。最早开始云吸猫的时候我觉得还是有机会每天在家办公再考虑养猫，在几个月前产生了来年要自己整租的念头，也因此开始考虑起有什么是和别人合租没法做到的事情，后来自然而然想到了养猫。之后一段时间我开始研究起了猫的品种，养猫所需要购买的东西。过年期间去猫咖等人的时候则是有了前面提到的对能否负责任的怀疑，年后纠结养什么品种，家里收拾好后又为了想要的品种跑了好几家猫舍。在选好猫交好定金后，更戏剧性的是第二天我开始有水痘的症状，最初我以为是过敏，吓得我之后去了医院，最后医生告诉我是水痘，我又不放心顺便做了过敏源检测，在之后的检测结果中确实有轻微的过敏，这让我更加纠结，选好猫以后的我更多的是想要留下她，而不是像之前那样纠结自己是否真的应该养猫。之后去了猫咖试水，没什么症状以后还是将猫接了回家，在这之后但凡皮肤有些瘙痒的症状我就开始担心过敏的问题，即便我平常也会如此。</p><p>虽然很担心，但目前来看还是能接受的。已经养了的猫我还是会好好养下去，这也是一种人生体验。最后再附上几张我家猫的美照。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/keeping-a-cat/IMAGE_2024-05-20_162505.jpg"                      alt="IMAGE 2024-05-20 16:25:05.jpg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/keeping-a-cat/IMAGE_2024-05-20_162518.jpg"                      alt="IMAGE 2024-05-20 16:25:18.jpg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/keeping-a-cat/IMAGE_2024-05-20_162508.jpg"                      alt="IMAGE 2024-05-20 16:25:08.jpg"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前段时间我带了一只可爱的猫咪回家，给她起名为露露。由于是妹妹因此想要用甜品来命名，在到处查看甜品的时候看到各种xxx露，又觉得aa的这种名称形式喊起来比较方便，因此起了这样的名字。她到家的第一天有些怕生，几乎不肯出来，出来的时候路过饭碗也不肯吃东西，看她饿了一天实在心疼，拿</summary>
      
    
    
    
    <category term="Life" scheme="https://fusionbolt.github.io/categories/Life/"/>
    
    
    <category term="Cat" scheme="https://fusionbolt.github.io/tags/Cat/"/>
    
  </entry>
  
  <entry>
    <title>从热辣滚烫到励志故事</title>
    <link href="https://fusionbolt.github.io/2024/02/18/Thinking/relaguntang/"/>
    <id>https://fusionbolt.github.io/2024/02/18/Thinking/relaguntang/</id>
    <published>2024-02-18T09:51:51.000Z</published>
    <updated>2024-03-06T09:54:06.855Z</updated>
    
    <content type="html"><![CDATA[<p>回北京之前表姐喊我吃了个饭顺便拉我去看了热辣滚烫，这部电影最近的热度很高，很大一方面是由于贾玲的变化，一年减下一百斤，对于众多需要减肥的人来说这是非常励志的故事。而我对这部电影的评价是这比起电影更像是另一种形式讲述的个人秀，这是一部爆火的电影，但只是普通的励志故事，故事本身并没有觉得有太多过于精彩的。过多的镜头都是主角一人占据大半个屏幕，这种表现方式将观众的注意力集中在这单一人物上，作为对人物没有那么喜欢的观众来说观感是比较差的，这也是让我觉得像是个人秀的一个原因。不过有一个表现形式确实让我觉得眼前一亮，前面省略的片段都在最后以回忆杀的形式穿插展出。</p><p>观影之前已经知道是贾玲减肥瘦下来的结局，在整个观影过程中励志这个词已经占据了我的大脑，也就很自然的开始思考励志这件事情。许多人都喜欢励志的故事，并且想要像每个故事中的主人公一样“咸鱼翻身”。类似励志的故事也有很多，比如小红书上那位改变形象的小艾同学，还有一位从专科读到了博士生的程序员，等等。对于这部电影来说，想必很多人看了电影以后又会重复“这次一定要减肥”的想法，幻想着自己成功的幻影，但几个月过去了，绝大多数人面对的又是原地踏步的现实。</p><p>这类故事，整个过程大多数是需要漫长的时间以及克服重重困难，甚至一直需要违背人类的天性，才可能到达目的地，做到的人少之又少，也因此会被人们所赞叹。在现实中痛苦挣扎着的人们，总需要些什么作为支撑，哪怕是虚无缥缈的幻想。不过即便是空虚的幻想，如果能促进自己前进一厘米，那也没什么不好。</p><p>希望读到这里的你，也有一天成为专属于你自己的励志故事中的主人公。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;回北京之前表姐喊我吃了个饭顺便拉我去看了热辣滚烫，这部电影最近的热度很高，很大一方面是由于贾玲的变化，一年减下一百斤，对于众多需要减肥的人来说这是非常励志的故事。而我对这部电影的评价是这比起电影更像是另一种形式讲述的个人秀，这是一部爆火的电影，但只是普通的励志故事，故事本身</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>再读某书的联想</title>
    <link href="https://fusionbolt.github.io/2024/02/16/Thinking/thoughts-inspired-by-a-book/"/>
    <id>https://fusionbolt.github.io/2024/02/16/Thinking/thoughts-inspired-by-a-book/</id>
    <published>2024-02-16T09:51:40.000Z</published>
    <updated>2024-03-06T09:54:44.241Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前的一条推文，我又想起了阿德勒的 被讨厌的勇气 ，上一次看大概还在两年前，当时的我觉得醍醐灌顶，但只是读过书中的内容，自己并没有什么观念上的变化，只对几个少数几个观点有深刻印象。</p><p>现在的我再回头看，依然觉得这些内容很有道理，但发现自己在很多事情上的观念都已经在潜移默化的改变，思考方式已经和书中的内容产生了许多相同之处，然而这个改变并不是读了那本书所直接带来的，而是我持续关注类似的内容，以及数不尽的胡思乱想所堆出来的。</p><p>其中很多结论在其他的地方只是换了个名字，本质上都是相通的，一个方面中真正重要的东西或许都是如此，不论你在哪里总会看到，只是它们换了不同的马甲，而你一开始或许真的无法识别出换了马甲的它们。</p><p>比如说关注当下这件事情，除了这本书外我还有两个印象深刻的事情。第一件事是在欧文亚隆的 成为我自己 这本书中提到这样一句话：过去的回忆和未来的憧憬，只会使人不安。另一件事是在播客中听到的，两个嘉宾在讲述什么时刻最幸福时，其中一个嘉宾提到在村口坐着看着村里的小孩子们到处跑动玩耍，什么都不考虑，只是这样而已，那个时光是非常幸福的。另外还有所谓的专注体验和心流理论，现在看来这一切其实都在指向<strong>关注当下</strong>这个答案。</p><p>看到了自己观念无形中的改变，又联想到自己一直想要知道某个东西到行动或者改变的障碍如何破除，以及学习方面真正跨越从知道公式到实际行动的鸿沟。最近看到了一岁半的外甥，让我联想到了学习数学的过程，从最初的九九乘法表，到后面复杂的积分等计算方式。如果现在的我没有这些，我可能学完公式就直接套公式计算，不会做什么题，整个知识结构非常不稳固，当年学习数学的时候每个过程都有大量的练习，因此产生稳固基础，逐步走向了后面。</p><p>这是一个神经建立连接的过程，对应的神经通路在多次的使用后会更加强大，更容易与更多的内容建立起连接。不论是强化神经通路还是和其他内容产生连接，也都和上面提到的 关注当下 相关内容体验一致。</p><p>这些结论在学习方法的书中或多或少都有所提及，但是如同文章一开始提到的一样，可能只是读完了，并没有让自己在思维方式上产生变化，这篇文章也算是一种和那些内容的连接。</p><p>那么对于之前没有产生改变的我，读完这本书的时候有什么用吗？没用，但又有用。我接触到了这些知识，尽管只记住了一些无关紧要的内容，并且没有发生观念转变，但这是大脑转变过程中的一小步，另外我回顾的时候又联想产生如此多的想法，产生了意想不到的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为之前的一条推文，我又想起了阿德勒的 被讨厌的勇气 ，上一次看大概还在两年前，当时的我觉得醍醐灌顶，但只是读过书中的内容，自己并没有什么观念上的变化，只对几个少数几个观点有深刻印象。&lt;/p&gt;
&lt;p&gt;现在的我再回头看，依然觉得这些内容很有道理，但发现自己在很多事情上的观念都</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>2023年终总结</title>
    <link href="https://fusionbolt.github.io/2023/12/31/Summary/summary-2023/"/>
    <id>https://fusionbolt.github.io/2023/12/31/Summary/summary-2023/</id>
    <published>2023-12-31T10:25:06.000Z</published>
    <updated>2024-01-01T10:31:36.404Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉2023年也走到了尽头，按照惯例年底还是要写一篇年终总结。</p><h1 id="去年的目标"><a href="#去年的目标" class="headerlink" title="去年的目标"></a>去年的目标</h1><p>去年的年终总结中列了一大堆“明年的愿景“，而实际做到的，大概只有一半左右。现在回看，目标这种东西应该经常拿出来看才对，我去年只是随意的列下了一些目标，并没有针对目标做一系列切实可行的任务规划，也没有定期回顾。这也算是我的一个老毛病了，我每次定完什么计划都是这样，实属有些困扰。因此觉得没必要详细去在这里再回顾了，在后面涉及相关内容的时候提及一下即可。</p><h1 id="今年"><a href="#今年" class="headerlink" title="今年"></a>今年</h1><p>今年的各方面是相对平淡的一年，过的没有太多的变化，也许是因为彻底适应了北漂的生活。但五月以及最后两个月都是比较差的状态，不论是学习、工作还是生活都过的不太好。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>今年多少学了一些知识，但总觉得这些内容对于一年的跨度来说还是太少了。</p><p>首先是关于博客，本以为今年会比去年有更多的产出，但mold系列结束后来我开始为写博客这件事情产生了很多焦虑，比如说自己的知识掌握的并不全面这样最典型的问题，另外也有周末的时候一直处于什么都不想做的状态，这个也有一定的关系，我没想到最后两个月自己精神上会痛苦成这个样子，果断选择了最懒散的一条路，什么也不做。除此之外还有很多坑没有填，感觉大概率都会淹没在笔记之中。</p><p><a class="link"   href="https://homura.live/2023/11/22/Other/anxiety-of-blogging/" >https://homura.live/2023/11/22/Other/anxiety-of-blogging/<i class="fas fa-external-link-alt"></i></a></p><p>之后是读书方面。今年被黑塞的作品深深吸引住了，尤其是《荒原狼》和《德米安》，最可惜的是我没能为德米安写一篇文章，而《悉达多》则是写了一半就没写下去了。其中我还参与了线下的读书会讨论了其中的两本书，了解到了各种各样的观点。</p><p><a class="link"   href="https://homura.live/2023/07/30/first-look-at-hesse-literature/" >https://homura.live/2023/07/30/first-look-at-hesse-literature/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/05/04/Reading/def-steppenwolr/" >https://homura.live/2023/05/04/Reading/def-steppenwolr/<i class="fas fa-external-link-alt"></i></a></p><p>《红与黑》的故事我觉得也很精彩</p><p><a class="link"   href="https://homura.live/2023/07/30/Reading/the-red-and-black/" >https://homura.live/2023/07/30/Reading/the-red-and-black/<i class="fas fa-external-link-alt"></i></a></p><p>除此之外还有一些其他作品，有一些毛姆的作品，读下去以后不是很有兴趣，但书买都买了，随便读读吧。还有今年开始了读了一点《卡夫卡》相关的作品，不得不说确实难懂，但是有的文章一旦get到了作者的点还算是能够理解，另外内容比较压抑，我倒是挺喜欢这种不那么“积极向上”，揭露黑暗面的内容。除此之外还零零碎碎读了一些，有的有所记录，而有的也只是读完罢了。</p><p><a class="link"   href="https://homura.live/2023/05/03/Reading/thr-outsider-by-albert-camus/" >https://homura.live/2023/05/03/Reading/thr-outsider-by-albert-camus/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/04/18/Reading/Stoner/" >https://homura.live/2023/04/18/Reading/Stoner/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/04/17/Reading/never-let-me-go/" >https://homura.live/2023/04/17/Reading/never-let-me-go/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/04/09/Reading/1984/" >https://homura.live/2023/04/09/Reading/1984/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/02/19/Reading/brave-new-world/" >https://homura.live/2023/02/19/Reading/brave-new-world/<i class="fas fa-external-link-alt"></i></a></p><p>在代码上，今年自己的编程语言略微做了一些更新，很惭愧并没有写多少代码，只是添加了部分小功能，尝试添加了一些分析和优化的部分。另外是为其实现了一个language server，这个过程算是也踩了许多的坑。还读了mold的源码，顺便更新了一系列的博客，对于链接器做的内容有了更多的了解，只是从读到写是质变，目前学的还非常肤浅，希望未来有机会能参与实际工作去强化相关知识。还花了一点时间回顾了半弃坑的os，读了部分xv6的代码，修了部分之前留下的bug。以及大概了解了一下GPU的架构，年底开始看ssa book，整体看起来并没有做多少事情。</p><p>练琴方面今年上半年状态还可以，之前看到推友在推特练琴因此也开始学习这种方式，对于练琴的效率还是有提升的，但是今年最后两个月不论是练琴时长还是效率都比较差劲。音阶已经练到了最后一个，哈农也只差两三个就结束了，其他的练习曲也都或多或少有所进展。学琴快两年，但我依然对音乐一无所知，练琴的时候也总是出现很多各方面音乐基础相关的问题，比如说听不出好坏，节奏有问题等等，不过那得去学音乐基础而不是钢琴演奏了。</p><p>拍照上今年几乎没怎么出门拍，过年回老家，五一去植物园，夏天雨天去了颐和园，国庆节前后出去。尝试投稿几张照片到视觉中国，但是全军覆没。到了八月的时候也没能去拍流星雨，没有比较好的拍摄条件另外自己也没有想方设法去创造这样的条件。</p><p>八月底因为一次经历让我很难过，想要去改变，遂开了一个频道督促自己，虽然有的时候做的很少，但是确实一直持续了，健身环一直持续到了现在，明年也会继续通过这个频道试着去改变自己。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>日常生活几乎没什么变化，依然是工作日上班→下班，周末一天上钢琴课一天宅家，持续这样的循环。周末的心理咨询感觉对自己没有太大帮助，因此在4月就已经停掉了。九月底的旅行，可以算是今年中最特别的事情了，细节都在之前的博客中，无需再进行概述。</p><p><a class="link"   href="https://homura.live/2023/11/05/Life/first-travel/" >https://homura.live/2023/11/05/Life/first-travel/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://homura.live/2023/11/05/Life/travel-meditations/" >https://homura.live/2023/11/05/Life/travel-meditations/<i class="fas fa-external-link-alt"></i></a></p><p>今年的开支上少了非常非常多，根据信用卡的数据来看整体减少了30%多，虽然还没有把最后两三个月的账整理完，但大概支出项目多少心里也有数。现在没有太多购物的需求，支出的大头还是衣食住行这种必须的开销，由于今年没什么消费需求因此衣食住行上不再那么省。最大的开支还要属前面提到的旅行，其中包含节假日所以住宿特别贵。</p><p>其他方面大多都没什么变化，上半年大胆尝试了两次女装出门，不过后来因为颜值焦虑还是决定不再做这样的事情了，尝试化了一次妆但也是因为做的不好就劝退了。</p><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><p>今年还打了不少的游戏，可能也和这种精神状况有关。艾尔登法环，王国之泪，宝可梦dlc，血源，等等，算下来整体的游戏时间可能也有几百小时了。</p><p>动画也是看了很多，尤其是在周末的时间和状态不好的时间，一不小心就会看上一个小时，甚至几个小时。今年看的非常棒的动画，一个是全职猎人，另一个是年底的葬送的芙莉莲。</p><p>虽然娱乐本身并无过错，但算到这里的时候还是会在想如果这些时间自己肯拿去学习会怎么样。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作上我自己不太满意，不论是工作的内容，还是工作时间的我自己。感觉不到什么进步，停滞不前，一切渐渐开始如同《毫无意义的工作》中所言。年底开始寻求新的机会，试着面试了几次，但是发现面试官对简历上的东西有所了解后，最看重的反而是自己side project的部分，从面试中算是对于自己在相关应聘中的竞争力有个初步了解，同时也意识到了这样下去是不行的，明年无论如何都必须做些什么推动这一切。想要工作中继续得到成长，这或许是一个奢侈的欲望，但不论如何我不能这样继续下去了。</p><p>今年有印象的事情大概就这些了吧。</p><h1 id="明年"><a href="#明年" class="headerlink" title="明年"></a>明年</h1><p>明年有一些迫不及待的事情，首当其冲的就是整租的计划，我实在不愿意继续合租下去了，公共区域因为个人细微的习惯不同会有很多问题，另外只租主卧太过于狭窄，等等各种方面的原因。整租随之而来的就是可以养猫，也就有了明年养一只小猫咪的计划，有一只猫咪陪伴着自己或许各方面状态也会好很多。</p><p>鉴于对工作的不满意，加上可能产生的变动，对明年的新工作有所期待，可以学到新的东西，但同时也十分担心能不能找到满意的工作并且顺利入职。</p><p>明年想要打网球，我一直都很喜欢这项运动，只是目前一直住的很偏僻，很难有什么机会，明年的话会更换住所，或许会有一些机会。</p><p>一个很重要的想法是身心精神状态能好一些，不过每年都在想这件事情，每次都没见有什么好转，尤其是今年的状态实在太差了，但我也并不知道该如何能走出来，只能看一步走一步了。</p><p>每年都很渴望亲密关系，每年都很渴望自己能变强，但每年都没有收获。2022是如此，2023是如此，2024或许仍然会如此吧…已经不敢对这些事情产生什么奢望了。</p><p>目前来说真正算得上目标的可能就如下两点</p><ol><li>很想研究卡夫卡的各种作品，甚至包括相关的出版物。我没有想过从他的作品中得到什么经验，只是单纯很喜欢他笔下作品中的“灵魂“，至于那是怎样的我无法用准确的语言描述。</li><li>认真研读ssa book。要想在编译器继续做下去，这是必须要学会的东西，在面试中因此吃了不少亏，虽然年中的时候三分钟热度想要看下去，但一直拖到了年底真正吃亏了才真正开始看起来。</li></ol><p>其他的方面，希望至少维持现状吧。下一年才刚要开始，我依然处于十分迷茫的状态，因此也无法定下更多的事情，但是至少上面的事情没什么好迷茫的，去做就不会后悔。</p><p>今年的内容有些悲观，也许是因为我最近正处于这样的状态，对事物的解读以及所想到的东西都染上了悲观的色彩。</p><p>至于明年，自己将会再次转动命运的齿轮，走向未知的未来。</p><p>如果你感兴趣的是我的年终总结，那么你读到这里就可以结束了。我的年终总结相比他人来说没有那么多华丽的语言和引人共鸣的感悟，有的只是死板又无趣的流水账。很想写点什么，但我却想不出来，写不出来。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/summary-2023/729B547A-7686-4750-9A69-517AFE7A1435_1_105_c.jpeg"                      alt="729B547A-7686-4750-9A69-517AFE7A1435_1_105_c.jpeg"                ></p><p>这里开始的内容多半是你不感兴趣的，此时你已经可以视为文章已经结束。思来想去，还是将这部分内容放在一起，不单独列一个文章了。</p><h1 id="今年的我"><a href="#今年的我" class="headerlink" title="今年的我"></a>今年的我</h1><p>对于我来说，每年更重要的可能是自己有什么变化，今年相比去年变差了很多，内容也消极了很多。</p><h2 id="精神重创"><a href="#精神重创" class="headerlink" title="精神重创"></a>精神重创</h2><p>一整年中，绝大多数时光都没给我留下什么印象，但五月前后和十一二月除外。</p><h3 id="亲密关系的不可能"><a href="#亲密关系的不可能" class="headerlink" title="亲密关系的不可能"></a>亲密关系的不可能</h3><p>五月前后的时候，发生了一件稀疏平常的小事，但我“破防”了。推特上被人回复了一条内容，我就不引用原文了，也没有指向原推主的意思，在我这里高度抽象化后的大意是”我<strong>不可能</strong>找到属于自己和异性之间的亲密关系了“。不论是事情本身还是言论本身，对大部分人来说可能都没什么，但对容易胡思乱想且祈求这种亲密关系的我无疑是一个重磅炸弹，在那之后的一个月我都没什么精神。虽说我自己已经能预见自己一个人的未来了，但被人这样说，还是很难以接受。</p><h3 id="能力的不可能"><a href="#能力的不可能" class="headerlink" title="能力的不可能"></a>能力的不可能</h3><p>十一二月的我已经在看就业的市场行情了。断断续续也投了或者面过一些，其中出了很多状况。十一月开始，朋友帮我内推字节，简历给leader看过，但是因为学历被HR拒绝了；内推腾讯出了很多篓子，先是没面试就收到了面试不通过的邮件，之后面试还有一些问题没答好。（当然我并不是目标放在大厂上，只是恰巧有机会就试一下。）其中不论哪一个环节都很让人受折磨，面试失败是再正常不过的事情，只是一些没面就先被刷掉的情况确实让人很受打击。到了十二月，面了另一家公司，一天面完了整个流程，二面答的自认为比较差劲，但是那些内容都相对比较考验实际经验，对于经验缺乏的我来说并不能好好答出来，尽管之后也收到了面试通过的邮件。而在此之后明显是因为我面试的表现不是太好，即便是发邮件询问也很难得到一个稳定的offer，甚至被hr套路了。</p><p>面试出现各种问题也是在所难免，而我痛苦的并非是面试失败，而是在这背后体现出的自身的无能。在这整个相关的过程中我一直在为自己的无能而无奈，气愤，痛苦，也认为自己会永远这样无能下去，<strong>不可能</strong>再发生什么改变。</p><h3 id="希望的扼杀"><a href="#希望的扼杀" class="headerlink" title="希望的扼杀"></a>希望的扼杀</h3><p>所有希望都被扼杀的生活是很可怕的事情，意味着前方再努力也不会有变化，只要有这样想的苗头，为数不多的力量就会都流失了，不论是哪件事情，<strong>问题的来源全被我指向了我自己</strong>，不论是自己学历差，还是自己能力的不足，又或者是自己歪曲的想法。</p><p>这些时间我几乎没法正常跟人聊天，不论看到什么，总会联想到自己哪里做的不好，哪里做的不够，别人能做到我却做不到，诸如此类，甚至会说出一些充满恶意的话。而最痛苦的那一阵时间，甚至会丧失生存的欲望，甚至屡次说出“希望有人来杀了我”之类的话。</p><h2 id="当下的无助、痛苦"><a href="#当下的无助、痛苦" class="headerlink" title="当下的无助、痛苦"></a>当下的无助、痛苦</h2><h3 id="感受不到正面能量"><a href="#感受不到正面能量" class="headerlink" title="感受不到正面能量"></a>感受不到正面能量</h3><p>之前我都没有注意到这个问题，当我思考总结该写什么的时候才逐渐发现。这些内容中几乎没有什么正面的故事，而我这一整年也确实没什么好的经历，最多只有日常偶尔的一些小快乐，但又都像石头扔到大海中一样溅起一些小水花，随后又会被大浪所冲走。</p><p>那么日常生活中的我，其余时间都在什么状态呢？</p><ol><li>专注做什么。包括工作、学习、兴趣爱好、和别人交流等，专注于当下。</li><li>发呆，什么也不考虑，什么也不去做，或者是在想一些不会太痛苦的事情。</li><li>不专注的做事情，此时会有很多的精力分配在对自己当下行为的评判上，也是非常容易痛苦的时候，还是拿上面说的年终总结的例子，如果我非常专注的写，那么也就不会有精力去思考评价自己的内容，也就不会说写的过程还会伴随着巨大的痛苦。</li><li>纯内耗。这种时候已经完全陷入了痛苦的状态。</li></ol><p>即便是专注做事情，做了的事情视为理所当然，没做好的事情就会进行自我责备。没有来自外部的激励，不过即便有我也一样会视为应该得到的。</p><h3 id="人、亲密关系、对立"><a href="#人、亲密关系、对立" class="headerlink" title="人、亲密关系、对立"></a>人、亲密关系、对立</h3><p>今年依然是没有亲密关系的一年，我和别人相处的过程依然十分扭曲，追求亲密关系这种事情我仍然过分的渴求，但仍然不可能得到。和人相处的过程中逐渐意识到自己并没有想象中的那么高尚，不求回报的付出还是做不到，向别人付出的时候还是想要精神层面的回报，没有得到回报的话就会有所畏缩。前几天的我痛苦到了极致，也不知道该寻求什么人的帮助，不过我也很难想象如果有亲密关系我会愿意寻找对方，自己非常害怕继续依赖于某个人，对于我这种不稳定的频率来说，一定会影响到对方。</p><p>另外今年向许多人伸出了自己的刺，戳到了许多人，倒也不是说想要故意刺伤别人，而是我和他人的关系来说很难不刺到别人。我本身精神状态的不稳定，以及不习惯和他人私聊，等等许多方面，一个人呆惯了真的不适应有另一个人和自己的私人时间产生交集，除非是我主动想要和某人建立什么联系，仿佛“舔狗“一般。</p><p>今年约见了许多推友，有的是第一次见，有的甚至第一次认识，有的是认识好久未见过，有的是见过数次，有单独见面，也有见很多人的时候。单独见面的情况下聊天一般没什么问题，但是多人见面的时候依然会有自我回避的毛病，也总会产生自己无法插上话的感觉，自顾自的陷入了自闭的状态。</p><h3 id="极其强烈的虚无感"><a href="#极其强烈的虚无感" class="headerlink" title="极其强烈的虚无感"></a>极其强烈的虚无感</h3><p>从八九月开始这种感觉格外的强烈，也许是因为迷茫，也许是因为状态不好，缺少行动的动力，并且缺少什么正面反馈。</p><p>第一次是在旅行的过程中</p><p><a class="link"   href="https://homura.live/2023/11/05/Life/travel-meditations/#%E6%97%85%E8%A1%8C%E7%BB%93%E6%9D%9F" >https://homura.live/2023/11/05/Life/travel-meditations/#旅行结束<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>在最初提到了旅行前感受到的无意义感，而旅行过程中无意义的感受又数次涌上心头。</p><p>有一次在和朋友一起吃美食的时候，有一个瞬间我感到格外空虚，无意义，只觉得十分美味的食物吃与否在大部分情况似乎没有什么太大的区别，除非肠道细菌反复催促你去吃。而在吃饭时是否进行交流似乎也没有什么区别，除非我感到孤单需要找人讲话。和我一起的人们可能不可能会产生这样的感受，他们很重视美食，而我则是一个对美食不太讲究的人；他们很注重人和人之间的联系，而我却对这件事情过于冷漠，和别人产生联系甚至会觉得是因为自己心血来潮（当然这并不准确）。</p><p>在约见另一个朋友吃饭的时候，突然觉得是否不约见也无所谓，甚至不认识也是无所谓呢？交朋友对于个人社会生存以及社会关系是有益的，但是对于“我自己”呢？我作为一个弱小的个体可能需要这些益处，但作为我自己来说如果没有任何压力的话，会想要远离和人的关系。这和我的童年过往有所关联，现在也就这么延续了下来。</p><p>在旅途的时候，似乎也出现过认为我是否在城市里，在景点里游玩是完全无所谓的事情，我这次出来纯粹只是为了好奇，体验全新的事物罢了。</p><p>现在看来这些全都是为了满足身心的需求。我是一个认同“人生无意义”这个观点的人，既然活着那就遵循“在不会被警察叔叔带走的情况下满足自己”这个规则去行动，去满足自己的需要，另外满足自己的部分欲望，我的行动、想法与解读，现在看来似乎也是满足这一切的。</p><p>旅途中的这份无意义感或许是想要传达给我什么东西，当然也可能是纯粹的无意义，但我可能不得而知了，现在已经结束了旅游，回到了熟悉的日常生活，回到了熟悉家里，等待着我的或许是另一种的无意义感，但这已经是另一份感受了。现在写这篇文章时我仍然会觉得毫无意义，我为什么要开始写呢？也许是想要拙劣的模仿我的一位朋友，但不论如何既然想写了那就写下去吧。</p><p>数量众多的无意义感，我不知道应该如何面对它们，但不论如何它们或许会陪伴我一辈子，或许也不会有任何答案，只是这样存在罢了。</p></blockquote><p>之后这种感受断断续续掺杂在生活中。前两天的我这种感受又强烈到顶点且想要写下些什么，因此有了下面这段内容。</p><blockquote><p>一如既往吃完了晚餐散步，但突然觉得无比虚无，也许是因为最近的工作让人没有干劲，一天天无所事事，也许是因为生活过于无聊，没有什么乐趣，也没有什么正反馈。</p></blockquote><blockquote><p>每天上班等下班，工作日等周末，每个月等着月底的工资，经常想着最近的长假是什么时候，又或者考虑着今年的年终奖怎么样。我们只是度过这些时间，对于工作的人，学生，似乎都是如此，工作的人为了收入，学生为了学业和学位。有的时候只需要度过这段时间，有的时候需要去做些什么，如果只是等待时间流动，是多么痛苦的事情。</p></blockquote><blockquote><p>这让我想起之前看的书里提到的，“人意识到自己能对周围的影响”，而我似乎正属于一种对一切都不会产生任何影响的状态，并且有着极强的挫败感，也没什么兴趣可言。如果我此时不需要工作了，那我会干什么呢，我也不知道，可能还是什么都不想做，只是去浪费时间罢了。这让我想起了自己曾经做过的一个印象深刻的梦：梦到自己死了，死后在一个无底洞中坠落，看不到底和周围，而我只是在一边下落一边感受着自己此时的感受，就这样一直持续下去，不会痛苦，只是存在罢了。</p></blockquote><p>内容算是写了一半，但我也没有想继续写下去的想法了，就这样吧，或许一切都不会有答案。</p><h3 id="药物治疗"><a href="#药物治疗" class="headerlink" title="药物治疗"></a>药物治疗</h3><p>今年从五月份的那次重创后感觉药物已经没法正常发挥效用了。和大夫沟通并调整了药物，从三片文拉法辛到开始加入艾司西太普兰。但是到了年底，在十二月中旬的时候我再次被重创到感觉要承受不下去了，因此减到一片的文拉法辛又加到了两片，甚至大夫还告诉我如果还这样反复的话最好去住院治疗。但我想，即便再怎么依靠药物和住院治疗，我自己的弱小和无助感，所缺乏的亲密关系和情感支撑，都不会有所改变，这对我来说才是最需要解决的，但又是无力解决的。而且一个很重要的问题是对于一个社畜来讲，因为精神疾病住院一个月，从各种方面来讲都不太妙。</p><h3 id="对自我无能的怨恨"><a href="#对自我无能的怨恨" class="headerlink" title="对自我无能的怨恨"></a>对自我无能的怨恨</h3><p>这对我的影响比缺乏亲密关系还要强烈，但或许如果有亲密关系这也能一定程度的缓解。如同之前所说，我对自己的无能十分怨恨，甚至认为不可能改变。</p><p>我对能力追求的来源有两方面，一个是人希望变好的本性，另一个是变强才会更容易被人喜欢被人接受。这都是相对比较正常的，即便是后者也仍然算在正常的界限内。但更病态的想法存在使得我完全成了一个“疯子”，我需要满足自己是完美的这一想象，当现实和想象分裂开，人的自我同时也会被撕裂，进而导致了巨大的痛苦，也因此这种追求不再是一种动力，而是一种毒素。</p><p>现在的我又很难有什么进步，自己对一切事情提不起兴趣，没有行动力，没有目标，自认为需要别人推进一把但似乎也不可能找到这样的人，这些困难也是我无法解决的。这样难以进步的我，与急需前进的我，又产生了不可调和的矛盾，我只能夹在这些问题之中被撕裂，被打碎，却又无能为力。而我在和人交流中的表现，使得目前只能由自己来想办法苟活在这里。</p><p>内心如此破碎的我，很难有什么正常的言行，许多时候需要去抑制，但这终归不是什么办法，而这更加助长了我在人际关系之中对他人的负面影响，<strong>很多行为全都是为了缓解自己的“痛苦”而“迫不得已”</strong>。当我看到自己这样做的同时，又会给自己施加更多的压力，一切都在恶性循环之中。而这些循环，在这一年<strong>没有发生任何质的改变</strong>，没有从任何一层开始瓦解。《神经症与人性的成长》这本书中提到，治疗的方法在于书中所讲所有内容，需要彻底的理解，不是从文字意义上，才能真正解决，或许我还要做更多的努力吧。</p><h2 id="一切一如既往"><a href="#一切一如既往" class="headerlink" title="一切一如既往"></a>一切一如既往</h2><p>我一如既往的无能，缺爱，自卑，懒惰，一如即往的像个孩子，尽管已经25岁了，但某些不好的地方和15岁时为来某样东西大喊大叫的我没什么差别。这么多问题，大多来自同样的根源，一切都是缠绕在一起。尽管近年来外观看起来不同了，但内核仍未发生什么变化。我至今无法抓住那个根源，也无法梳理好这缠绕的一切，总是处于一片混沌之中。不断的重复选择一根藤蔓尝试剪断，但刚开始没多久又选择拿起另一根藤蔓，最后不仅没有一根藤蔓脱离开，反而被我搞的越来越乱。</p><h2 id="对未来的迷茫"><a href="#对未来的迷茫" class="headerlink" title="对未来的迷茫"></a>对未来的迷茫</h2><p>对人生的探索，我越来越迷茫，不知道想做什么，怎么做好，太多的时候处于一种放弃一切的想法。在旅游之后，意识到自己是多么讨厌坐班，但是自己却又没有任何能力不去坐班。不论是足以让我不上班的底气，还是一个人在家的颓废状态，即便我不工作，我也无法好好的。也许现在的我，无法探索到任何答案吧，至少要先破除困境才行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不知不觉2023年也走到了尽头，按照惯例年底还是要写一篇年终总结。&lt;/p&gt;
&lt;h1 id=&quot;去年的目标&quot;&gt;&lt;a href=&quot;#去年的目标&quot; class=&quot;headerlink&quot; title=&quot;去年的目标&quot;&gt;&lt;/a&gt;去年的目标&lt;/h1&gt;&lt;p&gt;去年的年终总结中列了一大堆“明年的</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>写博客的焦虑</title>
    <link href="https://fusionbolt.github.io/2023/11/22/Other/anxiety-of-blogging/"/>
    <id>https://fusionbolt.github.io/2023/11/22/Other/anxiety-of-blogging/</id>
    <published>2023-11-22T13:08:47.000Z</published>
    <updated>2023-11-22T13:10:43.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写博客的焦虑"><a href="#写博客的焦虑" class="headerlink" title="写博客的焦虑"></a>写博客的焦虑</h1><p>博客的内容，很大程度会将一个人的许多方面展现出来。而我此时对于博客的焦虑，也是如此。</p><p>事情的起因是这样的，碰巧看到了某个大佬的博客，从2005年就开始更新一直写到了现在，并且每个月都保持非常高的更新频率。这让我被焦虑感熟练地挟持，不敢想象以后还在写的自己，另外自己的更新频率如此低。点开了早期的博客后发现部分文章内容比较少，自己松了一口气，一段时间后理性重新恢复了掌控，纠结这些东西其实是没有必要的。</p><p>当想法产生后没多久我决定将这些内容记录下来，同时也会强迫自己对于这个问题思考下去。</p><p>我的博客有些时间没有常规更新了，最近几个周也恰巧注意到这个问题，甚至这个想法发生的时间点我已经在准备把之前积累的一点点东西整理一下，同时还在考虑一些问题。</p><ol><li>我是负面想法很重的人，在想一些负面的东西要不要写。</li><li>整理博客的时候，一些内容会纠结要不要放上去，有的内容因为比较短，有的内容因为不那么“好”。</li></ol><p>回到正文，我考虑的这些问题，本质上或许都是想要依靠文章数量和文字数量来做一个非常简易的评价。从数量和文字的层面进行评价，或者说好评，就能掩盖住自己对于博客的一些相对负面的评价。包括但不局限于</p><ol><li>自己的想法太少</li><li>觉得自己内容不佳，包括博客用词、排版、以及介绍的方式等。</li><li>觉得自己水平不佳，写的很多东西自己可能不够熟悉甚至会误导别人。</li></ol><p>可能有的人会觉得这是完美主义，但我觉得并非如此，只是在一味地进行批评罢了，如果真的是完美主义那不可能说放任自己写一些只是<strong>看起来好</strong>的文章。</p><p>除此之外，三个月前我还写下了这样的内容一直没有整理</p><blockquote><p>读代码的博客引用源码似乎也没问题。各种博客写到现在感觉慢慢能写点了，我一直没什么意见和想法，也不太能表达这些，所以只会引用源码分析里面怎么做，也不知应该说什么其他的。其他读书的博客，其实也都是强行逼着写，把很多零散的碎片组合起来，所以内容连贯性不强，很难做到一次写一大段内容…<br>也因为这些不足，加上写的时候很没耐心，我的文章里面很容易出现很短的一段。那些能有那么多自己的想法和内容输出的人真的很厉害，而我最多只有把别人的抄过来，读书的博客也很容易写成摘抄，以及总结剧情，很想避开这些，多写点自己的想法，但我真的没东西说，像极了和别人一起的时候没话说的样子<br>刻意去练习又不太好安排，因此一直这样，还是只能多去逼着自己写下对一些事物的看法，得多写一点技术类，读书类之外的内容，比如说对一些事情的看法等，可能这对我来说是相对好做到的，除此之外也不知道还有什么好办法</p></blockquote><p>里面完全都是类似的焦虑。追求写好这件事情我相信是人性使然，也确实需要去思考如何才能写好，但是过于在意这些或许反而会引起更多烦恼。写好技术文是重要的，但去表达自己同样如此，对我这样焦虑的人来说这之间的取舍还是有些困难的。</p><p>说了那么多内容好坏，以及类别的问题，那博客到底要写什么呢？<strong>理性</strong>地说一定是因人而异的，只要是你想要输出的，想要表达的，都可以。但是对我来说，“感性”，又或者在某些方面的缺失，<strong>迫使</strong>我想要写“<strong>好</strong>”文章。好这个字则显得非常宽泛，略微具体点来说就是“内容长”，”看起来高深“，这种看起来好就可以的东西。技术文更需要的是自己去搞明白某个东西而不是长度，思考文则需要的是捋顺自己的思路以及表达出自己，无论哪一类都不应当是为了内容数量而去，更何况有些内容使用过多的文字反而显得更搞不清楚本意。</p><p>对我来说，只要有办法破除掉自身想法的强制性，后面自然就会知道要怎么做了。结论看起来很简单，但距离做到还非常遥远啊，我还远远不够成熟，像一个小孩子一样，期待着有更多的读者，有更多的赞扬，而大佬们的博客是在非常纯粹的分享想法，即便最初的内容也是如此。不知这样的我何时才能达到那样纯粹的输出内容呢？另外对于写好文章这件事情也是一定会有所追求的，我何时才能真正能写出好文章呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写博客的焦虑&quot;&gt;&lt;a href=&quot;#写博客的焦虑&quot; class=&quot;headerlink&quot; title=&quot;写博客的焦虑&quot;&gt;&lt;/a&gt;写博客的焦虑&lt;/h1&gt;&lt;p&gt;博客的内容，很大程度会将一个人的许多方面展现出来。而我此时对于博客的焦虑，也是如此。&lt;/p&gt;
&lt;p&gt;事情的起</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
    <category term="Blog" scheme="https://fusionbolt.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>旅行沉思</title>
    <link href="https://fusionbolt.github.io/2023/11/05/Life/travel-meditations/"/>
    <id>https://fusionbolt.github.io/2023/11/05/Life/travel-meditations/</id>
    <published>2023-11-05T09:55:38.000Z</published>
    <updated>2023-11-05T10:00:33.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出发前"><a href="#出发前" class="headerlink" title="出发前"></a>出发前</h1><p>在九月底，我开启了一场为期半个月的旅行，旅行的路线是从北京出发，途径广州、深圳、上海、杭州，最后再回到北京。作为第一次出门旅行来说算是略有挑战，选择了那么多城市，同时有许多事情会是第一次面对，需要花不少时间去做准备，包括但不局限于行李准备、行程时间、酒店规划，交通方式、景点规划。</p><p>这次旅行算是在很久之前就有了打算，八月底开始匆匆忙忙做准备，周末都会花时间去做一些规划。许多事情没有经验，也浪费了许多时间在一些不必要的事情上，但旅行已经结束的我看来，作为第一次旅行还算成功。我并没有像网上那样做了十分详尽的规划，具体到几点去什么景点玩，只是大概选了一些感兴趣的点，随缘去逛一逛。</p><p>旅行也不必搞的那么紧张，更何况我这次旅行的目的之一是想着去看一下南方的城市。作为一个典型的北方人，就像没看过雪的南方人一样，对那未曾去往且气候相异的城市感到好奇。另外则是想要去见一些未曾见面以及或者是许久未见的朋友。就这两个目的来讲，也算是都圆满了，感受到了南方的气候，尝到了许多美味的食物，还见到了许多的人。</p><p>“将要旅行”这个想法，从开始规划到出发前一直在围绕着我，有对行程的期待，也有对一切能否顺利而感到不安。</p><p>除此之外，出发的前几天还有种难以描述的强烈感受，整个人有些像一个即将迎来假期的孩子。面对临时下发的任务则像是应对期末考试一样紧张，当任务完成时也像一个考完试的孩子一样松了一口气，这个阶段似乎一直在向未来寻求透支些什么给自己。尽管自己明知即便旅行开始，一切也不会有那么强烈的变化，我还是我自己，不会因为这件事情发生而改变。也许我只是想要从当下逃离，将一切托付给未来的自己吧。</p><p>直到出发的前一天晚上，收拾完东西在沉迷游戏的我，想到了明天就要出发这件事情，瞬间萌生了一些无意义感，以下是我发在频道里的原文。</p><blockquote><p>明天出发旅行，晚上玩游戏的时候突然在想，这个超长假期在家打游戏好像也没什么不好的，出去旅行，和人面基，这些事情似乎都没什么意义。刚才洗漱的时候想到了这个问题，因为没坐过飞机，没旅行过，没去过南方那些城市，所以我会选择开启这次旅行，很大程度上有一种想要初次体验的感觉，但是又开始觉得没有这些体验似乎也无妨</p></blockquote><p>这样的无意义感，从这时开始到旅行结束，经常会在各种意想不到的时机出现。每一次出现我自然会关注且记录下来，但这些待后文再提。</p><p>总之在规划的第一天，我出发了，粗心大意的我在到达第一个目的地前不出意料的出了很大的篓子：走错了机场，但好在我担心各种状况所以出门较早，勉强补救了回来，最后算是相对顺利到达了广州。</p><p>以上就是出发之前的我。而在整个旅程中经历的事情，我不打算严格按照时间线和城市串起来讲，某些东西应当被混到一起，不论是为了变得完整，还是为了模糊掉一些会让人感到困扰的细节。只会留下一个流水账的版本，为了那个可能会记得并且会回头看的自己。</p><h1 id="旅途"><a href="#旅途" class="headerlink" title="旅途"></a>旅途</h1><p>在整个旅行的过程中，踏上了自己从未到达的土地，体验到了众多新鲜的事物，了解到了许多地域的差异，一切都很新奇，获取也很有趣。但现在想来似乎并没有跃跃欲试的感觉，只是平稳的按照模棱两可的规划，前往景点观光，约见各种想见的人。</p><h2 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h2><h3 id="拍摄"><a href="#拍摄" class="headerlink" title="拍摄"></a>拍摄</h3><p>绝大部分的景点本身可能并没有那么吸引我，但是一些景观如果保存在自己的相机之中，则是有一种别样的感觉。实际上也确实拍了很多照片，其中不乏一些自己比较满意的照片，自然也还有一些浪费存储空间的废片。为了拍照片东奔西走，背着沉重的设备，这也使得我旅行的过程十分劳累。以这样的心态进行旅游，似乎我不再是作为游客，而是作为一个兼职摄影师在工作。</p><p>拍照时的我意外的拼命，有时会背着非常沉重的设备在外面到处行动，经常为了夜景晚上十点还在奔波，不知道是什么在驱动着我。我未曾觉得自己有那么热爱这件事情，但是有些像在一些情况下打游戏，也没什么其他特别重要的事情或者说干脆不想做其他事情的时候，即便是游戏中最重复无聊的部分也会一直在玩，像是在重复自己的行为，或者开始了一时半会停不下来。</p><p>拍摄时以及看到成品的兴奋，以及觉得自己拍不出来好照片的痛苦都是切实存在，甚至一度因为后者不想出门拍照。拍照真的是困难的事情，不知道怎么才能拍到满意的照片，拍出来的照片总是有很多缺陷，也缺乏许多创意。有些地方比较容易出片，但又觉得太过于平常，却也不知道怎么拍的更好，虽然觉得拍到了好看的照片但是又不满意。</p><p>不论拍照这个行为本身的心情如何，到了一些绝美的景点还是会不由自主的拿起相机开始拍照。在珠江夜游拍照的时候彻底迷上了夜景，漆黑的夜晚中到处都是炫彩的灯光，照亮了漆黑的江面，照亮了两岸；站在广州塔顶看向周围的风景时，为所能看到的景观而感叹，不由自主的想要记录下眼睛所看到的所有画面，也因此拍了许多全景照片；走到陆家嘴区域的江边，看向对面金碧辉煌的外滩，很难不感叹真是漂亮。</p><p>记录下肉眼所见的美丽事物，这似乎像是我拍照的初衷之一，我也并不很清楚自己是以怎样的心态开始拿起相机拍照，但至少这个念头使得我继续拍照下去。</p><h3 id="熟悉感"><a href="#熟悉感" class="headerlink" title="熟悉感"></a>熟悉感</h3><p>在各地景点之外的地方，或者说在这些城市中穿行的过程中，感受到更多的并不是作为从外地来的游客的那种好奇，而是一种此时我只是在“这里”，而不是我在“这个城市”的感觉。你不会强烈的意识到你到底在哪里，你只知道你在餐馆里吃饭，你在床上睡觉，在前往目的地的交通工具之上。也许你认为这和我的旅行路线有一定关联，全都是相对繁华的城市，但我想即便是在没有那么繁华的偏远地区，也一样很少会产生此时此刻“身在某个城市”的强烈感觉。</p><p>当然也有一些例外的时刻，比如说我在广州一个商场的电梯中，听着周围大爷大妈全在讲粤语的时候，甚至会觉得自己身在国外，或者在最初几天看到许多高耸入云的建筑，会觉得这一定不是在北京，这对限制建筑高度的北京来说算是比较罕见的光景，但看多后也就习惯了这样的建筑。</p><p>对于有的人来说这种熟悉感是坏事，但对我来说或许会使得我更有信心能够走向更远的地方。在一个半月之前我写下了这样的内容，而这次旅行的我也到达了更远的地方。</p><blockquote><p>刚出生，父母的怀里是孩子的整个世界</p><p>当渐渐的能走了，自己的世界逐渐扩大到了家中各个角落</p><p>到了上幼儿园的年龄，我已经能够在村子里到处玩耍</p><p>当我开始上小学，村子外面一公里的世界也已经和我的世界产生了交集</p><p>在6年的时光后升入了初中，我的世界边界已经需要乘坐公交车前往</p><p>高中不再是按区划分学校，我考到了更远的行政区，随之这些区域也划入了我的范围</p><p>大学入学那天，随着火车的行驶，我侵入了临市的领地，在这之后甚至到了距离更远的其它市</p><p>当我就业后，到达了外省，不论是工作还是周末我都行走于这里，相对于家乡来说十分遥远的地方</p><p>终有一天，会走到更远的地方吧。不论是能踩到的路，还是踩不到的路</p></blockquote><h2 id="人"><a href="#人" class="headerlink" title="人"></a>人</h2><p>这次的旅途中见到了非常多的人，都相处的比较愉快。有的已经认识许久，但也有在路边初次接触的陌生人。相比于世间人类的百态来说这些人群只是非常渺小的一部分，但很多也都给我留下了十分深刻的印象。</p><h3 id="旧友"><a href="#旧友" class="headerlink" title="旧友"></a>旧友</h3><p>首先要说的是和一个旧友的事情。到了广州放下行李后就去见他了，我们约在了一个牛肉火锅店，久违的见面，彼此都为对方的变化感到惊讶。他一开始跟我讲了很多其他的事情，比如说什么好吃的，以及之前共同认识的一个朋友来的时候发生的一些故事。我觉得不太对劲，自己变了，在他一开始给我讲其他事情的时候我感到的是诧异，我第一时间想到的总是生活上的破事，比如说对方的工作，生活，现状之类的。但是之后也是不可避免的谈及到了各种生活的问题，他提到要在广州结婚定居，但是房价太高有点顶不住，也不打算要孩子毕竟开销太大。我想也许绝大多数人都不可避免的会经历这样的改变吧。我也这样向他提出了这个问题以及自己的想法，不记得确切的回答了，大致意思也是赞同我的观点。我觉得有些可悲，和别人聊天不是什么有趣的事情，也不是什么梦想与希望，而是残酷的现实，为生存而苦苦挣扎的惨状，到底是哪里出问题了呢？</p><p>另外他谈及了在这个城市的朋友关系，没有什么要好的朋友，而且他觉得自己年纪大了（三十多了）难以和年轻人一起玩。我们是在我老家那边一起玩switch认识的，当时他大概二十七八左右，一群人经常出去玩switch，然后顺便约饭什么的，也比较开心。另外从他的话中我感觉到他比我要想的更加重视和我的这段关系，我有些意外。也许是我对于人过于冷漠，也许是我不敢相信这样的事情会发生在自己的身上。不知不觉间我可能得到了一些漫长的时间中苦苦追求的东西，只是我却无法认出它本来的样子了。他很重视人和人之间的关系，也比较擅长于处理这个。在等电梯的时候他和其他等电梯的人自然的交谈了起来，对于家里人的事情以及类似的人际交往他都做的很好，后来还告诉我出来玩要买什么给家里人之类的。不是那种靠什么技巧，而是完全的真诚、自然的面对他人，接受他人，不像我一样畏畏缩缩，充满自卑与自私，处处躲着别人，也不愿和家里人交流。如果不是一起玩switch认识的，我很难想象这样的我们会有交集。</p><p>最后吃饭买单的时候他还一定要请我，我是真的不好意思让他来，他还是特地打车来这边，同时第二天还陪着我一起，甚至第二天也没能给我买单的机会，说是等他来北京玩再请他，不过北京毕竟没什么好玩的。饭后的散步，讨论到一些生活问题的时候还在想，50岁女性已经到退休年龄，那大部分50左右中年男人都在干什么？他那边的亲戚在开店，但是在我们这个年龄的人看不到社会上大部分这个年龄段的人，保洁也都是一些六七十的老大爷在做。现在想想可能是开店，保安，货车司机，厨师之类，我不太清楚那个年龄段的人，我爸可能也不能作为参考。</p><p>不过这样沉重的话题也只有第一天，第二天他又陪我到处转到处玩，还带我去坐了珠江夜游，一天的话题都比较轻松愉快，从饮食习惯，到在玩的游戏等。美好的时光总是类似的，也就没有什么特别让人印象深刻的地方。</p><h3 id="最早认识的网友"><a href="#最早认识的网友" class="headerlink" title="最早认识的网友"></a>最早认识的网友</h3><p>旅行的过程中，见到了十年前我正式接触网络世界的时候就认识的网友。由于看过照片，<del>甚至照片被他拿去P成了奇怪的样子</del>，他直接一眼认出，我听着熟悉的声音也算是认出了对方。在十年前认识的时候，彼此都不会想到这份关系会维持到现在，并且还会有这样一天在线下见面。晚餐过后便一边聊天一边压马路到了海边，吹着海风，到了很晚才结束这一场面基。</p><p>这种场合必不可少的话题就是感叹时间之快了，毕竟十年的时光一晃而过，都从一个初中生成长到了一个社畜。除此之外聊天的内容上并没有什么特别的，但是见到这样的网友本身是非常有纪念性的事情。</p><h3 id="一位面基过的网友"><a href="#一位面基过的网友" class="headerlink" title="一位面基过的网友"></a>一位面基过的网友</h3><p>由于是工作日，因此约见的过程是直接去往餐厅，他从公司赶过来，吃完晚餐后再回去工作。除了聊了一些网友之间的故事之外，其他的内容都比较现实，以及他考虑这些问题的方面也是如此。这种说法是想要夸奖这位网友，对这些事情考虑周全也是比较难得的，包括但不局限于城市的选择与工作岗位的问题，以及会面临的一些社会现状等。另外和上面提到的那位十年前就认识的网友完全处于社会的两端，这个说法可能不太好，但此时这样形容是相对比较合适的了。这让我产生了一种非常强烈且难以描述的感觉，或许是对立感，或许是割裂感，就好像是看到高楼大厦的旁边还有一栋老旧的平房一样。</p><h3 id="高中同学"><a href="#高中同学" class="headerlink" title="高中同学"></a>高中同学</h3><p>自从高中毕业以来已经7年了，在这段时间内从未见过他，甚至他的微信都是见面前几天找另一个同学要的。我不太会去联系过去的同学，因为在学校的时候里几乎可以说是我做事情最令人讨厌的时候，但我渐渐开始对过去同学经过这么多年对变化感到好奇，另外在过去他还是与我有些交集，并且一定程度上能接受我一些，之前正好得知他在上海，于是顺便尝试约了一次晚餐。</p><p>他表面看起来还是没什么太大变化，以往就显得有些成熟，也许更多的变化在内部。而我自然是完全变了一个人，除了令人诧异的长发外，对方的评价是看起来变得乐观很多。聊天得知厨师的工作还是比较辛苦，每天基本上除了睡觉、通勤就是在工作。他在上海已经当了五年的厨师，学到了许多厨艺，现在也差不多到了回老家的时候了，和我见面的前几天也是刚刚辞职。对于许久未见的同学来讲，聊的内容大多都是工作以及现状之类，不过能够约见到对方我也比较满意了。我对过往的同学多少有那么一些愧疚感，毕竟过去的自己实在是行事恶劣，令人作呕，自然是抢先买了单，算是弥补一些愧疚。</p><h3 id="或许不够熟悉的约见"><a href="#或许不够熟悉的约见" class="headerlink" title="或许不够熟悉的约见"></a>或许不够熟悉的约见</h3><p>从上海走之前，主动约见了一个推特上偶有交集的推友，但这也算是第一次正式聊些什么。一直觉得会是一个值得见一面的人，见面后也不失所望，你要问我为什么这么想，也许是对于发的推文的感觉，我也无法用语言描述。</p><p>除了常规的话题还聊到两个比较特别的内容。一个是关于心理疾病，另一个则是关于困扰的事情。不止一次面基的时候被问你最近有什么烦恼的事情，现在想想之前的回答好像都是说了一半，但我也很难说出更深层困扰我的东西。刚才又想要成为别人，但是回头来想我只能做自己，这对我来说也是非常困扰的事情，但又可以说是表层困扰自己的事情的一部分。也许因为我不懂，现在的我看来这一切是纵横交错的。</p><h3 id="杭州的群体面基"><a href="#杭州的群体面基" class="headerlink" title="杭州的群体面基"></a>杭州的群体面基</h3><p>群体面基是完完全全超出我预料的情况，我原本自然是打算和单个人进行见面。但由于杭州推友线下交流的氛围比较浓厚，不由自主变成了群体见面。</p><p>最初约见了一位推友在周围转转，后来多了一位推友一起吃晚饭，之后理所应当的一起在城市里压马路。变成三个人的情况我是最不适应的，瞬间沉默了起来，直到结束。而第二天也是类似的情况，在和所有人见面的时候我开始沉默了起来。我不是很习惯这么多初次见面的人一起，也并非什么社恐，只是我有些社交障碍，另外这么多人一起的话很难说每个人进行聊些什么。</p><p>在这个过程我发现自己的回避倾向仍然非常强烈，主动选择在群体中处于孤立的位置，主动选择一言不发。不过也算是难得的体验，这样想的话似乎能接受了很多，但也是我永远不会想有第二次的体验了。</p><h3 id="陌生人"><a href="#陌生人" class="headerlink" title="陌生人"></a>陌生人</h3><h4 id="借移动电源的陌生人"><a href="#借移动电源的陌生人" class="headerlink" title="借移动电源的陌生人"></a>借移动电源的陌生人</h4><p>自己下了广州塔坐在座位上找自己的东西时，一个阿姨打上了车但手机没电了，就来找我借移动电源，在对方等车的时候就开始聊了起来。她看到了我背的相机设备后问我是职业摄影师吗，是否接单之类的，听她讲她是和朋友一起来广州塔吃饭，以及找了摄影师帮忙拍她们。还大概问了一些在哪之类的，问我业余有没有接单，我回复工作忙。临走之前推荐了陈家祠作为下一个目标景点，总体来讲是很友善的一位阿姨，感觉也比较有气质。</p><h4 id="摄月"><a href="#摄月" class="headerlink" title="摄月"></a>摄月</h4><p>在上海拍东方明珠的机位等待时，一个路人小哥过来问我在拍什么，后来他告诉我他在小红书上找到这个机位，恰巧在同样的位置。那天天气很差，都以为看不到月亮了，我甚至规划了下一个机位，就顺便和他约好一会去下一个机位（虽然最后恰巧月亮出来了），在下一个机位拍完后加了微信。除了拍月亮几乎没什么其他交流，但也算是一个比较奇特的经历吧。</p><h4 id="高铁上幸福的一家人"><a href="#高铁上幸福的一家人" class="headerlink" title="高铁上幸福的一家人"></a>高铁上幸福的一家人</h4><p>在某趟高铁上，旁边的小孩子一直在折断笔，妈妈对孩子说爸爸赚钱妈妈花钱买的，你可不能浪费啊，之后孩子的父母都笑了。还有一个片段是服务员路过喊着水果冰激凌，妈妈非常迅速地捂住孩子的耳朵，感觉也很有意思。这家人给我的印象是非常幸福，并且也是非常可爱的一家人，属实让人羡慕。</p><h4 id="擦肩而过的人们"><a href="#擦肩而过的人们" class="headerlink" title="擦肩而过的人们"></a>擦肩而过的人们</h4><p>除此之外，还有数不尽的没有直接交集的人：在广州看到了睡在路边的人，深圳看到开摩的的人；在杭州的文化广场，看到了正在直播唱歌的中年阿姨；中秋节在上海的外滩，有行动不便的人，有在和家里通话的人，有结伴而行的情侣，有坚守岗位的交警，有和睦的一家人，有在发小红书的中年大叔。另外和朋友在海底捞吃饭的时候，看到了失恋的人，有陪他来的朋友，还有旁边一脸陪笑的工作人员。但我在想，这些工作人员也是十分辛苦，在工作之余可能也会因生活所困愁眉苦脸，和当时带有笑容工作时完全是两个样子。我会去想象一个人在不同情况下的样子，比如惊喜和遭受痛苦的时候，工作的时候，游玩的时候等。这算是一个比较有趣的事情，我们每个人都会如此，总会身处不同状态，并且展现给人不同的一面，但每一面都是组成个人的一部分，无法一言蔽之。</p><h1 id="旅行结束"><a href="#旅行结束" class="headerlink" title="旅行结束"></a>旅行结束</h1><p>在最初提到了旅行前感受到的无意义感，而旅行过程中无意义的感受又数次涌上心头。</p><p>有一次在和朋友一起吃美食的时候，有一个瞬间我感到格外空虚，无意义，只觉得十分美味的食物吃与否在大部分情况似乎没有什么太大的区别，除非肠道细菌反复催促你去吃。而在吃饭时是否进行交流似乎也没有什么区别，除非我感到孤单需要找人讲话。和我一起的人们可能不可能会产生这样的感受，他们很重视美食，而我则是一个对美食不太讲究的人；他们很注重人和人之间的联系，而我却对这件事情过于冷漠，和别人产生联系甚至会觉得是因为自己心血来潮（当然这并不准确）。</p><p>在约见另一个朋友吃饭的时候，突然觉得是否不约见也无所谓，甚至不认识也是无所谓呢？交朋友对于个人社会生存以及社会关系是有益的，但是对于“我自己”呢？我作为一个弱小的个体可能需要这些益处，但作为我自己来说如果没有任何压力的话，会想要远离和人的关系。这和我的童年过往有所关联，现在也就这么延续了下来。</p><p>在旅途的时候，似乎也出现过认为我是否在城市里，在景点里游玩是完全无所谓的事情，我这次出来纯粹只是为了好奇，体验全新的事物罢了。</p><p>现在看来这些全都是为了满足身心的需求。我是一个认同“人生无意义”这个观点的人，既然活着那就遵循“在不会被警察叔叔带走的情况下满足自己”这个规则去行动，去满足自己的需要，另外满足自己的部分欲望，我的行动、想法与解读，现在看来似乎也是满足这一切的。</p><p>旅途中的这份无意义感或许是想要传达给我什么东西，当然也可能是纯粹的无意义，但我可能不得而知了，现在已经结束了旅游，回到了熟悉的日常生活，回到了熟悉家里，等待着我的或许是另一种的无意义感，但这已经是另一份感受了。现在写这篇文章时我仍然会觉得毫无意义，我为什么要开始写呢？也许是想要拙劣的模仿我的一位朋友，但不论如何既然想写了那就写下去吧。</p><p>数量众多的无意义感，我不知道应该如何面对它们，但不论如何它们或许会陪伴我一辈子，或许也不会有任何答案，只是这样存在罢了。</p><p>除了上面提到的无意义感，我在旅行的过程中还会不断的询问自己，旅行到底是为了什么？现在看来，我在旅行中有着许多新的体验，见到了许多新的人，了解了更多的知识，也拍到了更多照片，这一切都是我的收获，但如果要将这个作为自己的答案，自己并不会感到满意，这些经历虽然看起来是充实的，但同样也是虚无缥缈的，即便不考虑这一点，得到了些什么在我看来更像是旅行的副产物罢了。同样的问题也曾发在自己的频道中，有些网友的回答是开心就好，有些网友的回答是不要注重结果，但对我来说这些同样不是我想追寻的答案，能适用于每个人的标准答案一定是不存在的。</p><p>尽管长达半个月的时间在外游玩而无需考虑任何工作相关的事情，但在整个旅行的过程中我仍然出现了数次使我感到十分痛苦，甚至到完全丧失生存欲望的情绪。这半个月来总是睡不好觉，但先不考虑这件事情，更多的问题在于自己的感受和想法。这某种意义上是一个警示，即便我天天出去玩，不需要工作，我也依然会有许多的痛苦。这看上去有些像废话，这些感受全部都是根源性的问题，不管是否工作人总会感到痛苦的，只是我觉得自己还比较难应对这些，在非常遥远的未来我想要脱离打工人的身份，但在此之前我需要想办法去应对这些，否则这对于工作上的独立来讲，危害还是非常大的。</p><p>当旅途结束，回到了正常的工作日，我变得无比不适应，不过对大部分人来说都很难从十四天完全自由的生活快速适应每天到点上班的生活吧。前面提到我的旅行一半是作为一个入门摄影师在做赚不到钱的工作，这是我不适感很强烈的一个非常重要的原因。</p><p>这对我是一次强烈的冲击，也许未能使得我实际去做些什么，但我的想法已经产生了更多改变。在从杭州返回北京的前一天晚上，我梦到了独自一人踏上了宝可梦训练师的道路，或许这也是我大脑潜意识的想法，想要就此启程，脱离到点上班的生活，只是我现在还未能实现这一切，希望自己终有一天能够实现吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;出发前&quot;&gt;&lt;a href=&quot;#出发前&quot; class=&quot;headerlink&quot; title=&quot;出发前&quot;&gt;&lt;/a&gt;出发前&lt;/h1&gt;&lt;p&gt;在九月底，我开启了一场为期半个月的旅行，旅行的路线是从北京出发，途径广州、深圳、上海、杭州，最后再回到北京。作为第一次出门旅行来说算</summary>
      
    
    
    
    <category term="Life" scheme="https://fusionbolt.github.io/categories/Life/"/>
    
    
    <category term="Travel" scheme="https://fusionbolt.github.io/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>初次旅行</title>
    <link href="https://fusionbolt.github.io/2023/11/05/Life/first-travel/"/>
    <id>https://fusionbolt.github.io/2023/11/05/Life/first-travel/</id>
    <published>2023-11-05T09:53:12.000Z</published>
    <updated>2023-11-05T11:22:47.070Z</updated>
    
    <content type="html"><![CDATA[<p>本文作为流水帐般的游玩记录，多图杀猫。如果你对我旅行前后的想法有兴趣那请访问这篇文章</p><p><a class="link"   href="https://homura.live/2023/11/05/Life/travel-meditations/" >https://homura.live/2023/11/05/Life/travel-meditations/<i class="fas fa-external-link-alt"></i></a></p><h1 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>在国庆前一周的周六到了机场乘机，这是我第一次坐飞机，刚起飞的时候风景非常的棒。</p><p>飞机起飞后，一开始感到不适，随着飞机的升高与前行，越来越多新奇的光景进入到了我的视野之中，吸引力我的全部注意力。到了云层之上后，则是有些恐高，但景色的期待，促使着我去承受恐惧，注视着这罕见的景色。整个过程我的心情十分多变，等待飞机起飞时的无聊，起飞时看到光景的惊喜，调整机翼的不适，进入云上世界时的惊叹，身居高空的恐惧，全都混杂在了一起。云层上的世界宛如纪录片中的南极大陆，到处都是雪堆，一片雪白，只是不曾见到岿然不动的冰山。而我则乘坐着巨大的铁鸟在这雪地之上翱翔，经过漫长的飞行后终将穿透雪地，到达地下的文明都市。待孩子般的热情散去后，迎来的景象则是漫无止境的雪白，这样的重复终有厌倦之时，这一刻来到的时候按下了世界音频的开关，一切变的那么寂静，飞机的轰鸣声消失的无影无踪。此时再次向窗外看去，在这样宁静又充满了铺天盖地的雪白的世界中前进，显得格外孤寂。</p><p>看了飞机上的视角，我狠狠的种草了无人机，但是国内这个管控不明不白的，尤其是北京根本不能飞，只能打消了念头。</p><p>机上非常豪华的飞机餐，让我产生了所有飞机的午餐都是这样的错觉。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/E15EE019-CD1B-48BE-B793-78A66F38F5DA_1_105_c.jpeg"                      alt="E15EE019-CD1B-48BE-B793-78A66F38F5DA_1_105_c.jpeg"                ></p><p>下午飞机到达了广州</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/606519B7-A9AE-4248-BC89-2D89CAB32275_1_105_c.jpeg"                      alt="606519B7-A9AE-4248-BC89-2D89CAB32275_1_105_c.jpeg"                ></p><p>坐地铁到了酒店附近的站后，发现这里有一条街都是吃喝玩乐，在北京简直不敢想象有这样的地方，我不由得幻想起了住在这样城市的生活，但没多久便被热浪打醒，实在不能接受这里炎热的气候。</p><p>到酒店放下行李后在周围逛了逛，没多久下起了雨，伞放在酒店的我只好匆匆跑回酒店，趴在床上休息等待朋友赶来一起吃晚饭。</p><p>久违的相见，彼此都为对方的差异感到惊讶，晚上吃了陈记顺和的牛肉火锅。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/E35CABAC-E92D-4230-8284-F37F41DF7D15_1_105_c.jpeg"                      alt="E35CABAC-E92D-4230-8284-F37F41DF7D15_1_105_c.jpeg"                ></p><p>随后在周围的地方开始压马路，其中走到一家奶茶店，他强烈建议我尝一下苦瓜柠檬茶</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/E867CA92-7366-4983-AF43-24D79171CC7F_1_105_c.jpeg"                      alt="E867CA92-7366-4983-AF43-24D79171CC7F_1_105_c.jpeg"                ></p><p>虽然初见以为是邪教，但是实际喝了以后并没有想象中的那么苦，柠檬与糖的味道还是主体，加入了一点苦瓜汁，以及苦瓜碎片。之后一路上聊了很多，一直走到了十一点半才散伙，我拖着疲惫的身躯回到了酒店，等我洗漱完要入睡的时候已经是凌晨2点了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>第二天醒来已经是十一点了，而朋友也是大概这个点醒了联系我，在匆忙洗漱后我就前往午餐的目的地：银记食府。到达后已经到了十二点，到了楼下就听到了楼上排队取号的声音，我匆匆上去取号，发现前面还有90桌，只好在楼下闲转。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled.png"                      alt="Untitled"                ></p><p>等待些许时间后朋友也赶过来了，遂找了家咖啡店坐了一会，饿到不行的我提前点了个样子奇怪的慕斯，但味道还不错。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/C6E82D19-B44D-485D-BC8F-15C5298FD20A_1_105_c.jpeg"                      alt="C6E82D19-B44D-485D-BC8F-15C5298FD20A_1_105_c.jpeg"                ></p><p>等待两个小时以后便是久等的中午的“早茶”。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/37ABAE37-053E-4C0A-9D2B-C6D8A4FA0A31_1_105_c.jpeg"                      alt="37ABAE37-053E-4C0A-9D2B-C6D8A4FA0A31_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/EE262937-D3E5-45C4-9F32-0B1FABF36556_1_105_c.jpeg"                      alt="EE262937-D3E5-45C4-9F32-0B1FABF36556_1_105_c.jpeg"                ></p><p>吃饱后到了上下九步行街，点了现切的果捞，加了酸梅粉。广州这里果捞是真的多，到处都是，不过我们点的这个果捞满多水果感觉都不是很熟，水果的味道一般，猕猴桃又涩又硬，菠萝非常酸，加上我们吃早茶吃的很饱，也就只吃下了一部分。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/81897222-551F-413E-83FF-C5D8AAF5E440_1_105_c.jpeg"                      alt="81897222-551F-413E-83FF-C5D8AAF5E440_1_105_c.jpeg"                ></p><p>随后沿着步行街走，到了永庆坊，逛了粤剧院，走的时候还看到了绿色的kfc</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/5A74FDC3-F812-4386-B806-42BFFE44E2EE_1_105_c.jpeg"                      alt="5A74FDC3-F812-4386-B806-42BFFE44E2EE_1_105_c.jpeg"                ></p><p>到了傍晚我们赶到了珠江夜游的码头周围，找了个星巴克休息了一下，我则是直接趴在桌上睡了一阵。</p><p>即便是晚上广州也是十分炎热，在船顶多少能感受到一些微风，两岸的夜景吸引了我的全部注意力，拿起了相机进行一个疯狂的连拍。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/81D0EF9A-B3B9-4C6F-A958-7143FB348C10_1_105_c.jpeg"                      alt="81D0EF9A-B3B9-4C6F-A958-7143FB348C10_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/3FEBD70D-A8DA-4F89-ABCA-9386243198F5_1_105_c.jpeg"                      alt="3FEBD70D-A8DA-4F89-ABCA-9386243198F5_1_105_c.jpeg"                ></p><p>当经过广州塔的时候，不仅是我，还有许多游客举起了自己的设备连忙拍照。拍广州塔比较头疼的一点是船靠近的时候塔上各种广告，很难拍出一个纯粹的广州塔。</p><p>珠江夜游结束后我们沿着路边压马路边聊天，走到了一个商场附近的时候，朋友因为身体不适要先打车走，而我则是继续走到了一条小吃街，买了一堆小吃后回到了酒店</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/E808EB01-97E6-4A45-8B8E-0F0D677342BF_1_105_c.jpeg"                      alt="E808EB01-97E6-4A45-8B8E-0F0D677342BF_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/7B3F31EF-CB41-4038-BE24-013D17AC68B5_1_105_c.jpeg"                      alt="7B3F31EF-CB41-4038-BE24-013D17AC68B5_1_105_c.jpeg"                ></p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>第三天醒来便前往了石室圣心大教堂 ，只可惜周一并没有开门，在门口拍了照片留个纪念</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/8B0240CE-9CC9-489A-A054-56F2A7D9CBED_1_105_c.jpeg"                      alt="8B0240CE-9CC9-489A-A054-56F2A7D9CBED_1_105_c.jpeg"                ></p><p>之后直接前往一个有名的商场随便转转，拍了几张照片，商场内部的设计还是比较好看的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/3485304D-7B8C-4A85-8353-37FBF0EAA390_1_105_c.jpeg"                      alt="3485304D-7B8C-4A85-8353-37FBF0EAA390_1_105_c.jpeg"                ></p><p>之后准备到楼顶拍照。在坐电梯上楼的时候，周围都是上了年纪的本地人，全程都在用粤语交流，仿佛到了外国一样。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/67883B62-2CB9-4753-AF21-EC3C4683EA65_1_105_c.jpeg"                      alt="67883B62-2CB9-4753-AF21-EC3C4683EA65_1_105_c.jpeg"                ></p><p>中午到了广州塔附近的珠江新城约见了一名网友，下午则是沿着珠江新城走到了海心沙，路上也是边走边拍，可惜并没有收获什么太好看的照片。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled%201.png"                      alt="Untitled"                ></p><p>等到下午五点多和某个知名小波奇约到了饭！也是非常美味的一餐</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/68916131-5158-4D1B-AAA0-C7364DA5F751_1_105_c.jpeg"                      alt="68916131-5158-4D1B-AAA0-C7364DA5F751_1_105_c.jpeg"                ></p><p>随后一起在周围转了转，聊聊天，分别后我便前往了广州塔。到了目的地后，一路上到了室外的观光出，到摩天轮的位置犹豫了半天要不要上去坐，由于比较恐高，纠结再三以后还是放弃了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/D4CDFA5B-F2CC-4BF7-84FC-2DB0B44FBE1A_1_105_c.jpeg"                      alt="D4CDFA5B-F2CC-4BF7-84FC-2DB0B44FBE1A_1_105_c.jpeg"                ></p><p>刚准备好开始拍照，结果遇到雨天，所有游客只能到塔内的观光区。此时的我感到无奈又气愤，心情十分低落，但也没有办法，只能不耐烦的在室内走了一圈又一圈，看着网上的雷电预测，认为还是有机会重新开放。在等待接近两个小时后，雨停了，室外也终于开放了，而我则第一个冲上了最高层的位置。顶上的风比下面坐摩天轮的位置要大许多，仿佛要被吹飞，但此时在拍照面前这些事情都无关紧要了。要做的只有拿出相机咔咔咔一顿狂拍，看到拍到的结果后感叹等待是非常值得的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/AB8ED7C0-C2E7-4007-AE01-17B973B2E2CB_1_105_c.jpeg"                      alt="AB8ED7C0-C2E7-4007-AE01-17B973B2E2CB_1_105_c.jpeg"                ></p><p>最后十分兴奋的拍到了十点多才结束，之后便是赶回酒店的旅程。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>早上略早的爬了起来，在路上看到鲍师傅糕点店便买了一些来品尝味道</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/8A5E4BC9-DB0B-482F-80A6-B1DEA57A684F_1_105_c.jpeg"                      alt="8A5E4BC9-DB0B-482F-80A6-B1DEA57A684F_1_105_c.jpeg"                ></p><p>另外找了一家店买了一些特产食物寄回了家里，最后在回去前找了家肠粉店尝尝味道。味道非常香，但是香油的量也很大，吃多了比较容易腻。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/9A76D528-BFCF-4E61-999F-182290109757_1_105_c.jpeg"                      alt="9A76D528-BFCF-4E61-999F-182290109757_1_105_c.jpeg"                ></p><p>吃饱喝足后便退房前往下一个城市</p><h1 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h1><h2 id="一-1"><a href="#一-1" class="headerlink" title="一"></a>一</h2><p>深圳离着广州非常近，因此很快就到了，列车途中的风光也是非常不错，到处都是翠绿的树林，远比北方来的要好看。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled.jpeg"                      alt="Untitled"                ></p><p>由于坐在了没什么人的车厢，一路上到处换位置隔着列车的窗户拍照。</p><p>到达了酒店附近，这个地铁站的位置非常有意思，叫做翻身，似乎是农民翻身因此起这个名字，在酒店也看到了有趣的牌子</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/7B72F8DB-21C1-46D4-AEBB-3F8F3C97024E_1_105_c.jpeg"                      alt="7B72F8DB-21C1-46D4-AEBB-3F8F3C97024E_1_105_c.jpeg"                ></p><p>纯智能家居的酒店，最初我还有些不习惯喊小爱（Apple生态的Siri我也一直都是禁用的），但是后来忍着羞耻喊了几次，渐渐懒惰成性，开窗开灯全交给小爱解决了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/C3153AAA-E3B9-4B97-9CD5-CF6D36B9B54A_1_105_c.jpeg"                      alt="C3153AAA-E3B9-4B97-9CD5-CF6D36B9B54A_1_105_c.jpeg"                ></p><p>在前往晚上吃饭的店店路上，顺路到了大疆的天空之城逛了一下，拍了一些照片（虽然都是废片）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/702064E4-C0FE-4206-B55E-1B73CBD2711F_1_105_c.jpeg"                      alt="702064E4-C0FE-4206-B55E-1B73CBD2711F_1_105_c.jpeg"                ></p><p>在楼下还有许多在戴着工牌抽烟的员工。拍照的时候还被保安很友好的提醒注意安全，另外提醒我不要拍到产品。</p><p>之后赶往了和朋友约吃饭的位置</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/3339A09A-D659-4272-8F28-DEFEA4F5B043_1_105_c.jpeg"                      alt="3339A09A-D659-4272-8F28-DEFEA4F5B043_1_105_c.jpeg"                ></p><p>在回去之前选择了先到海边玩一会。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/76656214-5C1D-42AE-94AA-34FABC0DA601_1_105_c.jpeg"                      alt="76656214-5C1D-42AE-94AA-34FABC0DA601_1_105_c.jpeg"                ></p><p>买了一杯饮品，坐在海边吹着海风，什么都不做什么都不想，只是看着对岸的风景，非常惬意，有多久没这样放松过了呢？</p><p>还顺路去看了钟书阁，书店内部的装饰十分有特点，也有许多人特地在这边拍照。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/DSCF7965.jpg"                      alt="DSCF7965.jpg"                ></p><h2 id="二-1"><a href="#二-1" class="headerlink" title="二"></a>二</h2><p>第二天略早爬了起来，去了世界之窗。在世界之窗的游玩算是比较快乐的，租借了一辆代步车，在景区到处“飙车”，节省了我的体力，并且吹着迎面而来的风，十分惬意。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/2B43E282-1560-494E-AA3F-75F4D95C7FDB_1_105_c.jpeg"                      alt="2B43E282-1560-494E-AA3F-75F4D95C7FDB_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/F59764DB-C276-4B79-B26B-DC8E28943E2A_1_105_c.jpeg"                      alt="F59764DB-C276-4B79-B26B-DC8E28943E2A_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/C7772C2D-5BBC-4964-A0FE-59CA52F5F64D_1_105_c.jpeg"                      alt="C7772C2D-5BBC-4964-A0FE-59CA52F5F64D_1_105_c.jpeg"                ></p><p><del>天冠山</del></p><p>玩完后回去美美的睡了一个午觉，之后和一个朋友约定了晚上吃饭的时间以及集合地点，而我则是先到了附近去踩点，随后返回地铁站集合，然后打车去了商场，美美的吃了一顿自助，聊了很多</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/812AF339-061D-4629-AB83-CE2943AFD461_1_105_c.jpeg"                      alt="812AF339-061D-4629-AB83-CE2943AFD461_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/72AA8A23-245C-41A7-9089-5C521BB14193_1_105_c.jpeg"                      alt="72AA8A23-245C-41A7-9089-5C521BB14193_1_105_c.jpeg"                ></p><p>在这之后先是一起赶往目标地点去拍照。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/361FEE1C-8F04-440E-B6FD-520DADBE92C0_1_105_c.jpeg"                      alt="361FEE1C-8F04-440E-B6FD-520DADBE92C0_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/5910BC95-5966-42EC-AA5B-94B735DA1F83_1_105_c.jpeg"                      alt="5910BC95-5966-42EC-AA5B-94B735DA1F83_1_105_c.jpeg"                ></p><p>以上两张图中，第一张是我看到的作品，想要进行复刻机位，第二张是我实际拍的效果，虽然和实际的偏差很多，但我个人还是挺满意的，最近比较喜欢这种漆黑的背景加上带有灯光的建筑。随后我们一路压马路，走到了前一天我去的海边，坐在那里无所事事的吹海风，闲聊。</p><h2 id="三-1"><a href="#三-1" class="headerlink" title="三"></a>三</h2><p>第三天早上起来便直接前往机场，在安检的时候还出了点小插曲，告诉我六角扳手不允许带，在我一番劝说的情况下还是允许我带了。没有六角扳手的话晚上的拍摄活动可能就要白给了。</p><p>后来上了飞机，这次的飞机餐远远不如上一次，挑食的我吃了几口就放弃了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/9A42B13C-0A1A-4477-AEFA-B407703E8693_1_105_c.jpeg"                      alt="9A42B13C-0A1A-4477-AEFA-B407703E8693_1_105_c.jpeg"                ></p><h1 id="上海"><a href="#上海" class="headerlink" title="上海"></a>上海</h1><h2 id="一-2"><a href="#一-2" class="headerlink" title="一"></a>一</h2><p>刚下飞机，被上海浦东机场所惊讶到，真的好大，同时由于是假日的前一天，人也开始多了起来。经过非常久的路程后终于到了换乘列车的站台，第一次体验了磁悬浮列车。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/CB97588F-5498-4632-818B-8AFB9BA1D10C_1_105_c.jpeg"                      alt="CB97588F-5498-4632-818B-8AFB9BA1D10C_1_105_c.jpeg"                ></p><p>列车的速度非常快，在路上拍照的时候还没反应过来就已经到了目的地。趁着列车在等其他乘客的时候也是一顿大拍特拍。</p><p>之后换乘地铁期间和上海的一个同事联系，他问道要不要顺路去公司碰个面，我吐槽道：“去公司看你们上班吗？“</p><p>到了酒店收拾了下东西后就匆忙赶往东方明珠了，毕竟是节假日前最后一天，人会少很多，事实上也确实如此。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/33A5EEA1-ECE2-40E0-B6CA-C7543047F275_1_105_c.jpeg"                      alt="33A5EEA1-ECE2-40E0-B6CA-C7543047F275_1_105_c.jpeg"                ></p><p>东方明珠上可怕的悬空走廊，不敢上去走，还有在这里拍视频做俯卧撑的人</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/9A367096-A38E-4C19-8653-62CD14AD2525_1_105_c.jpeg"                      alt="9A367096-A38E-4C19-8653-62CD14AD2525_1_105_c.jpeg"                ></p><p>在东方明珠上选了个机位，大概会有月亮经过某个建筑，但是近日上海的天气真的是非常的差，月亮全部被乌云遮住了，因此只能作罢。</p><p>随后去了楼下的可口可乐欢乐餐厅，这家餐厅非常长，从一头走到另一头要很久，而我恰好被安排在了靠近门口的位置，就十分尴尬。不过真不愧是可口可乐餐厅，可乐非常的冰，喝起来非常的爽快，可以说是很懂了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/67803804-5CA9-467D-B22E-FE4D657047BD_1_105_c.jpeg"                      alt="67803804-5CA9-467D-B22E-FE4D657047BD_1_105_c.jpeg"                ></p><p>吃饱喝足后走到了陆家嘴三件套这里，之前在小红书上看到了这个机位，觉得很有意思想来看看。但是比机位更有意思的是这里充满了来打卡拍照的人，也许是在小红书上实在太火了，大家都来这里拍照了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/DA74CB2A-D9FE-41FF-953E-88344034E743_1_105_c.jpeg"                      alt="DA74CB2A-D9FE-41FF-953E-88344034E743_1_105_c.jpeg"                ></p><p>之后去向了江边，对面就是外滩，金碧辉煌的建筑在漆黑的夜晚中显得格外漂亮，甚至觉得这里看过去的风景比外滩看向陆家嘴更好看。忍不住在这里架起了机器疯狂拍照，期间也有许多人在附近游玩拍照，也顺便帮了许多路人拍合影。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled%201.jpeg"                      alt="Untitled"                ></p><p>拍完大概已经十点半多了，十分疲劳，匆忙打了个车回到了酒店。</p><h2 id="二-2"><a href="#二-2" class="headerlink" title="二"></a>二</h2><p>早上早早起来，到了外滩的位置，但是雾特别大，很难说拍出什么好看的照片，因此选择了直接吃午饭。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/EE5F85B3-8762-47B7-9504-981A48B14397_1_105_c.jpeg"                      alt="EE5F85B3-8762-47B7-9504-981A48B14397_1_105_c.jpeg"                ></p><p>犹豫吃什么的时候看到了蟹黄面的推荐，店铺找了半天。味道还可以，猪排也非常的嫩。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/03576787-06B1-44D2-9CAE-BC8FF302E513_1_105_c.jpeg"                      alt="03576787-06B1-44D2-9CAE-BC8FF302E513_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/B2E9C8CF-EBA7-4640-9C1E-A517609B95E8_1_105_c.jpeg"                      alt="B2E9C8CF-EBA7-4640-9C1E-A517609B95E8_1_105_c.jpeg"                ></p><p>回去休息了好久，顺便找了下机位，四点左右就提前出发踩点。随便拍了些外景，六点多开始拍月亮，但是天气差的缘故一直在担心能不能拍到月亮。在我焦急等待的时候一个小哥来到旁边，问我是在拍什么，向他询问才得知他在小红书上找到这个机位，恰巧在我找到的位置，也就因此一直拍着月亮了。尽管月亮迟迟没有出来，但最后还是拍到了穿过东方明珠的瞬间。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled%202.png"                      alt="Untitled"                ></p><p>由于担心刚天黑的时候看不到月亮，因此还安排了另一个机位，随后我就和这位小哥一同前往准备再拍一波。到了目的地后周围人也是非常多，不过选的位置人相对较少一点，也算比较方便拍照。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/1C2F900C-3B86-466B-BA2C-81C03A43DC6C_1_105_c.jpeg"                      alt="1C2F900C-3B86-466B-BA2C-81C03A43DC6C_1_105_c.jpeg"                ></p><p>拍完月亮后我也挤入了外滩的人群中，准备拍一下带有月亮的陆家嘴夜景。周围大多都是来拍照打卡的旅客，人非常多，还时不时有游客让我帮忙拍照。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/DSCF8722.jpg"                      alt="DSCF8722.jpg"                ></p><p>陆家嘴的夜景，还没修图调整，可以看到雾气还是比较大的</p><p>后来去拍了外白渡桥</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../Downloads/d7511a47-df89-42e4-8bcb-9ac4a6365c51_Export-7dacecbd-e5df-4c65-9673-3dbc5f452139/%25E5%2588%259D%25E6%25AC%25A1%25E6%2597%2585%25E8%25A1%258C%2520b4f8e8320314407b8816b744e0ac7bbd/%2525E5%2525A4%252596%2525E7%252599%2525BD%2525E6%2525B8%2525A1%2525E6%2525A1%2525A5_-_01.jpg"                      alt="外白渡桥 - 01.jpg"                ></p><p>为了消除掉来往的行人，需要在这里拍多张叠加。等待自动拍照的时候周围有着形形色色的人，有行动不便坐着轮椅的人，有在和家里通话的人，有结伴而行的情侣，有坚守岗位的交警，有和睦的一家人，有发小红书的中年大叔。</p><p>拍完已经十点半了，也没吃晚饭，吃的太贵，后来买了一个小生煎，又坑又不好吃，店家的态度也比较差，吃的也忘了拍照。</p><h2 id="三-2"><a href="#三-2" class="headerlink" title="三"></a>三</h2><p>起床洗漱后就赶往海底捞和网友们面基</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/D82DB44D-AA4A-4738-A93B-3977C6FDDF12_1_105_c.jpeg"                      alt="D82DB44D-AA4A-4738-A93B-3977C6FDDF12_1_105_c.jpeg"                ></p><p>下午则是一波City walk，一起走到了外滩，邮政博物馆，苏州湾，老垃圾桥。途中下起了雨，找了一个商场的奶茶店聊天避雨。</p><p>晚上到了一个商场闲逛，商场里意外的充满了许多二次元元素，还有许多的coser，真不愧是上海啊，之后到了楼顶还看到了晓美焰的cos。</p><p>晚餐吃了生煎</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/B3A28CF8-E3B5-4F58-9877-60C26F9A4002_1_105_c.jpeg"                      alt="B3A28CF8-E3B5-4F58-9877-60C26F9A4002_1_105_c.jpeg"                ></p><p>随后在商场里又转了一圈，面基活动算是结束了。而我则是顺路去豫园转了一圈</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled%203.png"                      alt="Untitled"                ></p><p>冰沙，喝完第二天拉肚子…</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/EF3E35BF-E505-4889-90E4-CA6DBE9B39EB_1_105_c.jpeg"                      alt="EF3E35BF-E505-4889-90E4-CA6DBE9B39EB_1_105_c.jpeg"                ></p><h2 id="四-1"><a href="#四-1" class="headerlink" title="四"></a>四</h2><p>早上睡到了很晚才起，收拾好东西下楼退房已经是11点59了。之后前往新酒店的路上实在饿，路边找了家店吃了点东西，一个小馄饨加一笼烧卖60，这两天都在外滩这附近，之前看到的东西价格都是类似的，以为上海都是这个价格，也就吃了，但事后才知道原来被宰了…</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/9E6941F6-E105-446D-8F84-AB2F13DC3858_1_105_c.jpeg"                      alt="9E6941F6-E105-446D-8F84-AB2F13DC3858_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/D31E6BF8-20C5-4508-8858-79B71EE24F8B_1_105_c.jpeg"                      alt="D31E6BF8-20C5-4508-8858-79B71EE24F8B_1_105_c.jpeg"                ></p><p>酒店</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/F5E46D5C-CD01-42DF-A93C-1498F9E6DCD8_1_105_c.jpeg"                      alt="F5E46D5C-CD01-42DF-A93C-1498F9E6DCD8_1_105_c.jpeg"                ></p><p>下午朋友喊我去卡拉OK，但我实在无法忍受里面的高音量以及接受不了自己唱歌，还是拒绝了。休息了好久，到了外面的世纪公园转了转，散散心还是比较舒服的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/B0C88E33-6A75-41B4-B94E-875CD6E77C2A_1_105_c.jpeg"                      alt="B0C88E33-6A75-41B4-B94E-875CD6E77C2A_1_105_c.jpeg"                ></p><p>傍晚则是赶去和高中同学约了一波饭。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/68F02D47-7184-411C-BB75-3EEABCA34A7F_1_105_c.jpeg"                      alt="68F02D47-7184-411C-BB75-3EEABCA34A7F_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/22777C67-DD9C-4A38-A83F-2BC5BC35F05F_1_105_c.jpeg"                      alt="22777C67-DD9C-4A38-A83F-2BC5BC35F05F_1_105_c.jpeg"                ></p><p>在回去的地铁站到处都是人</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/62E5B530-2D67-4756-97C7-C63920F6CDAB_1_105_c.jpeg"                      alt="62E5B530-2D67-4756-97C7-C63920F6CDAB_1_105_c.jpeg"                ></p><p>由于前两天拍的外滩全景有很多问题，因此决定重新拍，晚上又是去陆家嘴周围的江边一顿忙碌。</p><p>晚上回去后在酒店的浴缸里泡了一阵子，很是惬意。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/67A7D809-3D41-4DB4-94B6-39E5832FAF10_1_105_c.jpeg"                      alt="67A7D809-3D41-4DB4-94B6-39E5832FAF10_1_105_c.jpeg"                ></p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>这一天起床已经快十二点了，准备去和网友面基吃饭。到了目的地后由于太晚一些吃饭的地方已经暂时关门了，因此走到了略远的一家店，味道还挺不错。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/AF2AE1B7-B340-4E76-B36E-3CFF49B6A63A_1_105_c.jpeg"                      alt="AF2AE1B7-B340-4E76-B36E-3CFF49B6A63A_1_105_c.jpeg"                ></p><p>下午也是City walk，听推友讲了好多有趣的事情，之后到了鸢尾书店，这家书店里有一些奇怪的营销书。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/12951DA2-D883-44B8-AB75-E33937000039_1_105_c.jpeg"                      alt="12951DA2-D883-44B8-AB75-E33937000039_1_105_c.jpeg"                ></p><p>晚上和同事约了饭，是一家越南菜，感觉还可以</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/6CC50083-7408-4D2E-B43D-F710E9170487_1_105_c.jpeg"                      alt="6CC50083-7408-4D2E-B43D-F710E9170487_1_105_c.jpeg"                ></p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><p>收拾好东西后出发到火车站，在车站周围的饭馆和一位网友面基，随后则是一起到了火车站。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/8067618C-1CC9-4257-99F5-59027AAF815F_1_105_c.jpeg"                      alt="8067618C-1CC9-4257-99F5-59027AAF815F_1_105_c.jpeg"                ></p><h1 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h1><h2 id="一-3"><a href="#一-3" class="headerlink" title="一"></a>一</h2><p>下午到了杭州，由于第一次住民宿没有经验，费半天劲才找到</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/8B34023F-EF13-4127-BDB9-3F720686CE5A_1_105_c.jpeg"                      alt="8B34023F-EF13-4127-BDB9-3F720686CE5A_1_105_c.jpeg"                ></p><p>之后去和一个网友汇合逛了一圈，不得不说国庆节的杭州人是真的多</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/00F8B6E2-3FCB-4377-90CE-C1AB8A84DB53_1_105_c.jpeg"                      alt="00F8B6E2-3FCB-4377-90CE-C1AB8A84DB53_1_105_c.jpeg"                ></p><p>晚上我们和另一个推友汇合，约了一家餐馆吃饭，感觉菜品口味略咸</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/754FB73D-207F-49FB-829B-6B9057BD50B4_1_105_c.jpeg"                      alt="754FB73D-207F-49FB-829B-6B9057BD50B4_1_105_c.jpeg"                ></p><p>之后三人一起转了好多地方</p><h2 id="二-3"><a href="#二-3" class="headerlink" title="二"></a>二</h2><p>中午起，下午和推友一起逛城市阳台附近，玩了刮刮乐，晚上和一群人面基</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/31F1AA37-CC3E-4062-8ACB-F3839BEDA16E_1_105_c.jpeg"                      alt="31F1AA37-CC3E-4062-8ACB-F3839BEDA16E_1_105_c.jpeg"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/DB7A1188-1534-4DD9-BAAD-D256AB678E34_1_105_c.jpeg"                      alt="DB7A1188-1534-4DD9-BAAD-D256AB678E34_1_105_c.jpeg"                ></p><p>M属性大爆发！</p><p>散了以后之后去文化中心拍照，但周围的景观灯都已经灭掉了</p><h2 id="三-3"><a href="#三-3" class="headerlink" title="三"></a>三</h2><p>早上四点半起，去拍没人的西湖</p><p>在等待拍照的过程中，周围其实已经有一些来来往往的人了，有的是游客，有的是晨练的大爷大妈</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/Untitled%202.jpeg"                      alt="Untitled"                ></p><p>最后拍出来的效果比较一般。走的时候已经6点左右了，但没想到桥上已经全都是人</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/F4F288B6-88C4-44CA-A590-5C12F8FC7BAA_1_105_c.jpeg"                      alt="F4F288B6-88C4-44CA-A590-5C12F8FC7BAA_1_105_c.jpeg"                ></p><p>随后找了家店吃了点小馄饨，回去继续睡觉了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/311CFEE7-4FDD-4FD6-954D-4A0568DDD5AF_1_105_c.jpeg"                      alt="311CFEE7-4FDD-4FD6-954D-4A0568DDD5AF_1_105_c.jpeg"                ></p><p>中午十二点起，下楼买洗衣液以及买点午饭，回来吃饭，洗衣服，玩switch，看视频，午睡</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/4A04AECA-56F5-4AD4-92A3-0F7E17770DB6_1_105_c.jpeg"                      alt="4A04AECA-56F5-4AD4-92A3-0F7E17770DB6_1_105_c.jpeg"                ></p><p>快黄昏了爬起来去拍钱塘江对面的夜景，这里有一个灯光秀，所以有非常多的人，好在前面有栏杆挡住围观群众，我可以放心的把机器放到前面拍</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/C008E6FD-E018-4894-9948-3DDA9D26508D_1_105_c.jpeg"                      alt="C008E6FD-E018-4894-9948-3DDA9D26508D_1_105_c.jpeg"                ></p><p>晚上拍文化中心的夜景</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/E4CCAF3D-B1C6-4A8F-9E89-37668756B044_1_105_c.jpeg"                      alt="E4CCAF3D-B1C6-4A8F-9E89-37668756B044_1_105_c.jpeg"                ></p><p>回来到夜市逛，钓鱼，买吃的，钓鱼的过程我总觉得自己才是被店家钓到的鱼。旁边一个小哥也是在钓鱼，但是苦于一直没上钩，和他同行的人一直在催促他回去，他想要钓上了再走，但是最后还是被同行者拖走了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/666AEFFF-CFF1-4495-9F74-664DB0317E39_1_105_c.jpeg"                      alt="666AEFFF-CFF1-4495-9F74-664DB0317E39_1_105_c.jpeg"                ></p><h2 id="四-2"><a href="#四-2" class="headerlink" title="四"></a>四</h2><p>起床后收拾东西直接赶往了火车站，吃了碗面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/first-travel/11F4FB54-03C0-4A59-AF23-976A1BE78D28_1_105_c.jpeg"                      alt="11F4FB54-03C0-4A59-AF23-976A1BE78D28_1_105_c.jpeg"                ></p><p>由于肠胃不舒服也就没有心情写一些游记之类的内容，只好玩了会switch打发时间，直到上车回家，这为期半个月的旅行也就彻底结束了。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>这半个月大部分时间比我预想的要忙碌得多，几乎每天不是在奔波拍照，就是和网友面基，晚上也都是很晚的时候拖着异常疲惫的身躯回到了酒店，很少会有像一开始坐飞机时那种闲情逸致去思考，去用尽心思记录下自己的想法和感受。所以本文的内容几乎是记录了一堆流水账，以及很多都是过后补全的，也导致内容风格十分分裂。但是看着这些照片和行程的记录，仍然有一种旅行的过程历历在目的感觉，这也就足够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文作为流水帐般的游玩记录，多图杀猫。如果你对我旅行前后的想法有兴趣那请访问这篇文章&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://homura.live/2023/11/05/Life/travel-meditations/&quot; &gt;https</summary>
      
    
    
    
    <category term="Life" scheme="https://fusionbolt.github.io/categories/Life/"/>
    
    
    <category term="Travel" scheme="https://fusionbolt.github.io/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>25</title>
    <link href="https://fusionbolt.github.io/2023/08/23/Life/25/"/>
    <id>https://fusionbolt.github.io/2023/08/23/Life/25/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2023-08-22T16:19:15.908Z</updated>
    
    <content type="html"><![CDATA[<p>25在我眼里是一个略微规整的数字，是5的平方，是75的三分之一，是一百的四分之一，乘二就能凑满一个十，同时又是一个奇数。不过对此时的我来说，比起数学上的意义，更重要的是年龄上的意义，大家都开玩笑说到了25就该奔三，现在我也到了这个时候了。</p><p>关于年龄这个事情，我觉得继续持续增长也挺好的，因为年龄增长的同时自己所能做到的事情也更多了，不论是知识，人际关系，还是金钱，不出意外在这个阶段都是处于上升的期间。只是如果带着回忆回到过去，那我很大概率会选择回去的，在过去的25年里，不知道做了多少错误的事情，其中还有一些是不可挽回的，但事已至此，我也不会再去计较那么久远的自己。</p><p>不过比起身体的年龄，人格，精神上的年龄似乎更加重要。在这方面我远比周围人开始成长的要晚，大概在18岁左右才开始从一个听到什么做什么的人，只会听从本能的人，到开始产生想法与思考，渐渐成为了现在这个样子。我不知道该如何客观的评价现在的自己，只是有一点可以肯定的，我在不断的改变，尤其是克服了许多缺点，许多不良想法。前些时间写的自我介绍或许算是自我评价的一部分吧，在这里也不再重复描述现在的自己了</p><p><a class="link"   href="https://homura.live/2023/07/02/Other/dissuasive-self-presentation/" >https://homura.live/2023/07/02/Other/dissuasive-self-presentation/<i class="fas fa-external-link-alt"></i></a></p><p>我承认总体有些偏向负面的评价，不过有一点我还是可以认同自己的，着已经远比最初意识觉醒的自己要好很多。过去对我刚开始产生想法时的不良影响还是很大的，不过这些影响已经随着我的改变逐渐减少，尽量克服也是我在未来要做的工作。</p><p>对于这个年龄有一个比较难绕过去的问题：亲密关系，或者更直接地说是恋爱。正巧昨天是七夕，下班路上看到有人在地铁口卖花，生意也不错，路上也有许多情侣。对于寻求亲密关系的我来说，很难不羡慕。我对爱情的渴求，不仅是因为自己是母单，在我变化的过程中，渐渐觉得情感，甚至是爱情是我特别重视的部分。我喜欢魔法少女小圆中圆焰的爱，喜欢利兹与青鸟中霙与伞哥哥的爱，在我意识到这些之前，就已经被焰这个角色对于圆的炽热爱意所吸引，只是近一两年才真正认识到自己的这部分。焰在叛逆的物语中有一句让我印象深刻的台词：</p><blockquote><p>比希望更炽热，比绝望更深邃的，是爱啊</p></blockquote><p>或许只有接近完美的爱，才能达到这种情感的极致，我甚至觉得这种体验是对于我这样情感匮乏的人是必需品。在过去半年我在推特上发了许多自身对这种情感需求很强烈的内容，不过现在这种事情已经自认无缘了，不太想多挣扎了，现在也已不再去发这些内容，虽然有些遗憾，但是也没办法。</p><p>另外我和众多这个年龄的人一样，对人生感到迷茫。虽然我有在做一些事情，但我不能确定自己喜欢什么，想要做什么，要如何做出选择，等等。也有一些事情确实妨碍了我的探寻，无法治愈的抑郁和焦虑环绕着我，经常因此无法行动，甚至对自己的无能，对自己面对的一切感到绝望，因此我开始有些无法判断自己不做某件事情的原因，到底是因为什么。不过随着我对自身感受更多的关注，逐渐能够意识到一些东西并不是我真正所想的，只是被环境胁迫，被自己胁迫，才不得不做的事情。</p><p>这一切都是在面对抑郁和焦虑中查找资料与自身感受逐渐习得的，我无法等待一切痊愈后再去探寻，因为或许永远无法痊愈，不可能等到准备完全的时刻再上场，准备完全也是不存在的。我只能去试着读书，或者看他人的文章，学习他人的经验。在这个过程中，我看到了自身想法的真相，看到了焦虑小人，抑郁小人后面真正的自己，看到了自己内心更深处的需求，自己用着如何扭曲的形式将这些表现出来，这些表现是如何干扰我去了解自己的。（不论怎么说我还是希望这些疾病从未缠绕过我，即便带给了我部分成长，但在我痊愈之前我很难完全接受）。这个过程，或许也可以被称为追寻自我，喜好、想做的事情，其实都是自我的一部分。</p><p>纵使我再迷茫，在上述的探索过程中我也发现了很多关于自我深处的片段。自己对精神层面的追求，包括但不限于情感、道德与自我的完善。我想沿着这些走下去的话，迟早有一天会破除迷茫吧。而这一切，我认为都是从我决定开始独立思考，开始探寻的时候就埋下了种子，我在思考，形成自己的独立意见，输出观点的过程都是在给种子浇水施肥，直到现在这个时间，总算发了一个小芽。另外这个过程中也有外界的温暖阳光和风吹雨打影响着我。带给我比较大改变的也许是我2021年在推特认识的朋友，和他的交流，和他产生的连接，某种程度上也加快了自己成长的脚步，我也被他所影响，受到他许多帮助，总之十分感谢他。</p><p>在这个过程中除了有这些进展，但还有非常多未能解决的问题缠绕着自身，像前面所提到的抑郁和焦虑，我认为都是自身的这些问题未能解决的结果，不论是缺失的情感，还是自身的种种无能。这都非常困难，这几年的时间，让我把情绪的根源问题规约到了这两者上，只是已不能再继续了。我一直在解决问题的失败中重复，一直在类似的错误中重复，像焰一样徘徊在似乎没有尽头的时间迷宫，但与焰不同的是我连唯一的路标也看不到，了解自我也无法成为解决自身问题这一方面的路标。不知道自己何时才能克服这些，或许要几年，搞不好或许要几十年，或者直到我去世都未能克服未能接受。我总是期待贵人出现，给予我指点。甚至会更不切实际的想在他的帮助下一切就随之解决，但这是不可能的，他人最多给予我一个方向，最终必须要靠我自己亲自解决。</p><p>回首过去的一切，我虽然一直觉得自己运气不好，但其实我走过的路中有许多运气成分，许多地方自己真的很难想象走其他的路会有怎样的后果。过去一直觉得自己招人厌，没有人愿意帮助我，但实际上并不是有贵人指点才叫帮助，我从许多人那里以各种形式得到了帮助，也是对这些人们十分感谢。经历的一切，很难说有什么美好的事情，但已经逝去也就不必再为其痛苦。那未来呢？短期的未来或许仍然会迷茫，但仍会继续寻求自我的完善与修正，寻求自我的协调。我想这是自己在毫无意义的人生中唯一的路标，也是绝对不会错的路标。</p><p>以下是人生故事会环节，我选择将过去用文字简单写下，读者可忽略。</p><p>这种文章也难免回忆过去，那么从头讲起吧。我出生在一个算是贫困的家庭，除了能保证基本的衣食住行，其他都是奢望，大家习以为常的旅游，美食，电影，游戏机等均与我无关。之后就这样普通的上了学，在学校渐渐开始觉得被排挤孤立，当时愚笨的我根本不懂为何，都是些现在看来真的活该的原因。后来到了初中感受更加强烈，毕竟大家心智和身体都在成长，而我成长的只有身体，仍没有意识到原因，理解那些事情，已经是前几年的事情了。不过尽管如此，我也上了一个普通高中，此时也是我黑历史最多，并且最难忘却的时段，要是拿出来讲可能三天也写不完这文章了。同时这是我的第一个人生拐点，不过是往下拐。这个时候因为各种原因，包括家里接入网络，有了山寨智能手机等原因，上课睡觉，不学习，考试成绩渐渐到了底。另外高中不再是按地域划分，遇到的同学也开始不一样，现在回想起来，家境、见识、各方面真的是差的非常多，但对当时的我来说根本不懂这些事情，拿自己跟其他人比的话真的是非常丢人。不过在最后的一年想法开始产生了一些改变，迎来了我的第二个人生拐点，我到现在也没明白为什么那个时候突然就变了。尽管如此，仍然敌不过自身的无能，最后也就“顺其自然”地考上个一个专科。</p><p>后来大一下学期，听到一些同学提到知乎，我好奇的搜了下，没想到让当时的我眼界大开，虽然知乎现在很烂，但是那个时候真的是做到了让我这个井底之蛙看到更广的世界，让我愈发感受到了无能，让自觉有点小聪明的自己感受到强烈的自卑。此时开始我的焦虑就愈发严重，之后很长一段时间内都很容易沉入在类似的焦虑中，并且随着我接触的更多，这种感受越强烈，甚至几次想过“我是不是最初就不应该看到这么广阔的世界，一直当井底之蛙就好了”（不过这种感受这两年已经开始小时了）。随后专科即将毕业，我去考了一个专升本，顺利的续了接近两年学生时光。最后一年其实就开始找工作了，一直不顺利。当初想要去上海的，但是boss上投简历均石沉大海，也就没了希望。之后经过各种离奇的经历，我来到了现在的公司实习，转正，并且工作到现在，很感谢内推我的人，没有这个机会我现在很难说在哪里做什么奇怪的工作。</p><p>这就是我人生前25年的人生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;25在我眼里是一个略微规整的数字，是5的平方，是75的三分之一，是一百的四分之一，乘二就能凑满一个十，同时又是一个奇数。不过对此时的我来说，比起数学上的意义，更重要的是年龄上的意义，大家都开玩笑说到了25就该奔三，现在我也到了这个时候了。&lt;/p&gt;
&lt;p&gt;关于年龄这个事情，我</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    <category term="Life" scheme="https://fusionbolt.github.io/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>看不见的女性</title>
    <link href="https://fusionbolt.github.io/2023/08/19/Reading/invisible-women/"/>
    <id>https://fusionbolt.github.io/2023/08/19/Reading/invisible-women/</id>
    <published>2023-08-19T11:47:17.000Z</published>
    <updated>2023-08-19T11:48:01.034Z</updated>
    
    <content type="html"><![CDATA[<p>性别对立，是现在非常容易引起争议的话题。女性们普遍处于弱者的位置，当她们开始寻求自己应有的权利，而不是一直像现在这样，争论也就因为各种原因进一步变多了。那么女性的地位具体到底是怎么样的呢？我觉得这本书已经相当清晰的讲述了在世界上女性的现状，虽然因国家会有微小的不同，但是趋势都是一致的，相对于男性来说处于相当不利的位置。</p><p>即便不看书，我们在生活中也能看到许多例子，包括但不仅限于遭受各种方式的暴力，一些行业的就业歧视，另外在国内一些非常传统家庭中女性被长辈们认为不应该多读什么书，早点找个人结婚生子才是正事。这当然是非常扭曲的事情，不论是男性还是女性，都首先是一个人，在这一层面应当是被同样尊重的，<strong>在做到这个前提下</strong>接纳彼此差异，针对不同性别做一些差异化的帮助，因为躯体差异确实存在，并且也不是简单几句话就能概括的。</p><p>躯体的差异这本书中关于寻医问药的部分提及了很多，这也是让我看了感觉最不适的部分。不同性别由于身体结构的影响，同一个药物的反应可能是完全不一样甚至相反的，但药物研发的时候甚至没有针对女性做同样数量的测试，影响到人体健康不认真进行测试是比较危险且对患者不负责任的事情。此外对于患者的诊断都是基于男性为标准，也就是说中提到的“燕特尔综合征”，导致许多女性更难及时得到治疗，甚至本可以规避死亡却因为诊断的问题而无法规避。</p><p>除了寻医问药外，书中还提及了女性在日常生活，职场，所用工具的设计，公共生活，以及遇到灾难时这几种情况下女性的权益无法受到保障。许多问题的核心来源正如书的标题所讲，女性被忽视了，甚至在一些场合还会出现歧视，在招聘的时候都不愿意招聘短期内具有生育可能的员工，生育前后的休息时间让女性难以适应工作的变化。</p><p>此外社会也没有教导人们如何去应对性别的差异，使得很长一段时间内女性处于完全不公的状态。但随着互联网时代信息的快速扩散，这种不公的问题也暴露的越来越多，意识到问题的人能够将自己的想法传达给更多的人，使得目前性别地位开始有所变化。过去人类社会在很多方面几乎忽略了这百分之五十的人类，我想在历史的发展中，这样的忽略会付出许多的代价，女性和男性具有同等程度的思考能力，同时不同性别的人思维方式会有所差异，那么发展的过程中相当于抹杀了那一部分的可能性。但是当这个现状开始改变的时候，这些可能性也就慢慢涌现了出来了，或许使得社会走向不同的道路。</p><p>女性的生活实际上比我所要想的要困难，虽然我这么说，但我并没有仔细考虑过这些问题。作为一个男性能做的，或许就是像我前面所说，在尊重作为人的一面的前提下，接纳彼此的差异，同时认清并且牢记现实中被忽略的这部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;性别对立，是现在非常容易引起争议的话题。女性们普遍处于弱者的位置，当她们开始寻求自己应有的权利，而不是一直像现在这样，争论也就因为各种原因进一步变多了。那么女性的地位具体到底是怎么样的呢？我觉得这本书已经相当清晰的讲述了在世界上女性的现状，虽然因国家会有微小的不同，但是趋势</summary>
      
    
    
    
    <category term="Reading" scheme="https://fusionbolt.github.io/categories/Reading/"/>
    
    
    <category term="对立" scheme="https://fusionbolt.github.io/tags/%E5%AF%B9%E7%AB%8B/"/>
    
  </entry>
  
  <entry>
    <title>欲望</title>
    <link href="https://fusionbolt.github.io/2023/08/08/Thinking/desire/"/>
    <id>https://fusionbolt.github.io/2023/08/08/Thinking/desire/</id>
    <published>2023-08-08T14:09:56.000Z</published>
    <updated>2023-08-08T14:10:48.958Z</updated>
    
    <content type="html"><![CDATA[<p>人因欲望而前进，但又经常会因为欲望无法实现，又或者不可能实现而苦恼不已。在《诗人十四个》中有这样的一段话</p><blockquote><p>有追求，就有落空的可能。应对此事只有两种策略：一是通过觉悟认识到追求的虚幻性，从而放下我执；二是用人格和意志的力量勉力支撑，直到人生尽头。</p></blockquote><p>尽管原文是针对个人的追求，针对个人遇到的挫折与苦难，但我觉得针对欲望仍然是如此，同时还认为个人追求其实也是一种个人的欲望。要不放下自己的执念，要不就是像西西弗一样不论是否能到达终点，仍然不断前进。</p><p>此时的我正被欲望所吞噬，不论是想要变好的欲望，还是对于金钱或者爱情，但同时又因为自己无法实现其中任何一者而备受折磨。欲望是带给人前进的动力，但是当看不到前进的路时就会感到无力，但同时如果又无法放下到达目的地的执念，只会有心力被消耗。</p><p>恰巧最近还在看《瓦尔登湖》，就目前所看的部分与欲望十分贴近的观点是“简单的生活，减少被世俗欲望所影响”。在俗世中最容易被提及的则是金钱，而在书中最先提及的部分也是和金钱相关，人们为了金钱付出了太多，但是却放弃了许多其他的东西。之后还提及了和别人的交际，认为和人们相处很快会感到乏味，思索或者劳作的人总会孤独，独处更加有益身心。我却觉得这些观点上有些极端。作者的主要观点我觉得实在表达要直接去做真正要做的，而不是被无关的事情所影响，这样的观点我也是非常认同，基于这个观点上来说，如果人的欲望是发自自己内心的，或许也可以等价为自己想做的事情，那即便为此去做些俗世的追求也并没有什么不好。而对作者来说，脱离世俗是他更好的达成自己欲望的一部分，不论是为了追求更多的知识，与大自然接触，这仍然是他的欲望。</p><p>但发自内心的又是什么呢？这个答案的细节一定是因人而异，但每个人发现的答案一定有类似点，即不受外界环境影响，无论在哪里都会有这样的想法。如果只是人云亦云，我想那无法称之为发自内心，而是作为人群的欲望罢了，不论是名声，财富。但是如果你摆脱了人群仍然想要得到这些，那去追寻我想也无妨。</p><p>欲望，一直都被认为是魔鬼般的存在，但我现在却不这样想了。我现在处于认为人生没有意义的状态，甚至对我来说活着就是尽可能满足自己的欲望，没有欲望的人，很难想象要怎么活下去。但我是一个十分贪婪的人，又不肯放弃哪些欲望，而且自身能力不够又无法抵达，这样的人路在何方呢？或许有朝一日会找到答案吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;人因欲望而前进，但又经常会因为欲望无法实现，又或者不可能实现而苦恼不已。在《诗人十四个》中有这样的一段话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有追求，就有落空的可能。应对此事只有两种策略：一是通过觉悟认识到追求的虚幻性，从而放下我执；二是用人格和意志的力量勉力支撑，直到</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>时间的洪流</title>
    <link href="https://fusionbolt.github.io/2023/08/06/Thinking/flood-of-time/"/>
    <id>https://fusionbolt.github.io/2023/08/06/Thinking/flood-of-time/</id>
    <published>2023-08-06T11:03:32.000Z</published>
    <updated>2023-08-06T11:04:39.945Z</updated>
    
    <content type="html"><![CDATA[<p>时间，一个再熟悉不过的词语，但是我们对其又非常陌生。</p><p>做什么事情都需要时间，发呆需要时间，写这些内容需要时间，看这些内容也需要时间，即便什么都不做，也需要时间。关于时间的话题也有很多，比如最常听到的珍惜时间，但我不打算讲这些听的耳朵出茧的大道理。</p><p>时间在我眼里是自我的一部分。时间由自我来掌控，同时通过对待时间的态度和方式显现出了一部分的自我。生活中有几句经常能听到的话：没时间啊，有时间就好了；能不上班就好了，那样就有时间做自己的事情了，这样的话本质都是类似的。但绝大部分情况下只是自我欺骗，或者说是某件事情对自己来说并没有那么重要，你的自我控制了你去做其他事情。</p><p>我之前经常会因为时间过的太快而焦虑，进一步观察其实是觉得自己没做什么正经事情，但我也没什么想做的事情，这样的我在回看过去的时间时焦虑感是不可避免的。或许当我找到属于自己在时间这一无尽的洪流中漂流的方式时，能够不再会为了体会到这种被迫漂流的感觉而感到害怕和无助，因为我知道这种漂流方式是自己主动选择的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间，一个再熟悉不过的词语，但是我们对其又非常陌生。&lt;/p&gt;
&lt;p&gt;做什么事情都需要时间，发呆需要时间，写这些内容需要时间，看这些内容也需要时间，即便什么都不做，也需要时间。关于时间的话题也有很多，比如最常听到的珍惜时间，但我不打算讲这些听的耳朵出茧的大道理。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Thinking" scheme="https://fusionbolt.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>mold源码阅读十六 回顾整个流程</title>
    <link href="https://fusionbolt.github.io/2023/08/05/mold/mold-16-summary/"/>
    <id>https://fusionbolt.github.io/2023/08/05/mold/mold-16-summary/</id>
    <published>2023-08-05T10:17:42.000Z</published>
    <updated>2023-08-05T10:31:22.234Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/mold-16-summary/Untitled.png"                      alt="Untitled"                ></p><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">pixiv:80173499</center> <h1 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h1><p>在以往十六期的博客中，我们沿着mold中的main函数一路追寻了下去，直到结束。</p><p>首先我们熟悉了<a class="link"   href="https://homura.live/2023/02/12/mold/mold-0/" >文件结构以及项目目录<i class="fas fa-external-link-alt"></i></a>等，<a class="link"   href="https://homura.live/2023/02/26/mold/mold-1-read-input-files/#read-file" >查看了如何读取不同类型的文件<i class="fas fa-external-link-alt"></i></a>，其中最关键的是<a class="link"   href="https://homura.live/2023/02/26/mold/mold-1-read-input-files/#ObjectFile" >obj<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://homura.live/2023/04/05/mold/mold-2-read-shared-files/" >dso<i class="fas fa-external-link-alt"></i></a>，lto三种，分析了不同类型的差异及其特有的处理方式。同时在查看如何解析elf的过程中了解elf头，了解了<a class="link"   href="https://homura.live/2023/02/26/mold/mold-1-read-input-files/#InputFile" >mold对象的构造<i class="fas fa-external-link-alt"></i></a>，以及elf中信息查找段、符号等的方式。</p><p>当我们收集齐输入的文件信息后就要开始对这些文件进行处理。首先做的是<a class="link"   href="https://homura.live/2023/04/09/mold/mold-3-symbol-resolve/#dso-uniquely" >dso去重，避免多个同名dso导致的错误<i class="fas fa-external-link-alt"></i></a>。接下来是最重要部分：符号信息解析。符号相关的过程有许多包括<a class="link"   href="https://homura.live/2023/04/09/mold/mold-3-symbol-resolve/#%E7%AC%A6%E5%8F%B7%E5%86%B3%E8%AE%AE" >符号决议<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://homura.live/2023/04/29/mold/mold-5-symbol/#compute-import-export" >符号的导入导出<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://homura.live/2023/04/29/mold/mold-5-symbol/" >动态链接的符号的版本确定<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://homura.live/2023/06/19/mold/mold-9-unresolve-symbol/#claim-unresolved-symbols" >处理未解析的符号<i class="fas fa-external-link-alt"></i></a>等等。之后还对<a class="link"   href="https://homura.live/2023/04/16/mold/mold-4-mergeable-section/" >mergeable的段进行合并<i class="fas fa-external-link-alt"></i></a>。</p><p>处理完符号相关的信息后开始<a class="link"   href="https://homura.live/2023/06/10/mold/mold-8-create-output-section/#create-output-sections" >创建输出文件<i class="fas fa-external-link-alt"></i></a>，准备将许多input section合成一个output section。此时需要对于常见synthetic<a class="link"   href="https://homura.live/2023/06/10/mold/mold-8-create-output-section/#add-synthetic-symbols" >符号<i class="fas fa-external-link-alt"></i></a>与段的构造，并且将它们放到输出的文件中。在实际输出文件之前还需要确定文件内部布局，主要对<a class="link"   href="https://homura.live/2023/06/24/mold/mold-10-sort-section/" >段排序<i class="fas fa-external-link-alt"></i></a>，其中包括chunks之间排序，以及output section内部保存的input section的顺序。</p><p>当文件布局确定后我们就可以<a class="link"   href="https://homura.live/2023/07/02/mold/mold-11-rel-and-dynsym/" >创建rel相关的段，将符号写入对应的符号表<i class="fas fa-external-link-alt"></i></a>，计算段内的一些信息，对部分<a class="link"   href="https://homura.live/2023/05/20/mold/mold-7-before-create-output-section/#Create-Synthetic-Sections" >synthetic段构造<i class="fas fa-external-link-alt"></i></a>等等。之后<a class="link"   href="https://homura.live/2023/07/15/mold/mold-13-compute-shdr-and-set-osec-offsets/#compute-section-headers" >更新section对应的shdr<i class="fas fa-external-link-alt"></i></a>，以及<a class="link"   href="https://homura.live/2023/07/15/mold/mold-13-compute-shdr-and-set-osec-offsets/" >更新段的虚拟地址<i class="fas fa-external-link-alt"></i></a>，对<a class="link"   href="https://homura.live/2023/07/26/mold/mold-14-fix-file-layout-and-create-output/#fix-synthetic-symbols" >synthetic符号的值进行修正<i class="fas fa-external-link-alt"></i></a>等。通过这些操作来确定下文件载入内存中的布局。</p><p>最后再将这些<a class="link"   href="https://homura.live/2023/07/26/mold/mold-14-fix-file-layout-and-create-output/#copy-chunks" >拷贝到输出文件<i class="fas fa-external-link-alt"></i></a>中。在拷贝的同时还做了许多操作，比如说段的重定位，填写ehdr以及其他synthetic段中的信息。</p><p>在整个过程中也有许多检查，比如符号重复定义或者未定义。还有许多优化，例如对<a class="link"   href="https://homura.live/2023/05/07/mold/mold-6-section-size-reduce/#gc-sections" >section进行标记来回收无用段<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://homura.live/2023/07/15/mold/mold-13-compute-shdr-and-set-osec-offsets/#set-virtual-addresses-by-order" >安排输出段的位置<i class="fas fa-external-link-alt"></i></a>使得相同读写权限的段尽可能在一个页内，<a class="link"   href="https://homura.live/2023/05/07/mold/mold-6-section-size-reduce/#icf-sections" >消除重复的ehframe项<i class="fas fa-external-link-alt"></i></a>，段压缩等等。</p><p>以上就是链接器mold的概况。</p><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>最初会开始看链接器的实现是因为感到好奇，加上之前每次遇到链接相关的问题第一反应是头大，觉得解决不了。后来看到mold这个链接器，其中的代码量还在我能串一遍理解的范畴，因此开始了读代码的过程。读的时候做着记录，后来想着干脆开一个系列博客，我在读的时候经常容易跳过某些细节，写博客的过程中会强制自己对这些细节进行强制思考。</p><p>经过了十六期的文章后，整个mold的链接过程基本上就全部过了一遍，而我对于链接器工作的整个流程有了更详细的认知。以前对于链接的模糊印象就是简单的相似段合并，符号解析（但是不知道符号解析具体是在做什么），生成可执行文件或者library，但现在我对于这些部分有了更多的了解，并且还知道了链接过程不止有这些，还有包括synthetic的符号和段的处理，虚拟地址计算，重定位操作等等。</p><p>除此之外还看到了许多未曾想到的东西，在看到一些处理过程后，对动态链接以及加载的过程也有了更多的了解，还有一些之前从未想过能如何联系到一起的想法，比如说相同attribute的段放在一起，避免单独成页，减少运行时的内存等。</p><p>虽然学到了很多东西但是还是有很多地方其实是一知半解，阅读源码远不如实际写来困难，虽然能够大致讲出整个链接器的结构是怎样的，但是对链接器来说最重要的还是各种边边角角的细节，或者意想不到的东西都会在写的过程中出现。我现在在造各种轮子玩，想自己做出各种东西并且串联起来，或许会有一天也会需要造自己的linker吧。</p><p>在源码通读的过程可能花了过久的时间，有些低效。但很多东西我一开始确实没意识到，很多问题都没有提出，不过查看了前面的这些过程后，现在开始阅读不仅是了解了有什么，还让我能够提出一些问题。</p><p>在博客内容写作的过程也不太熟练，最近也是为自己博客写作感到焦虑。不论是内容详细程度，以及排版，内容划分做的都不太好。在学习的时候看到maskray聚聚的文章，多少受到了一些启发，意识到自己过于注重于原来的代码怎么写，对于代码背后的原理关注的相对较少，这其实才是要学习的本质内容，又不是学习代码技巧。在后面几期也在有意识的进行改正，之后写其他阅读代码的博客时也会继续试着这样来做。</p><p>排版上试了不同的方案，比如说最早是放一段读一段，后来又尝试一次讲完一个流程然后贴整段代码，之后再对其中需要更加深入的细节加入小标题来做。不过感觉怎么都很别扭，markdown似乎没什么办法分成代码和文字两列，最后还是觉得先讲清楚流程再放代码了。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>如果后续勤快的话还会继续更新一些东西，除了这样通读外，还想针对特定主题进行贯穿一遍，而且还有一些没有详细看细节但是比较重要的东西。（总觉得说出这样的话就会懒得更了…）</p><p>比如说各种synthetic的符号更详细的介绍， 梳理做的各种优化，header的生成，为动态链接做的准备（got，plt等），数据压缩与解压，为重定位所做的各种操作，最终产物的地址计算与关联等等，这些其实都还比较模糊，没有一个确切的印象，需要单独串联起来理解整个过程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/mold-16-summar</summary>
      
    
    
    
    <category term="Linker" scheme="https://fusionbolt.github.io/categories/Linker/"/>
    
    
    <category term="mold" scheme="https://fusionbolt.github.io/tags/mold/"/>
    
  </entry>
  
</feed>
